{"version":3,"sources":["components/Messages/Dialogs/dialogStyles.ts","components/Messages/Dialogs/Dialog.tsx","components/Messages/Message/messageStyles.ts","components/Messages/Message/Message.tsx","components/Messages/Message/messageFormStyles.ts","components/Messages/Message/MessageForm.tsx","components/Messages/Chat/chatHeaderStyles.ts","components/Messages/Chat/ChatHeader.tsx","components/Messages/Chat/messagesChatStyles.ts","components/Messages/Chat/MessagesChat.tsx","components/Messages/Chat/emptyChatStyles.ts","components/Messages/Chat/EmptyChat.tsx","components/Messages/messagesStyles.ts","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx","components/Forms/components/FormControl.tsx","components/Redirects/AuthRedirect.tsx","assets/images/read.svg","assets/images/unread.svg","assets/images/chat-bg.svg"],"names":["styles","createStyles","theme","dialog","borderBottom","palette","grey","active","background","newMessages","secondary","main","color","common","white","height","display","padding","zIndex","position","flexWrap","fontSize","minWidth","boxSizing","alignItems","fontWeight","lineHeight","alignContent","borderRadius","flexDirection","right","breakpoints","up","date","openIcon","transform","primary","light","width","withNewMessages","paddingRight","withStyles","withTheme","withDialogStyles","classes","user","id","userName","photos","hasNewMessages","newMessagesCount","lastDialogActivityDate","lastMessageDate","Date","toLocaleDateString","userAvatar","small","userPlaceholder","ListItem","button","component","NavLink","to","RM","dialogs","getPath","activeClassName","className","classNames","ListItemAvatar","Avatar","src","alt","sizes","ListItemText","primaryTypographyProps","noWrap","Hidden","mdUp","message","marginBottom","maxWidth","avatar","messageSended","alignSelf","paddingLeft","borderBottomRightRadius","marginLeft","left","messageRecieved","borderBottomLeftRadius","marginRight","filter","messageInactive","messageItem","viewedIcon","bottom","messageIcon","maxHeight","opacity","actionBtn","cursor","border","delete","top","restore","margin","spam","letterSpacing","whiteSpace","withMessageStyles","deleteMessage","spamMessage","restoreMessage","deletedMessages","spamedMessages","selectedFriend","currentUserInfo","addedAt","body","senderId","viewed","messageDeleted","includes","messageSpamed","isOwnerMessage","userId","toLocaleTimeString","split","slice","join","getDate","inactiveText","profile","Typography","variant","readIcon","unreadIcon","onClick","Tooltip","title","aria-label","DeleteOutlineOutlined","ErrorOutlineOutlined","RestoreOutlined","form","backgroundColor","root","flexGrow","textarea","down","MessageReduxForm","reduxForm","withMessageFormStyles","handleSubmit","submitting","onSubmit","Field","name","type","RenderField","placeholder","required","InputProps","multiline","rowsMax","Button","disabled","head","content","boxShadow","headInfo","headLink","text","headDate","back","withChatHeaderStyles","lastUserActivityDate","messagesLoading","IconButton","edge","Skeleton","animation","Link","underline","fullName","toLocaleString","chat","paddingTop","chatWrapper","overflowY","withMessagesChatStyles","friendId","messages","getMessages","sendMessage","useState","filteredMessages","setFilteredMessages","useEffect","undefined","newArr","map","ordered","Object","entries","item","filterByDate","scrollChatToBottom","wrapper","document","getElementById","scroll","scrollHeight","clientHeight","Preloader","showPreloader","key","empty","emptyImg","chatPlaceholder","backgroundSize","emptyText","textAlign","withEmptyChatStyles","mdDown","paper","list","borderRight","overflow","hiddenList","withMessagesStyles","Paper","elevation","List","compose","connect","state","getMessagesList","getDialogsList","getLastUserActivityDate","getDeletedMessages","getSpamedMessages","getSelectedFriend","getCurrentUserInfo","getMessagesLoading","getDialogs","withAuthRedirect","props","useParams","Number","inputTypes","useStyles","makeStyles","textInput","input","label","meta","touched","error","rest","Boolean","helperText","fullWidth","control","checked","value","onChange","mapStateToProps","isAuth","getIsAuth","WrappedComponent","RedirectComponent","this","login","path","Component","module","exports"],"mappings":"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","file":"static/js/MessagesContainer.1215435f.chunk.js","sourcesContent":["import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    dialog: {\n        '&:not(:last-of-type)': {\n            borderBottom: `1px solid ${theme.palette.grey[200]}`\n        }\n    },\n    active: {\n        background: \"#efefef\"\n    },\n    newMessages: {\n        background: theme.palette.secondary.main,\n        color: theme.palette.common.white,\n        height: 20,\n        display: \"flex\",\n        padding: \"0 6px\",\n        zIndex: 1,\n        position: \"absolute\",\n        flexWrap: \"wrap\",\n        fontSize: 11,\n        minWidth: 20,\n        boxSizing: \"border-box\",\n        alignItems: \"center\",\n        fontWeight: 500,\n        lineHeight: 1,\n        alignContent: \"center\",\n        borderRadius: 10,\n        flexDirection: \"row\",\n        right: 10,\n        [theme.breakpoints.up(769)]: {\n            right: 2,\n        }\n    },\n    date: {\n        fontSize: 12,\n        color: theme.palette.grey[400]\n    },\n    openIcon: {\n        transform: 'scale(-1)',\n        color: theme.palette.primary.light,\n        width: 21,\n        [theme.breakpoints.up(769)]: {\n            display: 'none',\n        },\n    },\n    withNewMessages: {\n        paddingRight: 35,\n        [theme.breakpoints.up(769)]: {\n            paddingRight: 25\n        }\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport userPlaceholder from \"../../../assets/images/user-placeholder.png\";\nimport {DialogsType} from \"../../../redux/reducers/types\";\nimport {Avatar, Hidden, ListItem, ListItemAvatar, ListItemText, WithStyles} from \"@material-ui/core\";\nimport RM from \"../../../RouterManager\";\nimport classNames from \"classnames\";\nimport withDialogStyles from \"./dialogStyles\";\nimport {KeyboardBackspaceIcon} from \"../../Icons/MeterialIcons\";\n\ntype PropsType = {\n    user: DialogsType\n}\n\nconst Dialog: FC<PropsType & WithStyles> = ({classes, user: {id, userName, photos, hasNewMessages, newMessagesCount, lastDialogActivityDate}}) => {\n    const lastMessageDate = new Date(lastDialogActivityDate).toLocaleDateString();\n    const userAvatar = photos.small !== null ? photos.small : userPlaceholder;\n\n    return (\n        <ListItem button={true} component={NavLink} to={RM.dialogs.getPath(id)} activeClassName={classes.active}\n                  className={classNames(classes.dialog, {[classes.withNewMessages]: newMessagesCount > 0})}>\n            <ListItemAvatar>\n                <Avatar src={userAvatar} alt={userName} sizes=\"40\"/>\n            </ListItemAvatar>\n            <ListItemText primary={'@' + userName} secondary={lastMessageDate} primaryTypographyProps={{noWrap: true}}\n                          classes={{\n                              secondary: classes.date\n                          }}/>\n            {hasNewMessages &&\n                <span className={classes.newMessages}> {newMessagesCount > 99 ? '99+' : newMessagesCount}</span>\n            }\n            <Hidden mdUp>\n                {!hasNewMessages &&\n                <KeyboardBackspaceIcon className={classes.openIcon}/>\n                }\n            </Hidden>\n        </ListItem>\n    )\n};\n\nexport default withDialogStyles(Dialog);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    message: {\n        marginBottom: 25,\n        fontSize: 16,\n        fontWeight: 400,\n        position: \"relative\",\n        maxWidth: \"80%\",\n        display: \"flex\",\n        alignItems: \"flex-end\",\n        [theme.breakpoints.up('sm')]: {\n            marginBottom: 30,\n        },\n    },\n    avatar: {\n        height: 40,\n        width: 40\n    },\n\n    messageSended: {\n        alignSelf: \"flex-end\",\n        paddingLeft: 22,\n        flexDirection: \"row-reverse\",\n        '& $messageItem': {\n            background: \"#3d4977\",\n            color: \"#fff\",\n            borderBottomRightRadius: 0\n        },\n        '& $avatar': {\n            marginLeft: 10\n        },\n        '& $viewedIcon': {\n            right: 55\n        },\n        '& $actionBtn': {\n            left: 0\n        },\n        '& $date': {\n            right: 50\n        }\n    },\n\n    messageRecieved: {\n        paddingRight: 22,\n        '& $messageItem': {\n            background: \"#efefef\",\n            borderBottomLeftRadius: 0\n        },\n        '& $avatar': {\n            marginRight: 10\n        },\n        '& $viewedIcon': {\n            left: 55,\n            filter: \"invert(0.5)\"\n        },\n        '& $actionBtn': {\n            right: 0\n        },\n        '& $date': {\n            left: 50\n        }\n    },\n\n    messageInactive: {\n        '& $messageItem': {\n            background: \"#eee\",\n            color: \"grey\",\n            fontSize: \"12px\"\n        },\n        '& $viewedIcon': {\n            display: \"none\"\n        }\n    },\n\n    messageItem: {\n        fontSize: \"0.9rem\",\n        padding: \"9px 15px\",\n        borderRadius: \"10px\",\n    },\n    viewedIcon: {\n        position: \"absolute\",\n        bottom: \"2px\",\n        height: \"12px\",\n    },\n    messageIcon: {\n        maxWidth: 17,\n        maxHeight: 17,\n        opacity: \"0.5\"\n    },\n    actionBtn: {\n        cursor: \"pointer\",\n        width: 20,\n        height: 20,\n        position: \"absolute\",\n        background: \"transparent\",\n        padding: 2,\n        boxSizing: \"border-box\",\n        border: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        '&:hover $messageIcon': {\n            opacity: 1\n        },\n    },\n\n    delete: {\n        top: 0\n    },\n    restore: {\n        top: 0,\n        bottom: 0,\n        margin: \"auto 0\"\n    },\n    spam: {\n        top: 20\n    },\n\n    date: {\n        position: \"absolute\",\n        bottom: \"-20px\",\n        fontSize: 11,\n        color: theme.palette.grey[400],\n        letterSpacing: \"-0.4px\",\n        whiteSpace: \"nowrap\",\n        [theme.breakpoints.up(480)]: {\n            fontSize: 12,\n        },\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})","import React, {FC} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport RM from \"../../../RouterManager\";\nimport Markdown from 'markdown-to-jsx';\nimport classNames from 'classnames';\nimport {Avatar, Tooltip, Typography, WithStyles} from \"@material-ui/core\";\nimport {DeleteOutlineOutlined, RestoreOutlined, ErrorOutlineOutlined} from '@material-ui/icons';\nimport readIcon from \"../../../assets/images/read.svg\";\nimport unreadIcon from \"../../../assets/images/unread.svg\";\nimport {MessagesType, ProfileType} from \"../../../redux/reducers/types\";\nimport userPlaceholder from \"../../../assets/images/user-placeholder.png\";\nimport withMessageStyles from './messageStyles'\n\ntype PropsType = {\n    message: MessagesType\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>\n    selectedFriend: ProfileType | null\n    currentUserInfo: ProfileType,\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\nconst Message: FC<PropsType & WithStyles> = ({message, deleteMessage, spamMessage, restoreMessage, deletedMessages, spamedMessages, selectedFriend, currentUserInfo, classes}) => {\n    const {addedAt, body, id, senderId, viewed} = message;\n    const messageDeleted = deletedMessages.includes(id);\n    const messageSpamed = spamedMessages.includes(id);\n    const messageInactive = messageDeleted || messageSpamed;\n    const isOwnerMessage = senderId === currentUserInfo.userId;\n\n    const getAvatar = () => {\n        if (!isOwnerMessage && selectedFriend) {\n            return selectedFriend.photos.small || userPlaceholder;\n        } else if (isOwnerMessage) {\n            return currentUserInfo.photos.small || userPlaceholder;\n        } else {\n            return userPlaceholder\n        }\n    };\n\n    const getDate = (date: string) => {\n        const formattedDate = new Date(date).toLocaleTimeString();\n        return formattedDate.split(\":\").slice(0,-1).join(':');\n    };\n\n    const date = getDate(addedAt);\n    const inactiveText = messageDeleted ? 'Message was deleted' : 'Message added to spam';\n\n    return (\n        <div className={classNames(\n            classes.message,\n            isOwnerMessage ? classes.messageSended : classes.messageRecieved,\n            messageInactive ? classes.messageInactive : ''\n        )}>\n            <Avatar component={NavLink} to={RM.profile.getPath(senderId)} src={getAvatar()} alt='avatar' sizes=\"40\" className={classes.avatar}/>\n            <Typography variant=\"body2\" className={classes.messageItem} component=\"div\">\n                {messageInactive ? inactiveText : <Markdown>{body}</Markdown>}\n            </Typography>\n            <img src={viewed ? readIcon : unreadIcon} alt=\"\" className={classes.viewedIcon}/>\n\n            <div className={classes.date}>\n                {date}\n            </div>\n            {!messageInactive &&\n            <>\n                <button className={classNames(classes.actionBtn, classes.delete)} onClick={() => deleteMessage(id)}>\n                    <Tooltip title=\"Delete\" aria-label=\"Delete\">\n                        <DeleteOutlineOutlined color=\"primary\" className={classes.messageIcon}/>\n                    </Tooltip>\n                </button>\n                {!isOwnerMessage &&\n                <button className={classNames(classes.actionBtn, classes.spam)} onClick={() => spamMessage(id)}>\n                    <Tooltip title=\"Spam\" aria-label=\"Spam\">\n                        <ErrorOutlineOutlined color=\"primary\" className={classes.messageIcon}/>\n                    </Tooltip>\n                </button>\n                }\n            </>\n            }\n            {messageInactive &&\n            <button className={classNames(classes.actionBtn, classes.restore)} onClick={() => restoreMessage(id)}>\n                <Tooltip title=\"Restore\" aria-label=\"Restore\">\n                    <RestoreOutlined color=\"primary\" className={classes.messageIcon}/>\n                </Tooltip>\n            </button>\n            }\n        </div>\n    )\n};\n\nexport default withMessageStyles(Message);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    form: {\n        display: \"flex\",\n        backgroundColor: \"#f3f5f7\",\n        padding: 10,\n        [theme.breakpoints.up(769)]: {\n            padding: 30,\n        },\n    },\n    root: {\n        flexGrow: 1,\n        marginBottom: 0\n    },\n    textarea: {\n        borderRadius: 0,\n        backgroundColor: 'white',\n        [theme.breakpoints.down(769)]: {\n            padding: '10px 14px'\n        },\n    },\n    button: {\n        height: \"100%\",\n        borderRadius: 0\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})","import React, {FC} from \"react\";\nimport {Field, reduxForm, InjectedFormProps} from \"redux-form\";\nimport {RenderField} from \"../../Forms/components/FormControl\";\nimport {WithStyles, Button} from \"@material-ui/core\";\nimport withMessageFormStyles from \"./messageFormStyles\";\nimport {SendIcon} from \"../../Icons/MeterialIcons\";\n\ntype FormDataType = {\n    message: string\n};\n\nconst MessageForm: FC<InjectedFormProps<FormDataType> & WithStyles> = ({handleSubmit, submitting, classes}) => {\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <Field\n                name=\"message\"\n                type=\"textarea\"\n                component={RenderField}\n                placeholder=\"Type message...\"\n                required={true}\n                classes={{\n                    root: classes.root,\n                }}\n                InputProps={{\n                    className: classes.textarea\n                }}\n                variant=\"outlined\"\n                multiline\n                rowsMax=\"2\"\n            />\n\n            <Button type=\"submit\" disabled={submitting} className={classes.button} color=\"primary\" variant=\"contained\">\n                <SendIcon/>\n            </Button>\n        </form>\n    )\n};\n\nconst MessageReduxForm = reduxForm<FormDataType>({\n    form: 'message'\n})(withMessageFormStyles(MessageForm));\n\nexport default MessageReduxForm;\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    head: {\n        display: \"flex\",\n        alignItems: \"center\",\n        fontSize: \"12px\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        padding: '5px 30px 5px 47px',\n        zIndex: 2,\n        backgroundColor: theme.palette.common.white,\n        [theme.breakpoints.up(769)]: {\n            padding: \"11px 30px\",\n        },\n        \"&::after\": {\n            position: \"absolute\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            content: \"''\",\n            height: \"1px\",\n            boxShadow: \"0 2px 4px 0 rgba(0, 0, 0, 0.2)\"\n        }\n    },\n    headInfo: {\n        marginLeft: 15,\n        flexGrow: 1\n    },\n    headLink: {\n        color: theme.palette.text.primary,\n        '&:hover': {\n            color: theme.palette.primary.main\n        }\n    },\n    headDate: {\n        color: theme.palette.grey[400],\n        [theme.breakpoints.down(480)]: {\n            fontSize: 11\n        },\n    },\n    back: {\n        position: 'absolute',\n        left: 0,\n        [theme.breakpoints.up(769)]: {\n            display: 'none'\n        },\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {Avatar, Hidden, IconButton, Link, Typography, WithStyles} from \"@material-ui/core\";\nimport userPlaceholder from \"../../../assets/images/user-placeholder.png\";\nimport {NavLink} from \"react-router-dom\";\nimport RM from \"../../../RouterManager\";\nimport {ProfileType} from \"../../../redux/reducers/types\";\nimport {Skeleton} from \"@material-ui/lab\";\nimport withChatHeaderStyles from \"./chatHeaderStyles\";\nimport {KeyboardBackspaceIcon} from \"../../Icons/MeterialIcons\";\n\ntype PropsType = {\n    lastUserActivityDate: string | null\n    selectedFriend: ProfileType,\n    messagesLoading: boolean\n}\n\nconst ChatHeader: FC<PropsType  & WithStyles> = ({classes, lastUserActivityDate, selectedFriend, messagesLoading}) => {\n    return (\n        <div className={classes.head}>\n            <Hidden mdUp>\n                <IconButton\n                    color=\"primary\"\n                    aria-label=\"Back\"\n                    edge=\"end\"\n                    component={NavLink}\n                    className={classes.back}\n                    to={RM.dialogs.getPath(null)}\n                >\n                    <KeyboardBackspaceIcon/>\n                </IconButton>\n            </Hidden>\n            {\n                messagesLoading ?\n                    <Skeleton animation=\"wave\" variant=\"circle\" height={40} width={40}/> :\n                    <Avatar\n                        src={selectedFriend.photos.small || userPlaceholder}\n                        component={NavLink}\n                        to={RM.profile.getPath(selectedFriend.userId)}\n                        alt='avatar'\n                        sizes=\"40\"\n                    />\n            }\n\n            <div className={classes.headInfo}>\n                {messagesLoading ?\n                    <>\n                        <Skeleton animation=\"wave\" width=\"80%\" className={\"MuiTypography-subtitle1\"}/>\n                        <Skeleton animation=\"wave\" width=\"50%\"  height={13} className={\"MuiTypography-body2\"}/>\n                    </>\n                    :\n                    <>\n                        <Link component={NavLink} to={RM.profile.getPath(selectedFriend.userId)} underline=\"none\"\n                              className={classes.headLink}>\n                            <Typography variant=\"subtitle1\" component=\"h6\">{selectedFriend.fullName}</Typography>\n                        </Link>\n                        {lastUserActivityDate &&\n                        <div className={classes.headDate}>\n                            Was here: {new Date(lastUserActivityDate).toLocaleString()}\n                        </div>\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default withChatHeaderStyles(ChatHeader);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    chat: {\n        position: \"relative\",\n        paddingTop: \"68px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\"\n    },\n\n    chatWrapper: {\n        position: \"relative\",\n\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        flexGrow: 1,\n        overflowY: \"auto\",\n        padding: \"0 10px 20px\"\n    },\n    date: {\n        color: theme.palette.grey[400],\n        margin: \"5px auto\",\n        [theme.breakpoints.up('sm')]: {\n            margin: \"15px auto\",\n        },\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {useEffect, FC, useState, Fragment} from 'react';\nimport Message from \"./../Message/Message\";\nimport MessageForm from \"./../Message/MessageForm\";\nimport {MessagesType, ProfileType} from \"../../../redux/reducers/types\";\nimport Preloader from \"../../Preloader/Preloader\";\nimport ChatHeader from \"./ChatHeader\";\nimport {WithStyles} from \"@material-ui/core\";\nimport withMessagesChatStyles from \"./messagesChatStyles\";\n\ntype PropsType = {\n    messages: Array<MessagesType>\n    lastUserActivityDate: string | null\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>\n    friendId: number,\n    selectedFriend: ProfileType | null\n    currentUserInfo: ProfileType,\n    messagesLoading: boolean,\n    sendMessage: (userId: number, message: string) => void\n    getMessages: (userId: number) => void\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\ntype FilteredMessagesType = {\n    date: string,\n    messages: Array<MessagesType>\n};\n\nconst MessagesChat: FC<PropsType & WithStyles> = ({\n                                                      classes,\n                                                      friendId,\n                                                      messages,\n                                                      deleteMessage,\n                                                      spamMessage,\n                                                      lastUserActivityDate,\n                                                      restoreMessage,\n                                                      getMessages,\n                                                      sendMessage,\n                                                      deletedMessages,\n                                                      spamedMessages,\n                                                      selectedFriend,\n                                                      currentUserInfo,\n                                                      messagesLoading\n                                                  }) => {\n    const [filteredMessages, setFilteredMessages] = useState<[] | Array<FilteredMessagesType>>([]);\n    const filterByDate = () => {\n        let newArr: any = {};\n        messages.map((message: MessagesType) => {\n            const date = new Date(message.addedAt).toLocaleDateString();\n            if (!newArr[date]) {\n                newArr[date] = [message];\n            } else {\n                newArr[date] = [...newArr[date], message];\n            }\n        });\n        let ordered: FilteredMessagesType[] = [];\n        Object.entries(newArr).map((item: Array<any>) => {\n            ordered = [\n                ...ordered,\n                {\n                    date: item[0],\n                    messages: item[1],\n                }\n            ];\n        });\n        setFilteredMessages(ordered);\n    };\n\n    const updateMessages = () => {\n        if (friendId !== undefined) {\n            getMessages(friendId);\n        }\n    };\n\n    useEffect(() => {\n        if (friendId) {\n            updateMessages();\n        }\n    }, [friendId]);\n\n    useEffect(() => {\n        filterByDate();\n    }, [messages]);\n\n    useEffect(() => {\n        if (!messagesLoading) {\n            scrollChatToBottom();\n        }\n    }, [messagesLoading, filteredMessages]);\n\n    const scrollChatToBottom = () => {\n        const wrapper = document.getElementById(\"wrapper\");\n        if (wrapper) {\n            wrapper.scroll(0, wrapper.scrollHeight - wrapper.clientHeight);\n        }\n    };\n\n    const onAddMessage = ({message}: { message: string }) => {\n        sendMessage(friendId, message);\n    };\n\n    return (\n        <>\n            <div className={classes.chat}>\n                {selectedFriend &&\n                <ChatHeader lastUserActivityDate={lastUserActivityDate} selectedFriend={selectedFriend}\n                            messagesLoading={messagesLoading}/>\n                }\n                <div className={classes.chatWrapper} id=\"wrapper\">\n                    {messagesLoading ?\n                        <Preloader showPreloader={true}/> :\n                        (filteredMessages as FilteredMessagesType[]).map(({date, messages}) =>\n                            <Fragment key={date}>\n                                <div className={classes.date}>\n                                    {date}\n                                </div>\n                                {messages.map((message) =>\n                                    <Message\n                                        key={message.id}\n                                        message={message}\n                                        deleteMessage={deleteMessage}\n                                        spamMessage={spamMessage}\n                                        restoreMessage={restoreMessage}\n                                        deletedMessages={deletedMessages}\n                                        spamedMessages={spamedMessages}\n                                        selectedFriend={selectedFriend}\n                                        currentUserInfo={currentUserInfo}\n                                    />\n                                )}\n                            </Fragment>\n                        )\n                    }\n                </div>\n                <MessageForm onSubmit={onAddMessage}/>\n            </div>\n        </>\n    )\n};\n\nexport default withMessagesChatStyles(MessagesChat);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport chatPlaceholder from \"../../../assets/images/chat-bg.svg\";\n\nconst styles = createStyles((theme: Theme) => ({\n    empty: {\n        width: '100%',\n        height: '100%',\n        padding: 30,\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    emptyImg: {\n        background: `url(${chatPlaceholder}) no-repeat center` ,\n        backgroundSize: 'contain',\n        flexGrow: 1\n    },\n    emptyText: {\n        margin: '30px 0',\n        textAlign: 'center'\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {Hidden, Typography, WithStyles} from \"@material-ui/core\";\nimport withEmptyChatStyles from \"./emptyChatStyles\";\n\nconst EmptyChat:FC<WithStyles> = ({classes}) => {\n    return (\n        <div className={classes.empty}>\n            <div className={classes.emptyImg}/>\n            <Hidden mdDown>\n                <div className={classes.emptyText}>\n                    <Typography variant=\"h6\">\n                        Select conversation to display\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        To start a new conversation just click the message button from a person profile\n                    </Typography>\n                </div>\n            </Hidden>\n        </div>\n    )\n};\nexport default withEmptyChatStyles(EmptyChat);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        padding: '20px 0',\n        display: 'flex',\n        alignItems: 'center',\n        [theme.breakpoints.up('md')]: {\n            padding: '20px 0',\n        }\n    },\n    paper: {\n        width: '100%',\n        height: 'calc(100vh - 130px)',\n        display: 'flex',\n        background: '#ffffff',\n        borderRadius: 0,\n        position: 'relative'\n    },\n    list: {\n        borderRight: '1px solid #eeeeee',\n        backgroundColor: theme.palette.background.paper,\n        overflow: 'auto',\n        maxHeight: '100%',\n        padding: 0,\n        [theme.breakpoints.down(769)]: {\n            background: 'rgba(255, 255, 255, 0.8)',\n            position: 'absolute',\n            left: 0,\n            width: '100%',\n            top: 0,\n            bottom: 0,\n            zIndex: 2\n        },\n        [theme.breakpoints.up(769)]: {\n            width: 250,\n            minWidth: 250,\n        },\n        [theme.breakpoints.up('md')]: {\n            width: 300,\n            minWidth: 300,\n        },\n    },\n    hiddenList: {\n        [theme.breakpoints.down(769)]: {\n            left: 'calc(-100% - 30px)',\n        },\n    },\n    content: {\n        flexGrow: 1,\n        position: 'relative',\n\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport Dialog from \"./Dialogs/Dialog\";\nimport MessagesChat from \"./Chat/MessagesChat\";\nimport {DialogsType, MessagesType, ProfileType} from \"../../redux/reducers/types\";\nimport {Paper, List, WithStyles} from \"@material-ui/core\";\nimport EmptyChat from \"./Chat/EmptyChat\";\nimport classNames from \"classnames\";\nimport withMessagesStyles from \"./messagesStyles\";\n\ntype PropsType = {\n    dialogs: Array<DialogsType>\n    messages: Array<MessagesType>\n    lastUserActivityDate: string | null\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>\n    selectedFriend: ProfileType | null\n    currentUserInfo: ProfileType | null,\n    friendId: number,\n    messagesLoading: boolean,\n    sendMessage: (userId: number, message: string) => void\n    getMessages: (userId: number) => void\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\nconst Messages: FC<PropsType & WithStyles> = ({\n                                                  classes,\n                                                  messages,\n                                                  deletedMessages,\n                                                  dialogs,\n                                                  sendMessage,\n                                                  getMessages,\n                                                  deleteMessage,\n                                                  spamMessage,\n                                                  lastUserActivityDate,\n                                                  restoreMessage,\n                                                  spamedMessages,\n                                                  selectedFriend,\n                                                  currentUserInfo,\n                                                  friendId,\n                                                  messagesLoading\n                                              }) => {\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper} elevation={3}>\n                <List className={classNames(classes.list, {[classes.hiddenList]: friendId})} component=\"div\">\n                    {dialogs.map(user =>\n                        <Dialog\n                            key={user.id}\n                            user={user}\n                        />)\n                    }\n                </List>\n                <div className={classes.content}>\n                    {currentUserInfo && friendId ?\n                        <MessagesChat\n                            messagesLoading={messagesLoading}\n                            deletedMessages={deletedMessages}\n                            spamedMessages={spamedMessages}\n                            messages={messages}\n                            friendId={friendId}\n                            sendMessage={sendMessage}\n                            getMessages={getMessages}\n                            deleteMessage={deleteMessage}\n                            spamMessage={spamMessage}\n                            lastUserActivityDate={lastUserActivityDate}\n                            restoreMessage={restoreMessage}\n                            selectedFriend={selectedFriend}\n                            currentUserInfo={currentUserInfo}\n                        /> :\n                        <EmptyChat/>\n                    }\n                </div>\n            </Paper>\n        </div>\n    )\n};\n\nexport default withMessagesStyles(Messages);\n","import React, {FC, useEffect} from \"react\";\nimport {\n    sendMessage,\n    getDialogs,\n    getMessages,\n    deleteMessage,\n    spamMessage,\n    restoreMessage,\n} from \"../../redux/reducers/dialogs-reducer\";\nimport {\n    getDeletedMessages,\n    getDialogsList,\n    getLastUserActivityDate,\n    getMessagesList, getSelectedFriend,\n    getSpamedMessages,\n    getMessagesLoading\n} from \"../../redux/reducers/dialogs-selectors\";\nimport {getCurrentUserInfo} from \"../../redux/reducers/auth-selectors\";\n\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from '../Redirects/AuthRedirect'\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {DialogsType, MessagesType, ProfileType} from \"../../redux/reducers/types\";\nimport Messages from \"./Messages\";\nimport {useParams} from \"react-router-dom\";\n\ntype MapStatePropsType = {\n    dialogs: Array<DialogsType>\n    messages: Array<MessagesType>\n    lastUserActivityDate: string | null\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>,\n    selectedFriend: ProfileType | null,\n    currentUserInfo: ProfileType | null,\n    messagesLoading: boolean\n}\n\ntype MapDispatchPropsType = {\n    sendMessage: (userId: number, message: string) => void\n    getDialogs: () => void\n    getMessages: (userId: number) => void\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst MessagesContainer:FC<PropsType> = ({getDialogs, ...props}) => {\n    let { id } = useParams();\n\n    useEffect(() => {\n        getDialogs()\n    }, []);\n\n    return <Messages {...props} friendId={Number(id)}/>\n};\n\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        messages: getMessagesList(state),\n        dialogs: getDialogsList(state),\n        lastUserActivityDate: getLastUserActivityDate(state),\n        deletedMessages: getDeletedMessages(state),\n        spamedMessages: getSpamedMessages(state),\n        selectedFriend: getSelectedFriend(state),\n        currentUserInfo: getCurrentUserInfo(state),\n        messagesLoading: getMessagesLoading(state)\n    }\n};\n\nexport default compose(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n        sendMessage,\n        getDialogs,\n        getMessages,\n        deleteMessage,\n        spamMessage,\n        restoreMessage\n    }),\n    withAuthRedirect\n)(MessagesContainer) as FC;\n","import React, {FC} from \"react\";\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\nimport {TextField, TextFieldProps, makeStyles, Checkbox, FormControlLabel, Switch} from \"@material-ui/core\";\n\nconst inputTypes = [\n    'text',\n    'email',\n    'search',\n    'password',\n    'textarea'\n];\n\nconst useStyles = makeStyles(theme => ({\n    textInput: {\n        marginBottom: 25,\n        '& .MuiFormHelperText-root': {\n            fontSize: 10,\n            position: 'absolute',\n            bottom: 0,\n            transform: 'translateY(100%)',\n            [theme.breakpoints.up('sm')]: {\n                fontSize: 12,\n            }\n        }\n    }\n}));\n\ntype OwnPropsType = {\n    label?: string,\n    type: string,\n    rest?: any,\n};\n\ntype PropsType = WrappedFieldProps & OwnPropsType & TextFieldProps;\n\nexport const RenderField: FC<PropsType> = ({input, label, type, meta: {touched, error}, ...rest}) => {\n    const classes = useStyles();\n    return (\n        <>\n            {inputTypes.includes(type) &&\n            <TextField\n                error={touched && Boolean(error)}\n                helperText={touched && error ? error : ''}\n                label={label}\n                type={type}\n                fullWidth={true}\n                className={classes.textInput}\n                {...input}\n                {...rest}\n            />\n            }\n            {type === 'checkbox' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Checkbox\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n            {type === 'switch' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Switch\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n        </>\n    )\n};\n","import React, {Component, ComponentType, ReactNode} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getIsAuth} from \"../../redux/reducers/auth-selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport RM from \"../../RouterManager\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: getIsAuth(state)\n    }\n};\n\nexport const withAuthRedirect = (WrappedComponent: ComponentType<ReactNode>) => {\n    class RedirectComponent extends Component<MapStatePropsType> {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={RM.login.path}/>;\n            return <WrappedComponent {...this.props}/>\n        }\n    }\n\n    return connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToProps)(RedirectComponent);\n};","module.exports = __webpack_public_path__ + \"static/media/read.3f77ca25.svg\";","module.exports = __webpack_public_path__ + \"static/media/unread.4cd435c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat-bg.6cc5a933.svg\";"],"sourceRoot":""}