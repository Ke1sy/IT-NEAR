{"version":3,"sources":["components/Forms/components/FormControl.tsx","components/Redirects/AuthRedirect.tsx","assets/images/read.svg","assets/images/unread.svg","assets/images/chat-bg.svg","components/Messages/Dialogs/dialogStyles.ts","components/Messages/Dialogs/Dialog.tsx","components/Messages/Message/messageStyles.ts","components/Messages/Message/Message.tsx","components/Messages/Message/messageFormStyles.ts","components/Messages/Message/MessageForm.tsx","components/Messages/Chat/chatHeaderStyles.ts","components/Messages/Chat/ChatHeader.tsx","components/Messages/Chat/messagesChatStyles.ts","components/Messages/Chat/MessagesChat.tsx","components/Messages/Chat/emptyChatStyles.ts","components/Messages/Chat/EmptyChat.tsx","components/Messages/messagesStyles.ts","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx"],"names":["inputTypes","useStyles","makeStyles","theme","textInput","marginBottom","fontSize","position","bottom","transform","breakpoints","up","RenderField","input","label","type","meta","touched","error","rest","classes","includes","Boolean","helperText","fullWidth","className","control","checked","value","onChange","mapStateToProps","state","isAuth","getIsAuth","withAuthRedirect","WrappedComponent","RedirectComponent","this","props","to","RM","login","path","Component","connect","module","exports","styles","createStyles","dialog","borderBottom","palette","grey","active","background","newMessages","secondary","main","color","common","white","height","display","padding","zIndex","flexWrap","minWidth","boxSizing","alignItems","fontWeight","lineHeight","alignContent","borderRadius","flexDirection","right","date","openIcon","primary","light","width","withNewMessages","paddingRight","withStyles","withTheme","withDialogStyles","user","id","userName","photos","hasNewMessages","newMessagesCount","lastDialogActivityDate","lastMessageDate","Date","toLocaleDateString","userAvatar","small","userPlaceholder","ListItem","button","component","NavLink","dialogs","getPath","activeClassName","classNames","ListItemAvatar","Avatar","src","alt","sizes","ListItemText","primaryTypographyProps","noWrap","Hidden","mdUp","message","maxWidth","avatar","messageSended","alignSelf","paddingLeft","borderBottomRightRadius","marginLeft","left","messageRecieved","borderBottomLeftRadius","marginRight","filter","messageInactive","messageItem","viewedIcon","messageIcon","maxHeight","opacity","actionBtn","cursor","border","delete","top","restore","margin","spam","letterSpacing","whiteSpace","withMessageStyles","deleteMessage","spamMessage","restoreMessage","deletedMessages","spamedMessages","selectedFriend","currentUserInfo","addedAt","body","senderId","viewed","messageDeleted","messageSpamed","isOwnerMessage","userId","toLocaleTimeString","split","slice","join","getDate","inactiveText","profile","Typography","variant","readIcon","unreadIcon","onClick","Tooltip","title","aria-label","DeleteOutlineOutlined","ErrorOutlineOutlined","RestoreOutlined","form","backgroundColor","root","flexGrow","textarea","down","MessageReduxForm","reduxForm","withMessageFormStyles","handleSubmit","submitting","onSubmit","Field","name","placeholder","required","InputProps","multiline","rowsMax","Button","disabled","head","content","boxShadow","headInfo","headLink","text","headDate","back","withChatHeaderStyles","lastUserActivityDate","messagesLoading","IconButton","edge","Skeleton","animation","Link","underline","fullName","toLocaleString","chat","paddingTop","chatWrapper","overflowY","withMessagesChatStyles","friendId","messages","getMessages","sendMessage","useState","filteredMessages","setFilteredMessages","useEffect","undefined","newArr","map","ordered","Object","entries","item","filterByDate","scrollChatToBottom","wrapper","document","getElementById","scroll","scrollHeight","clientHeight","Preloader","showPreloader","key","empty","emptyImg","chatPlaceholder","backgroundSize","emptyText","textAlign","withEmptyChatStyles","mdDown","paper","list","borderRight","overflow","hiddenList","withMessagesStyles","Paper","elevation","List","compose","getMessagesList","getDialogsList","getLastUserActivityDate","getDeletedMessages","getSpamedMessages","getSelectedFriend","getCurrentUserInfo","getMessagesLoading","getDialogs","useParams","Number"],"mappings":"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","file":"static/js/MessagesContainer.7ae31235.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\nimport {TextField, TextFieldProps, makeStyles, Checkbox, FormControlLabel, Switch} from \"@material-ui/core\";\n\nconst inputTypes = [\n    'text',\n    'email',\n    'search',\n    'password',\n    'textarea'\n];\n\nconst useStyles = makeStyles(theme => ({\n    textInput: {\n        marginBottom: 25,\n        '& .MuiFormHelperText-root': {\n            fontSize: 10,\n            position: 'absolute',\n            bottom: 0,\n            transform: 'translateY(100%)',\n            [theme.breakpoints.up('sm')]: {\n                fontSize: 12,\n            }\n        }\n    }\n}));\n\ntype OwnPropsType = {\n    label?: string,\n    type: string,\n    rest?: any,\n};\n\ntype PropsType = WrappedFieldProps & OwnPropsType & TextFieldProps;\n\nexport const RenderField: FC<PropsType> = ({input, label, type, meta: {touched, error}, ...rest}) => {\n    const classes = useStyles();\n    return (\n        <>\n            {inputTypes.includes(type) &&\n            <TextField\n                error={touched && Boolean(error)}\n                helperText={touched && error ? error : ''}\n                label={label}\n                type={type}\n                fullWidth={true}\n                className={classes.textInput}\n                {...input}\n                {...rest}\n            />\n            }\n            {type === 'checkbox' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Checkbox\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n            {type === 'switch' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Switch\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n        </>\n    )\n};\n","import React, {Component, ComponentType, ReactNode} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getIsAuth} from \"../../redux/reducers/auth-selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport RM from \"../../RouterManager\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: getIsAuth(state)\n    }\n};\n\nexport const withAuthRedirect = (WrappedComponent: ComponentType<ReactNode>) => {\n    class RedirectComponent extends Component<MapStatePropsType> {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={RM.login.path}/>;\n            return <WrappedComponent {...this.props}/>\n        }\n    }\n\n    return connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToProps)(RedirectComponent);\n};","module.exports = __webpack_public_path__ + \"static/media/read.3f77ca25.svg\";","module.exports = __webpack_public_path__ + \"static/media/unread.4cd435c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat-bg.6cc5a933.svg\";","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    dialog: {\n        '&:not(:last-of-type)': {\n            borderBottom: `1px solid ${theme.palette.grey[200]}`\n        }\n    },\n    active: {\n        background: \"#efefef\"\n    },\n    newMessages: {\n        background: theme.palette.secondary.main,\n        color: theme.palette.common.white,\n        height: 20,\n        display: \"flex\",\n        padding: \"0 6px\",\n        zIndex: 1,\n        position: \"absolute\",\n        flexWrap: \"wrap\",\n        fontSize: 11,\n        minWidth: 20,\n        boxSizing: \"border-box\",\n        alignItems: \"center\",\n        fontWeight: 500,\n        lineHeight: 1,\n        alignContent: \"center\",\n        borderRadius: 10,\n        flexDirection: \"row\",\n        right: 10,\n        [theme.breakpoints.up(769)]: {\n            right: 2,\n        }\n    },\n    date: {\n        fontSize: 12,\n        color: theme.palette.grey[400]\n    },\n    openIcon: {\n        transform: 'scale(-1)',\n        color: theme.palette.primary.light,\n        width: 21,\n        [theme.breakpoints.up(769)]: {\n            display: 'none',\n        },\n    },\n    withNewMessages: {\n        paddingRight: 35,\n        [theme.breakpoints.up(769)]: {\n            paddingRight: 25\n        }\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport userPlaceholder from \"../../../assets/images/user-placeholder.png\";\nimport {DialogsType} from \"../../../redux/reducers/types\";\nimport {Avatar, Hidden, ListItem, ListItemAvatar, ListItemText, WithStyles} from \"@material-ui/core\";\nimport RM from \"../../../RouterManager\";\nimport classNames from \"classnames\";\nimport withDialogStyles from \"./dialogStyles\";\nimport {KeyboardBackspaceIcon} from \"../../Icons/MeterialIcons\";\n\ntype PropsType = {\n    user: DialogsType\n}\n\nconst Dialog: FC<PropsType & WithStyles> = ({classes, user: {id, userName, photos, hasNewMessages, newMessagesCount, lastDialogActivityDate}}) => {\n    const lastMessageDate = new Date(lastDialogActivityDate).toLocaleDateString();\n    const userAvatar = photos.small !== null ? photos.small : userPlaceholder;\n\n    return (\n        <ListItem button={true} component={NavLink} to={RM.dialogs.getPath(id)} activeClassName={classes.active}\n                  className={classNames(classes.dialog, {[classes.withNewMessages]: newMessagesCount > 0})}>\n            <ListItemAvatar>\n                <Avatar src={userAvatar} alt={userName} sizes=\"40\"/>\n            </ListItemAvatar>\n            <ListItemText primary={'@' + userName} secondary={lastMessageDate} primaryTypographyProps={{noWrap: true}}\n                          classes={{\n                              secondary: classes.date\n                          }}/>\n            {hasNewMessages &&\n                <span className={classes.newMessages}> {newMessagesCount > 99 ? '99+' : newMessagesCount}</span>\n            }\n            <Hidden mdUp>\n                {!hasNewMessages &&\n                <KeyboardBackspaceIcon className={classes.openIcon}/>\n                }\n            </Hidden>\n        </ListItem>\n    )\n};\n\nexport default withDialogStyles(Dialog);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    message: {\n        marginBottom: 25,\n        fontSize: 16,\n        fontWeight: 400,\n        position: \"relative\",\n        maxWidth: \"80%\",\n        display: \"flex\",\n        alignItems: \"flex-end\",\n        [theme.breakpoints.up('sm')]: {\n            marginBottom: 30,\n        },\n    },\n    avatar: {\n        height: 40,\n        width: 40\n    },\n\n    messageSended: {\n        alignSelf: \"flex-end\",\n        paddingLeft: 22,\n        flexDirection: \"row-reverse\",\n        '& $messageItem': {\n            background: \"#3d4977\",\n            color: \"#fff\",\n            borderBottomRightRadius: 0\n        },\n        '& $avatar': {\n            marginLeft: 10\n        },\n        '& $viewedIcon': {\n            right: 55\n        },\n        '& $actionBtn': {\n            left: 0\n        },\n        '& $date': {\n            right: 50\n        }\n    },\n\n    messageRecieved: {\n        paddingRight: 22,\n        '& $messageItem': {\n            background: \"#efefef\",\n            borderBottomLeftRadius: 0\n        },\n        '& $avatar': {\n            marginRight: 10\n        },\n        '& $viewedIcon': {\n            left: 55,\n            filter: \"invert(0.5)\"\n        },\n        '& $actionBtn': {\n            right: 0\n        },\n        '& $date': {\n            left: 50\n        }\n    },\n\n    messageInactive: {\n        '& $messageItem': {\n            background: \"#eee\",\n            color: \"grey\",\n            fontSize: \"12px\"\n        },\n        '& $viewedIcon': {\n            display: \"none\"\n        }\n    },\n\n    messageItem: {\n        fontSize: \"0.9rem\",\n        padding: \"9px 15px\",\n        borderRadius: \"10px\",\n    },\n    viewedIcon: {\n        position: \"absolute\",\n        bottom: \"2px\",\n        height: \"12px\",\n    },\n    messageIcon: {\n        maxWidth: 17,\n        maxHeight: 17,\n        opacity: \"0.5\"\n    },\n    actionBtn: {\n        cursor: \"pointer\",\n        width: 20,\n        height: 20,\n        position: \"absolute\",\n        background: \"transparent\",\n        padding: 2,\n        boxSizing: \"border-box\",\n        border: \"none\",\n        display: \"flex\",\n        alignItems: \"center\",\n        '&:hover $messageIcon': {\n            opacity: 1\n        },\n    },\n\n    delete: {\n        top: 0\n    },\n    restore: {\n        top: 0,\n        bottom: 0,\n        margin: \"auto 0\"\n    },\n    spam: {\n        top: 20\n    },\n\n    date: {\n        position: \"absolute\",\n        bottom: \"-20px\",\n        fontSize: 11,\n        color: theme.palette.grey[400],\n        letterSpacing: \"-0.4px\",\n        whiteSpace: \"nowrap\",\n        [theme.breakpoints.up(480)]: {\n            fontSize: 12,\n        },\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})","import React, {FC} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport RM from \"../../../RouterManager\";\nimport Markdown from 'markdown-to-jsx';\nimport classNames from 'classnames';\nimport {Avatar, Tooltip, Typography, WithStyles} from \"@material-ui/core\";\nimport {DeleteOutlineOutlined, RestoreOutlined, ErrorOutlineOutlined} from '@material-ui/icons';\nimport readIcon from \"../../../assets/images/read.svg\";\nimport unreadIcon from \"../../../assets/images/unread.svg\";\nimport {MessagesType, ProfileType} from \"../../../redux/reducers/types\";\nimport userPlaceholder from \"../../../assets/images/user-placeholder.png\";\nimport withMessageStyles from './messageStyles'\n\ntype PropsType = {\n    message: MessagesType\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>\n    selectedFriend: ProfileType | null\n    currentUserInfo: ProfileType,\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\nconst Message: FC<PropsType & WithStyles> = ({message, deleteMessage, spamMessage, restoreMessage, deletedMessages, spamedMessages, selectedFriend, currentUserInfo, classes}) => {\n    const {addedAt, body, id, senderId, viewed} = message;\n    const messageDeleted = deletedMessages.includes(id);\n    const messageSpamed = spamedMessages.includes(id);\n    const messageInactive = messageDeleted || messageSpamed;\n    const isOwnerMessage = senderId === currentUserInfo.userId;\n\n    const getAvatar = () => {\n        if (!isOwnerMessage && selectedFriend) {\n            return selectedFriend.photos.small || userPlaceholder;\n        } else if (isOwnerMessage) {\n            return currentUserInfo.photos.small || userPlaceholder;\n        } else {\n            return userPlaceholder\n        }\n    };\n\n    const getDate = (date: string) => {\n        const formattedDate = new Date(date).toLocaleTimeString();\n        return formattedDate.split(\":\").slice(0,-1).join(':');\n    };\n\n    const date = getDate(addedAt);\n    const inactiveText = messageDeleted ? 'Message was deleted' : 'Message added to spam';\n\n    return (\n        <div className={classNames(\n            classes.message,\n            isOwnerMessage ? classes.messageSended : classes.messageRecieved,\n            messageInactive ? classes.messageInactive : ''\n        )}>\n            <Avatar component={NavLink} to={RM.profile.getPath(senderId)} src={getAvatar()} alt='avatar' sizes=\"40\" className={classes.avatar}/>\n            <Typography variant=\"body2\" className={classes.messageItem} component=\"div\">\n                {messageInactive ? inactiveText : <Markdown>{body}</Markdown>}\n            </Typography>\n            <img src={viewed ? readIcon : unreadIcon} alt=\"\" className={classes.viewedIcon}/>\n\n            <div className={classes.date}>\n                {date}\n            </div>\n            {!messageInactive &&\n            <>\n                <button className={classNames(classes.actionBtn, classes.delete)} onClick={() => deleteMessage(id)}>\n                    <Tooltip title=\"Delete\" aria-label=\"Delete\">\n                        <DeleteOutlineOutlined color=\"primary\" className={classes.messageIcon}/>\n                    </Tooltip>\n                </button>\n                {!isOwnerMessage &&\n                <button className={classNames(classes.actionBtn, classes.spam)} onClick={() => spamMessage(id)}>\n                    <Tooltip title=\"Spam\" aria-label=\"Spam\">\n                        <ErrorOutlineOutlined color=\"primary\" className={classes.messageIcon}/>\n                    </Tooltip>\n                </button>\n                }\n            </>\n            }\n            {messageInactive &&\n            <button className={classNames(classes.actionBtn, classes.restore)} onClick={() => restoreMessage(id)}>\n                <Tooltip title=\"Restore\" aria-label=\"Restore\">\n                    <RestoreOutlined color=\"primary\" className={classes.messageIcon}/>\n                </Tooltip>\n            </button>\n            }\n        </div>\n    )\n};\n\nexport default withMessageStyles(Message);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    form: {\n        display: \"flex\",\n        backgroundColor: \"#f3f5f7\",\n        padding: 10,\n        [theme.breakpoints.up(769)]: {\n            padding: 30,\n        },\n    },\n    root: {\n        flexGrow: 1,\n        marginBottom: 0\n    },\n    textarea: {\n        borderRadius: 0,\n        backgroundColor: 'white',\n        [theme.breakpoints.down(769)]: {\n            padding: '10px 14px'\n        },\n    },\n    button: {\n        height: \"100%\",\n        borderRadius: 0\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})","import React, {FC} from \"react\";\nimport {Field, reduxForm, InjectedFormProps} from \"redux-form\";\nimport {RenderField} from \"../../Forms/components/FormControl\";\nimport {WithStyles, Button} from \"@material-ui/core\";\nimport withMessageFormStyles from \"./messageFormStyles\";\nimport {SendIcon} from \"../../Icons/MeterialIcons\";\n\ntype FormDataType = {\n    message: string\n};\n\nconst MessageForm: FC<InjectedFormProps<FormDataType> & WithStyles> = ({handleSubmit, submitting, classes}) => {\n    return (\n        <form className={classes.form} onSubmit={handleSubmit}>\n            <Field\n                name=\"message\"\n                type=\"textarea\"\n                component={RenderField}\n                placeholder=\"Type message...\"\n                required={true}\n                classes={{\n                    root: classes.root,\n                }}\n                InputProps={{\n                    className: classes.textarea\n                }}\n                variant=\"outlined\"\n                multiline\n                rowsMax=\"2\"\n            />\n\n            <Button type=\"submit\" disabled={submitting} className={classes.button} color=\"primary\" variant=\"contained\">\n                <SendIcon/>\n            </Button>\n        </form>\n    )\n};\n\nconst MessageReduxForm = reduxForm<FormDataType>({\n    form: 'message'\n})(withMessageFormStyles(MessageForm));\n\nexport default MessageReduxForm;\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    head: {\n        display: \"flex\",\n        alignItems: \"center\",\n        fontSize: \"12px\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        padding: '5px 30px 5px 47px',\n        zIndex: 2,\n        backgroundColor: theme.palette.common.white,\n        [theme.breakpoints.up(769)]: {\n            padding: \"11px 30px\",\n        },\n        \"&::after\": {\n            position: \"absolute\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            content: \"''\",\n            height: \"1px\",\n            boxShadow: \"0 2px 4px 0 rgba(0, 0, 0, 0.2)\"\n        }\n    },\n    headInfo: {\n        marginLeft: 15,\n        flexGrow: 1\n    },\n    headLink: {\n        color: theme.palette.text.primary,\n        '&:hover': {\n            color: theme.palette.primary.main\n        }\n    },\n    headDate: {\n        color: theme.palette.grey[400],\n        [theme.breakpoints.down(480)]: {\n            fontSize: 11\n        },\n    },\n    back: {\n        position: 'absolute',\n        left: 0,\n        [theme.breakpoints.up(769)]: {\n            display: 'none'\n        },\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {Avatar, Hidden, IconButton, Link, Typography, WithStyles} from \"@material-ui/core\";\nimport userPlaceholder from \"../../../assets/images/user-placeholder.png\";\nimport {NavLink} from \"react-router-dom\";\nimport RM from \"../../../RouterManager\";\nimport {ProfileType} from \"../../../redux/reducers/types\";\nimport {Skeleton} from \"@material-ui/lab\";\nimport withChatHeaderStyles from \"./chatHeaderStyles\";\nimport {KeyboardBackspaceIcon} from \"../../Icons/MeterialIcons\";\n\ntype PropsType = {\n    lastUserActivityDate: string | null\n    selectedFriend: ProfileType,\n    messagesLoading: boolean\n}\n\nconst ChatHeader: FC<PropsType  & WithStyles> = ({classes, lastUserActivityDate, selectedFriend, messagesLoading}) => {\n    return (\n        <div className={classes.head}>\n            <Hidden mdUp>\n                <IconButton\n                    color=\"primary\"\n                    aria-label=\"Back\"\n                    edge=\"end\"\n                    component={NavLink}\n                    className={classes.back}\n                    to={RM.dialogs.getPath(null)}\n                >\n                    <KeyboardBackspaceIcon/>\n                </IconButton>\n            </Hidden>\n            {\n                messagesLoading ?\n                    <Skeleton animation=\"wave\" variant=\"circle\" height={40} width={40}/> :\n                    <Avatar\n                        src={selectedFriend.photos.small || userPlaceholder}\n                        component={NavLink}\n                        to={RM.profile.getPath(selectedFriend.userId)}\n                        alt='avatar'\n                        sizes=\"40\"\n                    />\n            }\n\n            <div className={classes.headInfo}>\n                {messagesLoading ?\n                    <>\n                        <Skeleton animation=\"wave\" width=\"80%\" className={\"MuiTypography-subtitle1\"}/>\n                        <Skeleton animation=\"wave\" width=\"50%\"  height={13} className={\"MuiTypography-body2\"}/>\n                    </>\n                    :\n                    <>\n                        <Link component={NavLink} to={RM.profile.getPath(selectedFriend.userId)} underline=\"none\"\n                              className={classes.headLink}>\n                            <Typography variant=\"subtitle1\" component=\"h6\">{selectedFriend.fullName}</Typography>\n                        </Link>\n                        {lastUserActivityDate &&\n                        <div className={classes.headDate}>\n                            Was here: {new Date(lastUserActivityDate).toLocaleString()}\n                        </div>\n                        }\n                    </>\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default withChatHeaderStyles(ChatHeader);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    chat: {\n        position: \"relative\",\n        paddingTop: \"68px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\"\n    },\n\n    chatWrapper: {\n        position: \"relative\",\n\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"flex-start\",\n        flexGrow: 1,\n        overflowY: \"auto\",\n        padding: \"0 10px 20px\"\n    },\n    date: {\n        color: theme.palette.grey[400],\n        margin: \"5px auto\",\n        [theme.breakpoints.up('sm')]: {\n            margin: \"15px auto\",\n        },\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {useEffect, FC, useState, Fragment} from 'react';\nimport Message from \"./../Message/Message\";\nimport MessageForm from \"./../Message/MessageForm\";\nimport {MessagesType, ProfileType} from \"../../../redux/reducers/types\";\nimport Preloader from \"../../Preloader/Preloader\";\nimport ChatHeader from \"./ChatHeader\";\nimport {WithStyles} from \"@material-ui/core\";\nimport withMessagesChatStyles from \"./messagesChatStyles\";\n\ntype PropsType = {\n    messages: Array<MessagesType>\n    lastUserActivityDate: string | null\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>\n    friendId: number,\n    selectedFriend: ProfileType | null\n    currentUserInfo: ProfileType,\n    messagesLoading: boolean,\n    sendMessage: (userId: number, message: string) => void\n    getMessages: (userId: number) => void\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\ntype FilteredMessagesType = {\n    date: string,\n    messages: Array<MessagesType>\n};\n\nconst MessagesChat: FC<PropsType & WithStyles> = ({\n                                                      classes,\n                                                      friendId,\n                                                      messages,\n                                                      deleteMessage,\n                                                      spamMessage,\n                                                      lastUserActivityDate,\n                                                      restoreMessage,\n                                                      getMessages,\n                                                      sendMessage,\n                                                      deletedMessages,\n                                                      spamedMessages,\n                                                      selectedFriend,\n                                                      currentUserInfo,\n                                                      messagesLoading\n                                                  }) => {\n    const [filteredMessages, setFilteredMessages] = useState<[] | Array<FilteredMessagesType>>([]);\n    const filterByDate = () => {\n        let newArr: any = {};\n        messages.map((message: MessagesType) => {\n            const date = new Date(message.addedAt).toLocaleDateString();\n            if (!newArr[date]) {\n                newArr[date] = [message];\n            } else {\n                newArr[date] = [...newArr[date], message];\n            }\n        });\n        let ordered: FilteredMessagesType[] = [];\n        Object.entries(newArr).map((item: Array<any>) => {\n            ordered = [\n                ...ordered,\n                {\n                    date: item[0],\n                    messages: item[1],\n                }\n            ];\n        });\n        setFilteredMessages(ordered);\n    };\n\n    const updateMessages = () => {\n        if (friendId !== undefined) {\n            getMessages(friendId);\n        }\n    };\n\n    useEffect(() => {\n        if (friendId) {\n            updateMessages();\n        }\n    }, [friendId]);\n\n    useEffect(() => {\n        filterByDate();\n    }, [messages]);\n\n    useEffect(() => {\n        if (!messagesLoading) {\n            scrollChatToBottom();\n        }\n    }, [messagesLoading, filteredMessages]);\n\n    const scrollChatToBottom = () => {\n        const wrapper = document.getElementById(\"wrapper\");\n        if (wrapper) {\n            wrapper.scroll(0, wrapper.scrollHeight - wrapper.clientHeight);\n        }\n    };\n\n    const onAddMessage = ({message}: { message: string }) => {\n        sendMessage(friendId, message);\n    };\n\n    return (\n        <>\n            <div className={classes.chat}>\n                {selectedFriend &&\n                <ChatHeader lastUserActivityDate={lastUserActivityDate} selectedFriend={selectedFriend}\n                            messagesLoading={messagesLoading}/>\n                }\n                <div className={classes.chatWrapper} id=\"wrapper\">\n                    {messagesLoading ?\n                        <Preloader showPreloader={true}/> :\n                        (filteredMessages as FilteredMessagesType[]).map(({date, messages}) =>\n                            <Fragment key={date}>\n                                <div className={classes.date}>\n                                    {date}\n                                </div>\n                                {messages.map((message) =>\n                                    <Message\n                                        key={message.id}\n                                        message={message}\n                                        deleteMessage={deleteMessage}\n                                        spamMessage={spamMessage}\n                                        restoreMessage={restoreMessage}\n                                        deletedMessages={deletedMessages}\n                                        spamedMessages={spamedMessages}\n                                        selectedFriend={selectedFriend}\n                                        currentUserInfo={currentUserInfo}\n                                    />\n                                )}\n                            </Fragment>\n                        )\n                    }\n                </div>\n                <MessageForm onSubmit={onAddMessage}/>\n            </div>\n        </>\n    )\n};\n\nexport default withMessagesChatStyles(MessagesChat);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport chatPlaceholder from \"../../../assets/images/chat-bg.svg\";\n\nconst styles = createStyles((theme: Theme) => ({\n    empty: {\n        width: '100%',\n        height: '100%',\n        padding: 30,\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    emptyImg: {\n        background: `url(${chatPlaceholder}) no-repeat center` ,\n        backgroundSize: 'contain',\n        flexGrow: 1\n    },\n    emptyText: {\n        margin: '30px 0',\n        textAlign: 'center'\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {Hidden, Typography, WithStyles} from \"@material-ui/core\";\nimport withEmptyChatStyles from \"./emptyChatStyles\";\n\nconst EmptyChat:FC<WithStyles> = ({classes}) => {\n    return (\n        <div className={classes.empty}>\n            <div className={classes.emptyImg}/>\n            <Hidden mdDown>\n                <div className={classes.emptyText}>\n                    <Typography variant=\"h6\">\n                        Select conversation to display\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        To start a new conversation just click the message button from a person profile\n                    </Typography>\n                </div>\n            </Hidden>\n        </div>\n    )\n};\nexport default withEmptyChatStyles(EmptyChat);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        padding: '20px 0',\n        display: 'flex',\n        alignItems: 'center',\n        [theme.breakpoints.up('md')]: {\n            padding: '20px 0',\n        }\n    },\n    paper: {\n        width: '100%',\n        height: 'calc(100vh - 130px)',\n        display: 'flex',\n        background: '#ffffff',\n        borderRadius: 0,\n        position: 'relative'\n    },\n    list: {\n        borderRight: '1px solid #eeeeee',\n        backgroundColor: theme.palette.background.paper,\n        overflow: 'auto',\n        maxHeight: '100%',\n        padding: 0,\n        [theme.breakpoints.down(769)]: {\n            background: 'rgba(255, 255, 255, 0.8)',\n            position: 'absolute',\n            left: 0,\n            width: '100%',\n            top: 0,\n            bottom: 0,\n            zIndex: 2\n        },\n        [theme.breakpoints.up(769)]: {\n            width: 250,\n            minWidth: 250,\n        },\n        [theme.breakpoints.up('md')]: {\n            width: 300,\n            minWidth: 300,\n        },\n    },\n    hiddenList: {\n        [theme.breakpoints.down(769)]: {\n            left: 'calc(-100% - 30px)',\n        },\n    },\n    content: {\n        flexGrow: 1,\n        position: 'relative',\n\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport Dialog from \"./Dialogs/Dialog\";\nimport MessagesChat from \"./Chat/MessagesChat\";\nimport {DialogsType, MessagesType, ProfileType} from \"../../redux/reducers/types\";\nimport {Paper, List, WithStyles} from \"@material-ui/core\";\nimport EmptyChat from \"./Chat/EmptyChat\";\nimport classNames from \"classnames\";\nimport withMessagesStyles from \"./messagesStyles\";\n\ntype PropsType = {\n    dialogs: Array<DialogsType>\n    messages: Array<MessagesType>\n    lastUserActivityDate: string | null\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>\n    selectedFriend: ProfileType | null\n    currentUserInfo: ProfileType | null,\n    friendId: number,\n    messagesLoading: boolean,\n    sendMessage: (userId: number, message: string) => void\n    getMessages: (userId: number) => void\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\nconst Messages: FC<PropsType & WithStyles> = ({\n                                                  classes,\n                                                  messages,\n                                                  deletedMessages,\n                                                  dialogs,\n                                                  sendMessage,\n                                                  getMessages,\n                                                  deleteMessage,\n                                                  spamMessage,\n                                                  lastUserActivityDate,\n                                                  restoreMessage,\n                                                  spamedMessages,\n                                                  selectedFriend,\n                                                  currentUserInfo,\n                                                  friendId,\n                                                  messagesLoading\n                                              }) => {\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper} elevation={3}>\n                <List className={classNames(classes.list, {[classes.hiddenList]: friendId})} component=\"div\">\n                    {dialogs.map(user =>\n                        <Dialog\n                            key={user.id}\n                            user={user}\n                        />)\n                    }\n                </List>\n                <div className={classes.content}>\n                    {currentUserInfo && friendId ?\n                        <MessagesChat\n                            messagesLoading={messagesLoading}\n                            deletedMessages={deletedMessages}\n                            spamedMessages={spamedMessages}\n                            messages={messages}\n                            friendId={friendId}\n                            sendMessage={sendMessage}\n                            getMessages={getMessages}\n                            deleteMessage={deleteMessage}\n                            spamMessage={spamMessage}\n                            lastUserActivityDate={lastUserActivityDate}\n                            restoreMessage={restoreMessage}\n                            selectedFriend={selectedFriend}\n                            currentUserInfo={currentUserInfo}\n                        /> :\n                        <EmptyChat/>\n                    }\n                </div>\n            </Paper>\n        </div>\n    )\n};\n\nexport default withMessagesStyles(Messages);\n","import React, {FC, useEffect} from \"react\";\nimport {\n    sendMessage,\n    getDialogs,\n    getMessages,\n    deleteMessage,\n    spamMessage,\n    restoreMessage,\n} from \"../../redux/reducers/dialogs-reducer\";\nimport {\n    getDeletedMessages,\n    getDialogsList,\n    getLastUserActivityDate,\n    getMessagesList, getSelectedFriend,\n    getSpamedMessages,\n    getMessagesLoading\n} from \"../../redux/reducers/dialogs-selectors\";\nimport {getCurrentUserInfo} from \"../../redux/reducers/auth-selectors\";\n\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from '../Redirects/AuthRedirect'\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {DialogsType, MessagesType, ProfileType} from \"../../redux/reducers/types\";\nimport Messages from \"./Messages\";\nimport {useParams} from \"react-router-dom\";\n\ntype MapStatePropsType = {\n    dialogs: Array<DialogsType>\n    messages: Array<MessagesType>\n    lastUserActivityDate: string | null\n    deletedMessages: Array<string>\n    spamedMessages: Array<string>,\n    selectedFriend: ProfileType | null,\n    currentUserInfo: ProfileType | null,\n    messagesLoading: boolean\n}\n\ntype MapDispatchPropsType = {\n    sendMessage: (userId: number, message: string) => void\n    getDialogs: () => void\n    getMessages: (userId: number) => void\n    deleteMessage: (messageId: string) => void\n    spamMessage: (messageId: string) => void\n    restoreMessage: (messageId: string) => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\n\nconst MessagesContainer:FC<PropsType> = ({getDialogs, ...props}) => {\n    let { id } = useParams();\n\n    useEffect(() => {\n        getDialogs()\n    }, []);\n\n    return <Messages {...props} friendId={Number(id)}/>\n};\n\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        messages: getMessagesList(state),\n        dialogs: getDialogsList(state),\n        lastUserActivityDate: getLastUserActivityDate(state),\n        deletedMessages: getDeletedMessages(state),\n        spamedMessages: getSpamedMessages(state),\n        selectedFriend: getSelectedFriend(state),\n        currentUserInfo: getCurrentUserInfo(state),\n        messagesLoading: getMessagesLoading(state)\n    }\n};\n\nexport default compose(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n        sendMessage,\n        getDialogs,\n        getMessages,\n        deleteMessage,\n        spamMessage,\n        restoreMessage\n    }),\n    withAuthRedirect\n)(MessagesContainer) as FC;\n"],"sourceRoot":""}