{"version":3,"sources":["components/Forms/components/FormControl.tsx","utils/validate.ts","components/Redirects/AuthRedirect.tsx","redux/reducers/users-selectors.ts","components/Buttons/followMessageStyles.ts","components/Buttons/FollowMessageBtns.tsx","components/Users/User/userStyles.tsx","components/Users/User/User.tsx","components/Users/Pagination/paginationStyles.ts","components/Users/Pagination/Pagination.tsx","components/Users/Search/searchFormStyles.ts","components/Users/Search/SearchForm.tsx","components/Users/Search/searchStyles.ts","components/Users/Search/Search.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["inputTypes","useStyles","makeStyles","theme","textInput","marginBottom","fontSize","position","bottom","transform","breakpoints","up","RenderField","input","label","type","meta","touched","error","rest","classes","includes","Boolean","helperText","fullWidth","className","control","checked","value","onChange","required","undefined","minLength","length","email","test","mapStateToProps","state","isAuth","getIsAuth","withAuthRedirect","WrappedComponent","RedirectComponent","this","props","to","RM","login","path","Component","connect","getUsers","usersReducer","users","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsLoading","isLoading","getFollowInProgress","followInProgress","getSearchQuery","searchQuery","styles","createStyles","btnFollow","background","palette","success","main","dark","secondary","withStyles","withTheme","unfollow","follow","startChat","withFollowMessageStyles","userId","followed","updateProfileFollowed","customClasses","history","useHistory","labelClasses","textClasses","text","btnClasses","btn","Skeleton","animation","height","Button","disabled","variant","color","root","classNames","startIcon","onClick","common","white","paddingTop","borderRadius","textAlign","display","flexDirection","avatarImg","width","margin","content","padding","flexGrow","buttons","justifyContent","maxWidth","btnLabel","marginTop","borderTop","grey","bottomLink","light","autoMargin","noHover","pointerEvents","withUserStyles","user","id","photos","name","status","userAvatar","small","userPlaceholder","Card","Link","component","NavLink","profile","getPath","underline","Avatar","src","alt","CardContent","Typography","gutterBottom","noWrap","CardActions","FollowMessageBtns","CardActionArea","compose","withWidth","withPaginationStyles","totalPages","onSetCurrentPage","size","count","page","alignItems","backgroundColor","minHeight","marginLeft","spacing","flex","primary","iconButton","marginRight","minLength3","SearchReduxForm","reduxForm","form","withSearchFormStyles","handleSubmit","submitting","Paper","onSubmit","IconButton","aria-label","Field","autoComplete","placeholder","validate","searchTxt","search","withSearchStyles","onChangeSearchText","searchRequest","onResetSearch","Chip","onDelete","Users","style","Grid","container","map","item","xs","sm","md","lg","key","Number","requestUsers","withRouter","useState","setSearchRequest","Math","ceil","location","useLocation","useEffect","getQueryParams","String","request","queryString","parse","stringifyParams","stringify","e","replace","searchText"],"mappings":"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","file":"static/js/UsersContainer.11cb905d.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\nimport {TextField, TextFieldProps, makeStyles, Checkbox, FormControlLabel, Switch} from \"@material-ui/core\";\n\nconst inputTypes = [\n    'text',\n    'email',\n    'search',\n    'password',\n    'textarea'\n];\n\nconst useStyles = makeStyles(theme => ({\n    textInput: {\n        marginBottom: 25,\n        '& .MuiFormHelperText-root': {\n            fontSize: 10,\n            position: 'absolute',\n            bottom: 0,\n            transform: 'translateY(100%)',\n            [theme.breakpoints.up('sm')]: {\n                fontSize: 12,\n            }\n        }\n    }\n}));\n\ntype OwnPropsType = {\n    label?: string,\n    type: string,\n    rest?: any,\n};\n\ntype PropsType = WrappedFieldProps & OwnPropsType & TextFieldProps;\n\nexport const RenderField: FC<PropsType> = ({input, label, type, meta: {touched, error}, ...rest}) => {\n    const classes = useStyles();\n    return (\n        <>\n            {inputTypes.includes(type) &&\n            <TextField\n                error={touched && Boolean(error)}\n                helperText={touched && error ? error : ''}\n                label={label}\n                type={type}\n                fullWidth={true}\n                className={classes.textInput}\n                {...input}\n                {...rest}\n            />\n            }\n            {type === 'checkbox' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Checkbox\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n            {type === 'switch' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Switch\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n        </>\n    )\n};\n","type ValidatorType = (value: string) =>  string | undefined\r\n\r\nexport const required: ValidatorType = (value) => (value ? undefined : 'Required');\r\n\r\nexport const minLength = (length: number): ValidatorType => (value) => {\r\n    if(value.length < length) {\r\n        return `Minimum length ${length} symbols`\r\n    }\r\n    return undefined\r\n};\r\n\r\nexport const email : ValidatorType = (value) =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined;","import React, {Component, ComponentType, ReactNode} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getIsAuth} from \"../../redux/reducers/auth-selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport RM from \"../../RouterManager\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: getIsAuth(state)\n    }\n};\n\nexport const withAuthRedirect = (WrappedComponent: ComponentType<ReactNode>) => {\n    class RedirectComponent extends Component<MapStatePropsType> {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={RM.login.path}/>;\n            return <WrappedComponent {...this.props}/>\n        }\n    }\n\n    return connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToProps)(RedirectComponent);\n};","// import { createSelector } from 'reselect'\nimport {AppStateType} from \"../redux-store\";\n\nexport const getUsers = (state: AppStateType) => {\n    return state.usersReducer.users\n};\n\n\n//todo example reselect\n\n// export const getUsersSelector = createSelector(\n//     getUsers,\n//     (users) => {\n//         return  users.filter(u => true)\n//     }\n// );\n//\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersReducer.pageSize\n};\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersReducer.totalUsersCount\n};\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersReducer.currentPage\n};\n\nexport const getIsLoading = (state: AppStateType) => {\n    return state.usersReducer.isLoading\n};\n\nexport const getFollowInProgress = (state: AppStateType) => {\n    return state.usersReducer.followInProgress\n};\n\nexport const getSearchQuery = (state: AppStateType) => {\n    return state.usersReducer.searchQuery\n};","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    btnFollow: {\n        background: theme.palette.success.main,\n        '&:hover': {\n            background: theme.palette.success.dark,\n        },\n        '&.active': {\n            background: theme.palette.secondary.main,\n        }\n    },\n}));\n\nexport default withStyles(styles, {withTheme: true});","import React, {FC} from 'react';\nimport {Button, WithStyles} from \"@material-ui/core\";\nimport classNames from \"classnames\";\n\nimport {useHistory} from \"react-router-dom\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getFollowInProgress} from \"../../redux/reducers/users-selectors\";\nimport {connect} from \"react-redux\";\nimport {follow, unfollow} from \"../../redux/reducers/users-reducer\";\nimport {startChat} from \"../../redux/reducers/dialogs-reducer\";\nimport {Skeleton} from \"@material-ui/lab\";\nimport withFollowMessageStyles from \"./followMessageStyles\";\nimport {PersonAddDisabledRoundedIcon, PersonAddRoundedIcon, EmailRoundedIcon} from \"../Icons/MeterialIcons\";\n\ntype OwnPropsType = {\n    userId: number,\n    isLoading: boolean,\n    followed: boolean,\n    updateProfileFollowed?: boolean,\n    customClasses?: {\n        btn?: string,\n        label?: string,\n        text?: string\n    }\n};\ntype MapStatePropsType = {followInProgress: Array<number>}\ntype MapDispatchPropsType = {\n    startChat: (userId: number, history: any) => void\n    follow: (id: number, updateProfileFollow: boolean) => void\n    unfollow: (id: number, updateProfileFollow: boolean) => void\n}\ntype PropsType = OwnPropsType & MapStatePropsType & MapDispatchPropsType;\n\nconst FollowMessageBtns: FC<PropsType & WithStyles> = ({classes, userId, followed, followInProgress, unfollow, follow, startChat, isLoading, updateProfileFollowed = false, customClasses}) => {\n    let history = useHistory();\n    const labelClasses = customClasses && customClasses.label ? customClasses.label : undefined;\n    const textClasses = customClasses && customClasses.text ? customClasses.text : undefined;\n    const btnClasses = customClasses && customClasses.btn ? customClasses.btn : undefined;\n\n    if (isLoading) {\n        return (\n            <>\n                <Skeleton animation=\"wave\" height={36} className={btnClasses}/>\n                <Skeleton animation=\"wave\" height={36} className={btnClasses}/>\n            </>\n        )\n    }\n    return (\n        <>\n            <Button\n                disabled={followInProgress.includes(userId)}\n                variant=\"contained\"\n                color=\"primary\"\n                classes={{\n                    label: labelClasses,\n                    root: classNames(classes.btnFollow, {'active': followed}, btnClasses),\n                    text: textClasses,\n                }}\n                startIcon={followed ? <PersonAddDisabledRoundedIcon/> : <PersonAddRoundedIcon/>}\n                onClick={followed ?\n                    () => unfollow(userId, updateProfileFollowed) :\n                    () => follow(userId, updateProfileFollowed)}>\n                <span className={textClasses}>\n                     {followed ? \"Unfollow\" : \"Follow\"}\n                </span>\n            </Button>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                classes={{\n                    label: labelClasses,\n                    root: btnClasses,\n                    text: textClasses,\n                }}\n                startIcon={<EmailRoundedIcon/>}\n                disabled={followInProgress.includes(userId)}\n                onClick={() => startChat(userId, history)}>\n                    <span className={textClasses}>\n                        Message\n                    </span>\n            </Button>\n        </>\n    )\n};\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        followInProgress: getFollowInProgress(state),\n    }\n};\n\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\n    unfollow,\n    follow,\n    startChat,\n})(withFollowMessageStyles(FollowMessageBtns));\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    root: {\n        background: theme.palette.common.white,\n        paddingTop: 20,\n        borderRadius: 0,\n        textAlign: 'center',\n        display: 'flex',\n        height: '100%',\n        flexDirection: 'column'\n    },\n    avatarImg: {\n        height: 100,\n        width: 100,\n        margin: '0 auto'\n    },\n    content: {\n        padding: '15px 20px',\n        flexGrow: 1\n    },\n\n    buttons: {\n        padding: '0 20px 25px',\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '100%',\n        maxWidth: 320,\n        margin: '0 auto'\n    },\n    btnLabel: {\n        fontSize: 14,\n    },\n    bottom: {\n        marginTop: 'auto',\n        borderTop: '1px solid ' + theme.palette.grey[200],\n    },\n    btn: {\n        width: '48%',\n        maxWidth: '48%'\n    },\n    bottomLink: {\n        display: 'block',\n        width: '100%',\n        padding: '1rem 0',\n        color: theme.palette.secondary.light\n    },\n    autoMargin: {\n        margin: '0 auto'\n    },\n    noHover: {\n        pointerEvents: 'none'\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport userPlaceholder from '../../../assets/images/user-placeholder.png';\nimport {NavLink} from \"react-router-dom\";\nimport {UserType} from \"../../../redux/reducers/types\";\nimport classNames from 'classnames';\nimport {\n    Avatar,\n    Card,\n    CardActionArea,\n    CardContent,\n    Link,\n    Typography,\n    CardActions,\n    WithStyles\n} from '@material-ui/core';\nimport RM from \"../../../RouterManager\";\nimport {Skeleton} from \"@material-ui/lab\";\nimport FollowMessageBtns from \"../../Buttons/FollowMessageBtns\";\nimport withUserStyles from \"./userStyles\";\n\ntype PropsType = {\n    user: UserType,\n    isLoading: boolean\n};\n\nconst User: FC<PropsType & WithStyles> = ({user, isLoading, classes}) => {\n    const {id, photos, name, status, followed} = user;\n    const userAvatar = photos.small !== null ? photos.small : userPlaceholder;\n    return (\n        <Card className={classes.root}>\n            <Link component={NavLink} to={RM.profile.getPath(id)} underline=\"none\">\n                {\n                    isLoading ?\n                        <Skeleton animation=\"wave\" variant=\"circle\" width={100} height={100}\n                                  className={classes.avatarImg}/> :\n                        <Avatar src={userAvatar} alt={name ? name : 'avatar'} className={classes.avatarImg}\n                                component=\"span\"/>\n                }\n            </Link>\n            <CardContent className={classes.content}>\n                {isLoading ? (\n                    <>\n                        <Skeleton animation=\"wave\" width=\"85%\" className={classNames(classes.autoMargin, \"MuiTypography-h5\")}/>\n                        <Skeleton animation=\"wave\" width=\"60%\" className={classNames(classes.autoMargin, \"MuiTypography-body2\")}/>\n                    </>\n                    )\n                   : (\n                        <>\n                            <Typography gutterBottom variant=\"h5\" component=\"div\" noWrap>\n                                {name}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" noWrap>\n                                {status}\n                            </Typography>\n                        </>\n                    )\n                }\n            </CardContent>\n\n            <CardActions className={classes.buttons}>\n                <FollowMessageBtns\n                    isLoading={isLoading}\n                    followed={followed}\n                    userId={id}\n                    customClasses={{\n                        label: classes.btnLabel,\n                        btn: classes.btn\n                    }}\n                />\n            </CardActions>\n            <CardActionArea className={classNames(classes.bottom, {[classes.noHover]: isLoading})}>\n                {isLoading ? (\n                        <div className={classes.bottomLink}>\n                            <Skeleton animation=\"wave\" width='50%' className={classNames(classes.autoMargin, \"MuiTypography-body2\")}/>\n                        </div>\n                    )\n                    : (\n                        <Link component={NavLink} to={RM.profile.getPath(id)} className={classes.bottomLink} underline=\"none\">\n                            <Typography variant=\"body1\" component=\"span\">\n                                View Profile\n                            </Typography>\n                        </Link>\n                    )\n                }\n            </CardActionArea>\n        </Card>\n    )\n};\n\nexport default withUserStyles(User);\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    root: {\n        margin: '40px 0',\n        \"& .Mui-selected\": {\n            pointerEvents: 'none'\n        },\n        \"& .MuiPagination-ul\": {\n            justifyContent: 'center'\n        }\n    },\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {compose} from \"redux\";\nimport PaginationComponent from '@material-ui/lab/Pagination';\nimport {WithStyles, WithWidth, withWidth} from \"@material-ui/core\";\nimport withPaginationStyles from \"./paginationStyles\";\n\ntype PropsType = {\n    totalPages: number,\n    currentPage: number,\n    onSetCurrentPage: (event: React.ChangeEvent<unknown>, page: number) => void,\n}\n\nconst Pagination: FC<PropsType & WithWidth & WithStyles> = ({classes, totalPages, currentPage, onSetCurrentPage, width}) => {\n    return (\n        <PaginationComponent size={width === 'xs' ? 'small': 'medium'} count={totalPages} page={currentPage} onChange={onSetCurrentPage} color=\"primary\" className={classes.root}/>\n    )\n};\n\nexport default compose(\n    withWidth(),\n    withPaginationStyles\n)(Pagination) as FC<PropsType>;\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    root: {\n        margin: '15px 0 25px',\n        padding: '2px 20px',\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        backgroundColor: 'rgba(255, 255, 255, 0.7)',\n        position: 'relative',\n        minHeight: 80,\n        [theme.breakpoints.up('sm')]: {\n            marginBottom: 40,\n        }\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        color: theme.palette.primary.main\n    },\n    iconButton: {\n        marginRight: 10,\n        padding: 10,\n        color: theme.palette.primary.main\n    },\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {Field, reduxForm, InjectedFormProps} from \"redux-form\";\nimport {RenderField} from \"../../Forms/components/FormControl\";\nimport {minLength, required} from \"../../../utils/validate\";\nimport {IconButton, Paper, WithStyles} from '@material-ui/core';\nimport {Skeleton} from '@material-ui/lab';\nimport withSearchFormStyles from \"./searchFormStyles\";\nimport {SearchIcon} from \"../../Icons/MeterialIcons\";\n\nconst minLength3 = minLength(3);\n\ntype FormDataType = {\n    searchText: string,\n}\ntype OwnPropsType = {\n    onResetSearch: () => void,\n    isLoading: boolean\n}\ntype PropsType = InjectedFormProps<FormDataType> & OwnPropsType & WithStyles;\n\nconst SearchForm: FC<PropsType> = ({handleSubmit, submitting, isLoading, classes}) => {\n    return (\n        <Paper component=\"form\" className={classes.root} onSubmit={handleSubmit}>\n            {isLoading ?\n                <Skeleton animation=\"wave\" height={40} width='100%'/>\n                : <>\n                    <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\" disabled={submitting}>\n                        <SearchIcon/>\n                    </IconButton>\n                    <Field\n                        name=\"searchText\"\n                        type=\"search\"\n                        label=\"Search\"\n                        component={RenderField}\n                        autoComplete=\"off\"\n                        placeholder=\"Type search request...\"\n                        validate={[required, minLength3]}\n                    />\n                </>\n            }\n        </Paper>\n    )\n};\n\nconst SearchReduxForm = reduxForm<FormDataType, OwnPropsType>({\n    form: 'search'\n})(withSearchFormStyles(SearchForm));\n\nexport default SearchReduxForm;","import {withStyles, createStyles} from '@material-ui/core/styles';\n\nconst styles = createStyles(() => ({\n    searchTxt: {\n        marginLeft: 10\n    },\n    search: {\n        width: '100%'\n    },\n}));\n\nexport default withStyles(styles)\n","import React, {FC} from 'react';\nimport SearchReduxForm from \"./SearchForm\";\nimport {Typography, Chip, WithStyles} from \"@material-ui/core\";\nimport withSearchStyles from \"./searchStyles\";\n\ntype PropsType = {\n    onChangeSearchText: ({searchText}: {searchText: string}) => void\n    searchRequest: string | string[] | null | undefined,\n    onResetSearch: () => void,\n    isLoading: boolean\n}\n\nconst Search: FC<PropsType & WithStyles> = ({onChangeSearchText, searchRequest, onResetSearch, isLoading, classes}) => {\n    return (\n        <div className={classes.search}>\n            {searchRequest &&\n            <Typography variant=\"body2\">\n                Found on query:\n                <Chip label={searchRequest} onDelete={onResetSearch} color=\"secondary\" className={classes.searchTxt} />\n            </Typography>\n            }\n            <SearchReduxForm onSubmit={onChangeSearchText} onResetSearch={onResetSearch} isLoading={isLoading}/>\n        </div>\n    )\n};\n\n\nexport default withSearchStyles(Search);\n","import React, {FC} from 'react';\nimport User from \"./User/User\";\nimport Pagination from \"./Pagination/Pagination\";\nimport {UserType} from \"../../redux/reducers/types\";\nimport {Grid, Typography} from \"@material-ui/core\";\nimport Search from \"./Search/Search\";\n\ntype PropsType = {\n    users: Array<UserType>,\n    currentPage: number,\n    onSetCurrentPage: (event: React.ChangeEvent<unknown>, page: number) => void\n    onChangeSearchText: ({searchText}: { searchText: string }) => void,\n    onResetSearch: () => void,\n    isLoading: boolean,\n    searchRequest: string | null,\n    totalPages: number\n}\n\nconst Users: FC<PropsType> = ({\n                                  users,\n                                  currentPage,\n                                  onResetSearch,\n                                  onSetCurrentPage,\n                                  onChangeSearchText,\n                                  isLoading,\n                                  searchRequest,\n                                  totalPages\n                              }) => {\n\n    return (\n        <div>\n            <Typography gutterBottom variant=\"h3\" style={{paddingTop: 30, textAlign: 'center'}}>\n                Users\n            </Typography>\n            <Search onChangeSearchText={onChangeSearchText} searchRequest={searchRequest} onResetSearch={onResetSearch} isLoading={isLoading}/>\n            <Grid container spacing={3}>\n                {users.map((user: UserType) =>\n                    <Grid item xs={12} sm={6} md={4} lg={3} key={user.id}>\n                        <User\n                            user={user}\n                            isLoading={isLoading}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            {users.length > 0 &&\n            <Pagination totalPages={totalPages} currentPage={Number(currentPage)} onSetCurrentPage={onSetCurrentPage}/>\n            }\n        </div>\n    )\n};\n\nexport default Users;","import React, {FC, useEffect, useState} from 'react';\nimport {connect} from \"react-redux\";\nimport Users from \"./Users\";\nimport {\n    getCurrentPage,\n    getFollowInProgress,\n    getIsLoading,\n    getPageSize,\n    getSearchQuery,\n    getTotalUsersCount,\n    getUsers\n} from \"../../redux/reducers/users-selectors\";\nimport {requestUsers} from \"../../redux/reducers/users-reducer\";\nimport {withRouter, useLocation, useHistory} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport queryString from 'query-string';\nimport {UserType} from \"../../redux/reducers/types\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {withAuthRedirect} from '../Redirects/AuthRedirect';\n\ntype MapStatePropsType = {\n    pageSize: number\n    searchQuery: string | null\n    isLoading: boolean\n    users: Array<UserType>\n    totalUsersCount: number\n    currentPage: number\n}\n\ntype MapDispatchPropsType = {\n    requestUsers: (currentPage: number, pageSize: number, searchText: string) => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType\n\nconst UsersContainer: FC<PropsType> = ({\n                                           pageSize,\n                                           searchQuery,\n                                           isLoading,\n                                           users,\n                                           totalUsersCount,\n                                           currentPage,\n                                           requestUsers,\n                                       }) => {\n\n    const [searchRequest, setSearchRequest] = useState<any>(null);\n    const totalPages = Math.ceil(totalUsersCount / pageSize);\n    let location = useLocation();\n    let history = useHistory();\n\n    useEffect(() => {\n        const {search = '', page = 1} = getQueryParams();\n        requestUsers(Number(page), pageSize, String(search));\n    }, []);\n\n    useEffect(() => {\n        const request = queryString.parse(location.search);\n        setSearchRequest(request.search ? request.search : null)\n    }, [location]);\n\n    const getQueryParams = () => {\n        return queryString.parse(location.search);\n    };\n\n    const stringifyParams: (page?: number, search?: string | null) => string = (page, search) => {\n        return '?' + queryString.stringify({\n            search: search || undefined,\n            page: page || undefined\n        });\n    };\n\n    const onChangeSearchText = ({searchText}: { searchText: string | null }) => {\n        history.replace(stringifyParams(undefined, searchText));\n    };\n\n    const onResetSearch = () => {\n        history.replace(stringifyParams(undefined, ''));\n    };\n\n    const onSetCurrentPage = (e: React.ChangeEvent<unknown>, value: number) => {\n        history.replace(stringifyParams(value, searchQuery));\n    };\n\n    return (\n        <Users\n            onSetCurrentPage={onSetCurrentPage}\n            users={users}\n            currentPage={currentPage}\n            onChangeSearchText={onChangeSearchText}\n            onResetSearch={onResetSearch}\n            isLoading={isLoading}\n            searchRequest={searchRequest}\n            totalPages={totalPages}\n        />\n    )\n};\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isLoading: getIsLoading(state),\n        followInProgress: getFollowInProgress(state),\n        searchQuery: getSearchQuery(state),\n    }\n};\n\nexport default compose(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n        requestUsers,\n    }),\n    withRouter,\n    withAuthRedirect,\n)(UsersContainer) as FC;\n\n"],"sourceRoot":""}