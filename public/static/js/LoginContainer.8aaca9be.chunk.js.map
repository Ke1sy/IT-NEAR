{"version":3,"sources":["components/Login/loginFormStyles.ts","components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx","../node_modules/@material-ui/lab/esm/internal/svg-icons/createSvgIcon.js","components/Forms/components/FormControl.tsx","utils/validate.ts","../node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js","../node_modules/@material-ui/lab/esm/internal/svg-icons/Close.js","../node_modules/@material-ui/lab/esm/Alert/Alert.js"],"names":["styles","createStyles","theme","form","fontSize","maxWidth","margin","buttons","display","justifyContent","btn","width","padding","captcha","marginBottom","alignItems","error","marginTop","withStyles","withTheme","minLength4","minLength","LoginReduxForm","reduxForm","withLoginFormStyles","handleSubmit","pristine","submitting","reset","captchaUrl","classes","onSubmit","className","Field","component","RenderField","type","name","label","required","variant","validate","email","id","src","alt","Button","disabled","color","startIcon","onClick","Alert","severity","Login","login","Typography","gutterBottom","style","paddingTop","textAlign","connect","state","isAuth","getIsAuth","userId","getCurrentUserId","getCaptchaUrl","to","RM","profile","getPath","password","rememberMe","createSvgIcon","path","displayName","Component","React","props","ref","SvgIcon","_extends","muiName","inputTypes","useStyles","makeStyles","textInput","position","bottom","transform","breakpoints","up","input","meta","touched","rest","includes","Boolean","helperText","fullWidth","control","checked","value","onChange","undefined","length","test","d","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","ErrorOutlineIcon","info","InfoOutlinedIcon","_ref","CloseIcon","action","children","_props$closeText","closeText","icon","_props$iconMapping","iconMapping","onClose","_props$role","role","_props$severity","_props$variant","other","_objectWithoutProperties","Paper","square","elevation","clsx","root","concat","capitalize","message","IconButton","size","title","getColor","palette","darken","lighten","getBackgroundColor","typography","body2","borderRadius","shape","backgroundColor","standardSuccess","main","standardInfo","standardWarning","standardError","outlinedSuccess","border","outlinedInfo","outlinedWarning","outlinedError","filledSuccess","fontWeight","fontWeightMedium","filledInfo","filledWarning","filledError","marginRight","opacity","flexDirection","marginLeft","paddingLeft"],"mappings":"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","file":"static/js/LoginContainer.8aaca9be.chunk.js","sourcesContent":["import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    form: {\n        fontSize: \"16px\",\n        maxWidth: \"400px\",\n        margin: \"20px auto\",\n    },\n    buttons: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n    },\n    btn: {\n        width: \"48%\",\n        padding: \"14px 10px\"\n    },\n    captcha: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginBottom: \"30px\",\n        alignItems: \"center\",\n        '& > *': {\n            width: \"48%\",\n            marginBottom: 0\n        }\n    },\n    error: {\n        marginTop: 20\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\nimport {RenderField} from \"../Forms/components/FormControl\";\nimport {required, email, minLength} from \"../../utils/validate\";\nimport {LoginFormDataPropsType} from \"../../redux/reducers/types\";\nimport {Button, WithStyles} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nimport withLoginFormStyles from \"./loginFormStyles\";\nimport {CancelOutlinedIcon, InputIcon} from \"../Icons/MeterialIcons\";\n\nconst minLength4 = minLength(4);\n\ntype OwnPropsType = {\n    captchaUrl?: string | null\n}\n\ntype PropsType = InjectedFormProps<LoginFormDataPropsType> & OwnPropsType  & WithStyles;\n\nconst LoginForm: FC<PropsType> = (\n    {\n        handleSubmit,\n        pristine,\n        submitting,\n        reset,\n        error,\n        captchaUrl,\n        classes\n    }\n) => {\n    return (\n        <form onSubmit={handleSubmit} className={classes.form}>\n            <Field\n                component={RenderField}\n                type=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                required={true}\n                variant=\"outlined\"\n                validate={[required, email]}\n            />\n            <Field\n                component={RenderField}\n                type=\"password\"\n                name=\"password\"\n                label=\"Password:\"\n                required={true}\n                variant=\"outlined\"\n                validate={[required, minLength4]}\n            />\n\n            <Field\n                name=\"rememberMe\"\n                id=\"rememberMe\"\n                component={RenderField}\n                type=\"checkbox\"\n                label=\"Remember me\"\n            />\n\n            {captchaUrl &&\n            <div className={classes.captcha}>\n                <img src={captchaUrl} alt=\"\"/>\n                <Field\n                    name=\"captcha\"\n                    component={RenderField}\n                    type=\"text\"\n                    variant=\"outlined\"\n                    label=\"Captcha\"\n                    validate={[required]}\n                />\n            </div>\n            }\n            <div className={classes.buttons}>\n                <Button\n                    type=\"submit\"\n                    disabled={pristine || submitting}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.btn}\n                    startIcon={<InputIcon/>}\n                >\n                    Submit\n                </Button>\n                <Button\n                    type=\"button\"\n                    disabled={pristine || submitting}\n                    onClick={reset}\n                    variant=\"contained\"\n                    className={classes.btn}\n                    color=\"secondary\"\n                    startIcon={<CancelOutlinedIcon/>}\n                >\n                    Clear\n                </Button>\n            </div>\n\n            {error &&\n            <Alert severity=\"error\" className={classes.error}>{error}</Alert>\n            }\n        </form>\n    )\n};\n\n\nconst LoginReduxForm = reduxForm<LoginFormDataPropsType, OwnPropsType>({\n    form: 'login'\n})(withLoginFormStyles(LoginForm));\n\n\nexport default LoginReduxForm;","import React, {FC} from \"react\";\nimport LoginReduxForm from \"./LoginForm\";\nimport { LoginFormDataPropsType } from \"../../redux/reducers/types\";\nimport {Typography} from \"@material-ui/core\";\n\ntype PropsType = {\n    login: ({email, password, rememberMe, captcha}: LoginFormDataPropsType) => void\n    captchaUrl: string | null\n}\n\nconst Login: FC<PropsType> = ({captchaUrl, login}) => {\n    return (\n        <div>\n            <Typography gutterBottom variant=\"h3\" style={{paddingTop: 30, textAlign: 'center'}}>\n                Login\n            </Typography>\n            <LoginReduxForm onSubmit={login} captchaUrl={captchaUrl}/>\n        </div>\n    )\n};\n\nexport default Login;","import React, {FC} from \"react\";\nimport Login from \"./Login\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/reducers/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {getCaptchaUrl, getCurrentUserId, getIsAuth} from \"../../redux/reducers/auth-selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport { LoginFormDataPropsType } from \"../../redux/reducers/types\";\nimport RM from \"../../RouterManager\";\n\ntype MapStatePropsType = {\n    userId: number | null,\n    isAuth: boolean,\n    captchaUrl: string | null\n}\n\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType\n\nconst LoginContainer: FC<PropsType> = ({login, isAuth, userId, captchaUrl}) => {\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormDataPropsType) => {\n        login(email, password, rememberMe, captcha);\n    };\n\n    if (isAuth) {\n        return <Redirect to={RM.profile.getPath(userId)}/>\n    }\n\n    return (\n        <Login login={onSubmit} captchaUrl={captchaUrl}/>\n    )\n};\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: getIsAuth(state),\n        userId: getCurrentUserId(state),\n        captchaUrl: getCaptchaUrl(state)\n    }\n};\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {login})(LoginContainer);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nexport default function createSvgIcon(path, displayName) {\n  var Component = React.memo(React.forwardRef(function (props, ref) {\n    return React.createElement(SvgIcon, _extends({\n      ref: ref\n    }, props), path);\n  }));\n\n  if (process.env.NODE_ENV !== 'production') {\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return Component;\n}","import React, {FC} from \"react\";\nimport {WrappedFieldProps} from \"redux-form/lib/Field\";\nimport {TextField, TextFieldProps, makeStyles, Checkbox, FormControlLabel, Switch} from \"@material-ui/core\";\n\nconst inputTypes = [\n    'text',\n    'email',\n    'search',\n    'password',\n    'textarea'\n];\n\nconst useStyles = makeStyles(theme => ({\n    textInput: {\n        marginBottom: 25,\n        '& .MuiFormHelperText-root': {\n            fontSize: 10,\n            position: 'absolute',\n            bottom: 0,\n            transform: 'translateY(100%)',\n            [theme.breakpoints.up('sm')]: {\n                fontSize: 12,\n            }\n        }\n    }\n}));\n\ntype OwnPropsType = {\n    label?: string,\n    type: string,\n    rest?: any,\n};\n\ntype PropsType = WrappedFieldProps & OwnPropsType & TextFieldProps;\n\nexport const RenderField: FC<PropsType> = ({input, label, type, meta: {touched, error}, ...rest}) => {\n    const classes = useStyles();\n    return (\n        <>\n            {inputTypes.includes(type) &&\n            <TextField\n                error={touched && Boolean(error)}\n                helperText={touched && error ? error : ''}\n                label={label}\n                type={type}\n                fullWidth={true}\n                className={classes.textInput}\n                {...input}\n                {...rest}\n            />\n            }\n            {type === 'checkbox' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Checkbox\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n            {type === 'switch' &&\n            <FormControlLabel\n                className={classes.textInput}\n                control={\n                    <Switch\n                        checked={!!input.value}\n                        onChange={input.onChange}\n                    />\n                }\n                label={label}\n            />\n            }\n        </>\n    )\n};\n","type ValidatorType = (value: string) =>  string | undefined\r\n\r\nexport const required: ValidatorType = (value) => (value ? undefined : 'Required');\r\n\r\nexport const minLength = (length: number): ValidatorType => (value) => {\r\n    if(value.length < length) {\r\n        return `Minimum length ${length} symbols`\r\n    }\r\n    return undefined\r\n};\r\n\r\nexport const email : ValidatorType = (value) =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined;","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles, lighten, darken } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  var getColor = theme.palette.type === 'light' ? darken : lighten;\n  var getBackgroundColor = theme.palette.type === 'light' ? lighten : darken;\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: 'transparent',\n      display: 'flex',\n      padding: '6px 16px'\n    }),\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`. */\n    standardSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.success.main, 0.9),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`. */\n    standardInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.info.main, 0.9),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`. */\n    standardWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.warning.main, 0.9),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`. */\n    standardError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.error.main, 0.9),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`. */\n    outlinedSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.success.main),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`. */\n    outlinedInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.info.main),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`. */\n    outlinedWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.warning.main),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`. */\n    outlinedError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.error.main),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`. */\n    filledSuccess: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.success.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`. */\n    filledInfo: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.info.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`. */\n    filledWarning: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.warning.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`. */\n    filledError: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.error.main\n    },\n\n    /* Styles applied to the icon wrapper element. */\n    icon: {\n      marginRight: 12,\n      padding: '7px 0',\n      display: 'flex',\n      fontSize: 22,\n      opacity: 0.9\n    },\n\n    /* Styles applied to the message wrapper element. */\n    message: {\n      padding: '8px 0',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n\n    /* Styles applied to the action wrapper element if `action` is provided. */\n    action: {\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: 'auto',\n      paddingLeft: 16,\n      marginRight: -8\n    }\n  };\n};\nvar defaultIconMapping = {\n  success: React.createElement(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: React.createElement(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: React.createElement(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: React.createElement(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar Alert = React.forwardRef(function Alert(props, ref) {\n  var action = props.action,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      color = props.color,\n      icon = props.icon,\n      _props$iconMapping = props.iconMapping,\n      iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping,\n      onClose = props.onClose,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'alert' : _props$role,\n      _props$severity = props.severity,\n      severity = _props$severity === void 0 ? 'success' : _props$severity,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"action\", \"children\", \"classes\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"]);\n\n  return React.createElement(Paper, _extends({\n    role: role,\n    square: true,\n    elevation: 0,\n    className: clsx(classes.root, classes[\"\".concat(variant).concat(capitalize(color || severity))], className),\n    ref: ref\n  }, other), icon !== false ? React.createElement(\"div\", {\n    className: classes.icon\n  }, icon || iconMapping[severity] || defaultIconMapping[severity]) : null, React.createElement(\"div\", {\n    className: classes.message\n  }, children), action != null ? React.createElement(\"div\", {\n    className: classes.action\n  }, action) : null, action == null && onClose ? React.createElement(\"div\", {\n    className: classes.action\n  }, React.createElement(IconButton, {\n    size: \"small\",\n    \"aria-label\": closeText,\n    title: closeText,\n    color: \"inherit\",\n    onClick: onClose\n  }, _ref)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\n   */\n  color: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAlert'\n})(Alert);"],"sourceRoot":""}