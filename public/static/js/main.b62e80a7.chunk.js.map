{"version":3,"sources":["assets/images/logo.png","assets/images/user-placeholder.png","components/Profile/Dialogs/simpleDialogStyles.ts","components/Profile/Dialogs/SimpleDialogTemplate.tsx","components/Profile/Dialogs/ConfirmDialog.tsx","redux/reducers/profile-selectors.ts","redux/reducers/dialogs-selectors.ts","redux/reducers/dialogs-reducer.ts","components/Icons/MeterialIcons.ts","RouterManager.ts","redux/reducers/profile-reducer.ts","serviceWorker.js","api/api.ts","redux/sagas/saga.ts","redux/redux-store.ts","theme.js","index.tsx","utils/helpers.ts","redux/reducers/users-reducer.ts","redux/reducers/auth-reducer.ts","redux/reducers/auth-selectors.ts","redux/reducers/app-reducer.ts","components/Header/navbarStyles.ts","components/Header/Navbar.tsx","components/Header/submenuStyles.ts","components/Header/Submenu.tsx","components/Header/authBtnStyles.ts","components/Header/AuthBtn.tsx","components/Header/mobileMenuStyles.ts","components/Header/MobileMenu.tsx","components/Header/headerStyles.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/HOC/Suspense.js","redux/reducers/app-selectors.ts","components/Notifier/Notifier.js","components/Footer/Footer.tsx","appStyles.ts","App.tsx","components/Preloader/preloaderStyles.ts","components/Preloader/Preloader.tsx"],"names":["module","exports","styles","createStyles","theme","paper","backgroundColor","palette","common","white","title","textAlign","padding","buttons","justifyContent","btn","width","withStyles","withTheme","withSimpleDialogStyles","open","children","submitAction","resetAction","submitName","submitDisabled","classes","rest","Dialog","onClose","fullWidth","maxWidth","DialogTitle","className","DialogContent","DialogActions","disableSpacing","Button","onClick","color","variant","startIcon","disabled","ConfirmDialog","isOpen","openDialog","confirmAction","itemToConfirm","handleClose","id","aria-labelledby","getProfile","state","profileReducer","profile","getProfileError","profileError","getProfileIsLoading","profileIsLoading","getIsFollowed","isFollowed","getStatus","status","getMessagesList","dialogsReducer","messages","getDialogsList","dialogs","getLastUserActivityDate","lastUserActivityDate","getDeletedMessages","deletedMessages","getSpamedMessages","spamedMessages","getNewMessagesCount","newMessagesCount","getSelectedFriend","selectedFriend","getMessagesLoading","messagesLoading","GET_DIALOGS_ASYNC","GET_MESSAGES_ASYNC","UPDATE_MESSAGES_ASYNC","SEND_MESSAGE_ASYNC","START_CHAT_ASYNC","GET_NEW_MESSAGES_COUNT_ASYNC","DELETE_MESSAGE_ASYNC","RESTORE_MESSAGE_ASYNC","SPAM_MESSAGE_ASYNC","initialState","dialogActions","setMessagesLoading","type","setDialogs","setSelectedFriend","setMessages","setActivityDate","userId","setNewMessagesCount","count","addMessage","message","addMessageToDeleted","messageId","addMessageToSpam","restoreFromSpamDeleted","startChat","history","sendMessage","getMessages","updateMessages","deleteMessage","restoreMessage","spamMessage","getDialogs","requestNewMessagesCount","action","filter","selectedUser","find","dialog","Number","undefined","ProfileContainer","React","lazy","RM","home","path","exact","redirect","isAuth","component","getPath","settings","login","users","notFound","GET_STATUS_ASYNC","SET_STATUS_ASYNC","UPDATE_USER_PROFILE_ASYNC","GET_USER_PROFILE_ASYNC","GET_IS_FOLLOWED_ASYNC","LOAD_PHOTO_ASYNC","profileActions","toggleProfileLoading","setUserProfile","setUserProfileError","setPhoto","photos","updateIsFollowed","setStatus","getUserStatus","setUserStatus","updateProfileInfo","info","getUserProfile","updateCurrentUserInfo","loadPhoto","photo","getIsUserFollowed","Boolean","window","location","hostname","match","ResultCodes","ResultCodeForCaptcha","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","searchText","get","then","response","data","post","delete","authAPI","email","password","rememberMe","captcha","securityAPI","profileAPI","put","photoFile","formData","FormData","append","dialogsAPI","body","getUserProfileAsync","updateProfileInfoAsync","getStatusAsync","setUserStatusAsync","loadPhotoAsync","setUserIsFollowedAsync","requestUsersAsync","toggleFollowAsync","getDialogsAsync","startChatAsync","sendMessageAsync","deleteMessagesAsync","restoreMessagesAsync","spamMessagesAsync","getMessagesAsync","updateMessagesAsync","getNewMessagesCountAsync","authenticateAsync","loginAsync","logoutAsync","appInitAsync","mySaga","enqueueSnackbar","appActions","setUserData","authActions","setCaptchaUrl","setCurrentUserInfo","acceptFollow","usersActions","acceptUnfollow","setPage","setSearchText","setUsers","setUsersTotalCount","toggleFollowInProgress","toggleIsLoading","select","previousId","call","getProfileById","updateProfile","resultCode","Success","options","stopSubmit","_error","getCurrentUserId","getUserIsFollowed","requestUsers","items","totalCount","updateProfileFollow","followUser","unfollowUser","requestDialogs","push","socket","emit","reset","watchMessages","myId","i","senderId","viewed","length","watcher","reciever","error","authenticate","AUTH_ASYNC","CaptchaRequired","getCaptcha","url","logout","setAppIsInited","a","takeEvery","INIT_APP_ASYNC","LOGIN_ASYNC","LOGOUT_ASYNC","FOLLOW_ASYNC","UNFOLLOW_ASYNC","REQUEST_USERS_ASYNC","rootReducer","combineReducers","usersReducer","authReducer","app","appReducer","form","formReducer","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","run","createMuiTheme","typography","fontFamily","join","useNextVariants","h2","fontSize","h3","h4","subtitle1","fontWeight","mixins","toolbar","minHeight","primary","main","secondary","grey","success","background","contrastThreshold","tonalOffset","contrastText","text","client","ApolloClient","uri","ReactDOM","render","maxSnack","anchorOrigin","vertical","horizontal","autoHideDuration","ThemeProvider","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","updateObjectInArray","itemId","objPropName","objNewProps","map","item","totalUsersCount","isLoading","followInProgress","searchQuery","page","inProgress","query","follow","unfollow","followed","captchaUrl","currentUserInfo","getCurrentUserLogin","getIsAuth","getCurrentUserInfo","getCaptchaUrl","inited","notifications","notification","key","Date","getTime","Math","random","removeSnackbar","appInitialize","list","breakpoints","up","display","marginRight","listItem","down","borderBottom","link","alignItems","icon","spacing","lineHeight","name","activeLink","pointerEvents","light","tooltip","withNavbarStyles","openLogoutDialog","LINKS","MOBILE_LINKS","areNewMessages","List","Hidden","xsDown","ListItem","Link","NavLink","to","activeClassName","underline","Tooltip","aria-label","IconButton","Badge","badgeContent","max","smUp","Typography","classNames","borderTopLeftRadius","borderTopRightRadius","menuItemTxt","menuItem","textDecoration","menuIcon","minWidth","withSubmenuStyles","anchorEl","Menu","elevation","getContentAnchorEl","transformOrigin","MenuItem","Divider","orientation","ListItemIcon","ListItemText","avatar","paddingLeft","paddingRight","textTransform","avatarRoot","loginLink","avatarText","avatarIcon","transform","transition","withAuthBtnStyles","useState","setAnchorEl","small","userPlaceholder","event","currentTarget","aria-controls","aria-haspopup","Avatar","src","alt","sizes","root","smDown","fullName","menuButton","head","height","headImg","withMobileMenuStyles","setOpen","toggleDrawer","edge","SwipeableDrawer","onOpen","anchor","role","onKeyDown","logoImg","grid","appBar","zIndex","drawer","content","flexGrow","logo","logoutBtn","logoTxt","rightColumn","withHeaderStyles","AppBar","position","Container","Toolbar","disableGutters","Grid","container","xs","sm","flexItem","connect","withSnackbar","withRouter","props","logoutDialogIsOpen","setLogoutDialogIsOpen","useHistory","useEffect","on","msg","recipientId","senderName","participants","withSuspense","WrappedComponent","fallback","Preloader","showPreloader","getAppInited","displayed","Notifier","dispatch","useDispatch","useSelector","useSnackbar","closeSnackbar","forEach","dismissed","includes","reason","myKey","onExited","Footer","style","flexDirection","io","globalError","e","this","addEventListener","removeEventListener","CssBaseline","Object","entries","route","Cmp","redirectPath","RouteComponent","Component","withAppStyles","preloader","top","left","right","bottom","withPreloaderStyles","CircularProgress"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,8C,0HCErCC,EAASC,aAAa,SAACC,GAAD,MAAmB,CAC3CC,MAAO,CACHC,gBAAiBF,EAAMG,QAAQC,OAAOC,OAE1CC,MAAO,CACHC,UAAW,SACXC,QAAS,iBAEbC,QAAS,CACLC,eAAgB,gBAChBF,QAAS,iBAEbG,IAAK,CACDC,MAAO,WAIAC,cAAWf,EAAQ,CAACgB,WAAW,I,QC2C/BC,OAxCwD,SAAC,GAAsG,IAArGC,EAAoG,EAApGA,KAAMV,EAA8F,EAA9FA,MAAOW,EAAuF,EAAvFA,SAAUC,EAA6E,EAA7EA,aAAcC,EAA+D,EAA/DA,YAAaC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,eAAgBC,EAAsB,EAAtBA,QAAYC,EAAU,gHACzK,OACI,kBAACC,EAAA,EAAD,eACIR,KAAMA,EACNS,QAASN,EACTO,WAAS,EACTC,SAAS,MACLJ,EALR,CAMID,QAAS,CACLrB,MAAOqB,EAAQrB,SAEnB,kBAAC2B,EAAA,EAAD,CAAaC,UAAWP,EAAQhB,OAAQA,GACxC,kBAACwB,EAAA,EAAD,KACKb,GAEL,kBAACc,EAAA,EAAD,CAAeF,UAAWP,EAAQb,QAASuB,gBAAc,GACrD,kBAACC,EAAA,EAAD,eACIC,QAAShB,EACTW,UAAWP,EAAQX,IACnBwB,MAAM,UACNC,QAAQ,YACRC,UAAW,kBAAC,IAAD,OACNhB,EAAiB,CAACiB,SAASjB,GAAkB,IAElDD,GAA0B,WAE9B,kBAACa,EAAA,EAAD,CACIC,QAASf,EACTU,UAAWP,EAAQX,IACnBwB,MAAM,YACNC,QAAQ,YACRC,UAAW,kBAAC,IAAD,OALf,gB,iCChDhB,qCAwCeE,IA3BsB,SAAC,GAAkE,IAAjEC,EAAgE,EAAhEA,OAAQC,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,cAAeC,EAA6B,EAA7BA,cAAe1B,EAAc,EAAdA,SAC/E2B,EAAc,WAChBH,GAAW,EAAO,UAAW,OAOjC,OACI,kBAAC,IAAD,CACIzB,KAAMwB,EACNrB,YAAayB,EACb1B,aARoB,WACxByB,EAAgBD,EAAcC,EAAcE,IAAMH,IAClDE,KAOIE,kBAAgB,qBAChBxC,MAAM,iBAELW,GACG,kBAAC,IAAD,CAAYmB,QAAQ,SACfnB,GAAsB,wE,iCC9B3C,0KAAO,IAAM8B,EAAa,SAACC,GACvB,OAAOA,EAAMC,eAAeC,SAGnBC,EAAkB,SAACH,GAC5B,OAAOA,EAAMC,eAAeG,cAGnBC,EAAsB,SAACL,GAChC,OAAOA,EAAMC,eAAeK,kBAGnBC,EAAgB,SAACP,GAC1B,OAAOA,EAAMC,eAAeO,YAGnBC,EAAY,SAACT,GACtB,OAAOA,EAAMC,eAAeS,S,iCCjBhC,gRAAO,IAAMC,EAAkB,SAACX,GAC5B,OAAOA,EAAMY,eAAeC,UAGnBC,EAAiB,SAACd,GAC3B,OAAOA,EAAMY,eAAeG,SAGnBC,EAA0B,SAAChB,GACpC,OAAOA,EAAMY,eAAeK,sBAGnBC,EAAqB,SAAClB,GAC/B,OAAOA,EAAMY,eAAeO,iBAGnBC,EAAoB,SAACpB,GAC9B,OAAOA,EAAMY,eAAeS,gBAGnBC,EAAsB,SAACtB,GAChC,OAAOA,EAAMY,eAAeW,kBAGnBC,EAAoB,SAACxB,GAC9B,OAAOA,EAAMY,eAAea,gBAGnBC,EAAqB,SAAC1B,GAC/B,OAAOA,EAAMY,eAAee,kB,wYC5BnBC,EAAoB,4BACpBC,EAAqB,6BACrBC,EAAwB,gCACxBC,EAAqB,6BACrBC,EAAmB,2BACnBC,EAA+B,uCAC/BC,EAAuB,+BACvBC,EAAwB,gCACxBC,EAAqB,6BAa5BC,EAAe,CACjBtB,QAAS,GACTF,SAAU,GACVU,iBAAkB,KAClBN,qBAAsB,KACtBE,gBAAiB,GACjBE,eAAgB,GAChBI,eAAgB,KAChBE,iBAAiB,GA8CRW,EAAgB,CACzBC,mBAAoB,SAACZ,GAAD,MAA+B,CAACa,KAzDpB,+BAyDgDb,oBAChFc,WAAY,SAAC1B,GAAD,MAAkC,CAACyB,KAnExB,sBAmE2CzB,YAClE2B,kBAAmB,SAACjB,GAAD,MAAkC,CAACe,KA5DvB,8BA4DkDf,mBACjFkB,YAAa,SAAC9B,GAAD,MAAoC,CAAC2B,KApE1B,uBAoE8C3B,aACtE+B,gBAAiB,SAACC,GAAD,MAAqB,CAACL,KAnEV,4BAmEmCK,WAChEC,oBAAqB,SAACC,GAAD,MAAoB,CAACP,KArER,iCAqEsCO,UACxEC,WAAY,SAACC,GAAD,MAA4B,CAACT,KApElB,sBAoEqCS,YAC5DC,oBAAqB,SAACC,GAAD,MAAwB,CAACX,KApEZ,iCAoE0CW,cAC5EC,iBAAkB,SAACD,GAAD,MAAwB,CAACX,KAnEZ,8BAmEuCW,cACtEE,uBAAwB,SAACF,GAAD,MAAwB,CAACX,KArEZ,oCAqE6CW,cAClFG,UAAW,SAACT,EAAgBU,GAAjB,MAAmC,CAACf,KAAMR,EAAkBa,SAAQU,YAC/EC,YAAa,SAACX,EAAgBI,GAAjB,MAAsC,CAACT,KAAMT,EAAoBc,SAAQI,YACtFQ,YAAa,SAACZ,GAAD,MAAqB,CAACL,KAAMX,EAAoBgB,WAC7Da,eAAgB,SAACb,GAAD,MAAqB,CAACL,KAAMV,EAAuBe,WACnEc,cAAe,SAACR,GAAD,MAAwB,CAACX,KAAMN,EAAsBiB,cACpES,eAAgB,SAACT,GAAD,MAAwB,CAACX,KAAML,EAAuBgB,cACtEU,YAAa,SAACV,GAAD,MAAwB,CAACX,KAAMJ,EAAoBe,cAChEW,WAAY,iBAAO,CAACtB,KAAMZ,IAC1BmC,wBAAyB,iBAAO,CAACvB,KAAMP,KAG5BrB,IA/DQ,WAGC,IAFpBZ,EAEmB,uDAFXqC,EACR2B,EACmB,uCAEnB,OAAQA,EAAOxB,MACX,IA9BmB,sBA+Bf,OAAO,eAAIxC,EAAX,CAAkBe,QAASiD,EAAOjD,UACtC,IA/BoB,uBAgChB,OAAO,eAAIf,EAAX,CAAkBa,SAAUmD,EAAOnD,WACvC,IAzB4B,+BA0BxB,OAAO,eAAIb,EAAX,CAAkB2B,gBAAiBqC,EAAOrC,kBAC9C,IA5B2B,8BA6BvB,OAAO,eAAI3B,EAAX,CAAkByB,eAAgBuC,EAAOvC,iBAC7C,IAlCmB,sBAmCf,OAAO,eAAIzB,EAAX,CAAkBa,SAAS,GAAD,mBAAMb,EAAMa,UAAZ,CAAsBmD,EAAOf,YAC3D,IAnC8B,iCAoC1B,OAAO,eAAIjD,EAAX,CAAkBmB,gBAAgB,GAAD,mBAAMnB,EAAMmB,iBAAZ,CAA6B6C,EAAOb,cACzE,IAnC2B,8BAoCvB,OAAO,eAAInD,EAAX,CAAkBqB,eAAe,GAAD,mBAAMrB,EAAMqB,gBAAZ,CAA4B2C,EAAOb,cACvE,IAtCiC,oCAuC7B,OAAO,eACAnD,EADP,CAEImB,gBAAiB,YAAInB,EAAMmB,iBAAiB8C,QAAO,SAAApE,GAAE,OAAIA,IAAOmE,EAAOb,aACvE9B,eAAgB,YAAIrB,EAAMqB,gBAAgB4C,QAAO,SAAApE,GAAE,OAAIA,IAAOmE,EAAOb,eAE7E,IAhD8B,iCAiD1B,OAAO,eAAInD,EAAX,CAAkBuB,iBAAkByC,EAAOjB,QAC/C,IAjDyB,4BAkDrB,IAAImB,EAAe,YAAIlE,EAAMe,SAASoD,MAAK,SAAAC,GAAM,OAAIA,EAAOvE,KAAOwE,OAAOL,EAAOnB,WACjF,YAAqByB,IAAjBJ,EACO,eAAIlE,EAAX,CAAkBiB,qBAAsBiD,EAAajD,uBAE9CjB,EAEf,QACI,OAAOA,K,sECzEnB,mlE,gCCAA,oBACMuE,EAAmBC,IAAMC,MAAK,kBAAM,8DAkBpCC,EAAe,CACjBC,KAAM,CACFC,KAAM,IACNC,OAAO,EACPC,SAAU,SAACC,GACP,OAAOA,EAAM,WAAgB,WAGrC7E,QAAS,CACL0E,KAAM,gBACNI,UAAWT,EACXM,OAAO,EACPI,QAAS,SAACpF,GACN,OAAOA,EAAE,mBAAeA,GAAO,aAGvCqF,SAAU,CACNN,KAAM,YACNC,OAAO,EACPG,UAAWT,GAEfxD,QAAS,CACL6D,KAAM,gBACNI,UAxCkBR,IAAMC,MAAK,kBAAM,+DAyCnCQ,QAAS,SAACpF,GACN,OAAOA,EAAE,mBAAeA,GAAO,aAGvCsF,MAAO,CACHP,KAAM,SACNC,OAAO,EACPG,UA/CeR,IAAMC,MAAK,kBAAM,wDAiDpCW,MAAO,CACHR,KAAM,SACNC,OAAO,EACPG,UAnDeR,IAAMC,MAAK,kBAAM,gEAqDpCY,SAAU,CACNT,KAAM,IACNC,OAAO,EACPG,UAvDSR,IAAMC,MAAK,kBAAM,mCA2DnBC,O,8SC7DFY,EAAmB,2BACnBC,EAAmB,2BACnBC,EAA4B,oCAC5BC,EAAyB,iCACzBC,EAAwB,gCAIxBC,EAAmB,2BAK1BtD,EAAe,CACjBnC,QAAS,KACTE,aAAc,KACdM,OAAQ,GACRJ,kBAAkB,EAClBE,YAAY,GA0BHoF,EAAiB,CAC1BC,qBAAsB,SAACvF,GAAD,MAAgC,CAACkC,KAnCrB,iCAmCmDlC,qBACrFwF,eAAgB,SAAC5F,GAAD,MAA2B,CAACsC,KAxChB,2BAwCwCtC,YACpE6F,oBAAqB,SAAC3F,GAAD,MAA2B,CAACoC,KAxCd,kCAwC6CpC,iBAChF4F,SAAU,SAACC,GAAD,MAAyB,CAACzD,KAvCf,oBAuCgCyD,WACrDC,iBAAkB,SAAC1F,GAAD,MAA0B,CAACgC,KAtClB,0BAsCyChC,eACpE2F,UAAW,SAACzF,GAAD,MAAqB,CAAC8B,KA7CR,wBA6C6B9B,WACtD0F,cAAe,SAACvG,GAAD,MAAiB,CAAC2C,KAAM8C,EAAkBzF,OACzDwG,cAAe,SAAC3F,GAAD,MAAqB,CAAC8B,KAAM+C,EAAkB7E,WAC7D4F,kBAAmB,SAACC,EAAmB1D,GAApB,MAAwC,CAACL,KAAMgD,EAA2Be,OAAM1D,WACnG2D,eAAgB,SAAC3G,GAAD,IAAa4G,EAAb,8DAAyD,CAACjE,KAAMiD,EAAwB5F,KAAI4G,0BAC5GC,UAAW,SAACC,GAAD,MAAiB,CAACnE,KAAMmD,EAAkBgB,UACrDC,kBAAmB,SAAC/G,GAAD,MAAiB,CAAC2C,KAAMkD,EAAuB7F,QAGvDI,IApCQ,WAA0E,IAAzED,EAAwE,uDAAhEqC,EAAc2B,EAAkD,uCAC5F,OAAQA,EAAOxB,MACX,IAnBwB,2BAoBpB,OAAO,eAAIxC,EAAX,CAAkBE,QAAS8D,EAAO9D,QAASE,aAAc,OAC7D,IAjB8B,iCAkB1B,OAAO,eAAIJ,EAAX,CAAkBM,iBAAkB0D,EAAO1D,mBAC/C,IAtB+B,kCAuB3B,OAAO,eAAIN,EAAX,CAAkBE,QAAS,KAAME,aAAc4D,EAAO5D,eAC1D,IA1BqB,wBA2BjB,OAAO,eAAIJ,EAAX,CAAkBU,OAAQsD,EAAOtD,SACrC,IAxBiB,oBAyBb,OAAO,eAAIV,EAAX,CAAkBE,QAAQ,eAAKF,EAAME,QAAZ,CAAqB+F,OAAQjC,EAAOiC,WACjE,IAxBuB,0BAyBnB,OAAO,eAAIjG,EAAX,CAAkBQ,WAAYwD,EAAOxD,aACzC,QACI,OAAOR,K,mGC7BC6G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICLMC,EAKAC,E,mHAfNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2C,SAMPP,O,qBAAAA,I,kBAAAA,M,cAKAC,O,uCAAAA,M,KA2BL,IAAMO,EACC,SAACC,EAAqBC,EAAkBC,GAC9C,OAAOT,EAASU,IAAT,qBAA2BH,EAA3B,kBAAgDC,EAAhD,iBAAiEC,IACnEE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BP,EAMO,SAAC7H,GACb,OAAOuH,EAASU,IAAT,iBAA+BjI,IACjCkI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAR1BP,EAWG,SAAC7H,GACT,OAAOuH,EAASc,KAAT,iBAAiDrI,IACnDkI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAb1BP,EAgBK,SAAC7H,GACX,OAAOuH,EAASe,OAAT,iBAAmDtI,IACrDkI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAM1BG,EACH,WACF,OAAOhB,EAASU,IAAsB,WACjCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BG,EAMF,SAACC,EAAeC,EAAkBC,GAAwD,IAAnCC,EAAkC,uDAAT,KACnF,OAAOpB,EAASc,KAAwB,cAAe,CAACG,QAAOC,WAAUC,aAAYC,YAChFT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAR1BG,EAWD,WACJ,OAAOhB,EAASe,OAAgC,eAC3CJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ1BQ,EACG,WACR,OAAOrB,EAASU,IAAyB,4BACpCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAY1BS,EACG,SAAC7I,GACT,OAAOuH,EAASU,IAAT,kBAAqCjI,IACvCkI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BS,EAME,SAAC7I,GACR,OAAOuH,EAASU,IAAT,yBAAuCjI,IACzCkI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAR1BS,EAWE,SAAChI,GACR,OAAO0G,EAASuB,IAAT,iBAAwD,CAACjI,WAC3DqH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAb1BS,EAgBE,SAACE,GACR,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBxB,EAASuB,IAAT,gBAAqDE,EAAU,CAClEpB,QAAS,CACL,eAAgB,yBAGnBM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAxB1BS,EA2BU,SAACnC,GAChB,OAAOa,EAASuB,IAAT,UAAiDpC,GACnDwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB1Be,EACG,WACR,OAAO5B,EAASU,IAAwB,WACnCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1Be,EAME,SAACnG,GACR,OAAOuE,EAASuB,IAAT,kBAAiD9F,IACnDkF,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAR1Be,EAWI,SAACnG,EAAgBI,GAC1B,OAAOmE,EAASc,KAAT,kBAAkDrF,EAAlD,aAAqE,CAACoG,KAAMhG,IAC9E8E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAb1Be,EAgBI,SAACnG,GACV,OAAOuE,EAASU,IAAT,kBAAiDjF,EAAjD,cACFkF,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAlB1Be,EAqBI,SAAC7F,GACV,OAAOiE,EAASc,KAAT,2BAA2D/E,EAA3D,UACF4E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAvB1Be,EA0BM,SAAC7F,GACZ,OAAOiE,EAASe,OAAT,2BAA6DhF,IAC/D4E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SA5B1Be,EAgCO,SAAC7F,GACb,OAAOiE,EAASuB,IAAT,2BAA0DxF,EAA1D,aACF4E,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAlC1Be,EAqCS,WACd,OAAO5B,EAASU,IAAY,8BACvBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,4CC5H7BiB,I,WAuBAC,I,WAgBAC,I,WAWAC,I,WAcAC,I,YAkBAC,I,YAWAC,I,YAgBAC,I,YAmBAC,I,YAUAC,I,YAaAC,I,YAeAC,I,YAaAC,I,YAaAC,I,YAqBAC,I,YAkBAC,I,YAcAC,I,YAUAC,I,YAgBAC,I,YAmBAC,I,YAaAC,I,YA+FAC,IA5aHC,GAAmBC,IAAnBD,gBACAE,GAAkDC,IAAlDD,YAAaE,GAAqCD,IAArCC,cAAeC,GAAsBF,IAAtBE,mBAC5B/E,GAAuIF,IAAvIE,eAAgBC,GAAuHH,IAAvHG,oBAAqBF,GAAkGD,IAAlGC,qBAAsBG,GAA4EJ,IAA5EI,SAAUY,GAAkEhB,IAAlEgB,kBAAmBV,GAA+CN,IAA/CM,iBAAkBM,GAA6BZ,IAA7BY,eAAgBL,GAAaP,IAAbO,UAE7H2E,GAQAC,IARAD,aACAE,GAOAD,IAPAC,eACAC,GAMAF,IANAE,QACAC,GAKAH,IALAG,cACAC,GAIAJ,IAJAI,SACAC,GAGAL,IAHAK,mBACAC,GAEAN,IAFAM,uBACAC,GACAP,IADAO,gBAGAvH,GAWAzB,IAXAyB,wBACAf,GAUAV,IAVAU,WACAE,GASAZ,IATAY,oBACAE,GAQAd,IARAc,iBACAC,GAOAf,IAPAe,uBACAT,GAMAN,IANAM,gBACAH,GAKAH,IALAG,WACAE,GAIAL,IAJAK,YACAJ,GAGAD,IAHAC,mBACAO,GAEAR,IAFAQ,oBACAJ,GACAJ,IADAI,kBAMJ,SAAUwG,GAAV,oFAEsB,OAFSrJ,EAA/B,EAA+BA,GAAI4G,EAAnC,EAAmCA,sBAAnC,kBAE4B8E,cAF5B,UAEcvL,EAFd,QAGcwL,EAHd,UAG2BzL,YAAWC,UAHtC,aAG2B,EAAmB6C,UAEnBhD,EAL3B,gBAMY,OANZ,SAMkB8I,YAAI9C,IAAqB,IAN3C,OAQqB,OARrB,UAQ2B4F,YAAKC,GAAgB7L,GARhD,WAQcoI,EARd,QASYxB,EATZ,iBAUY,OAVZ,UAUkBkC,YAAIkC,GAAmB5C,IAVzC,QAYQ,OAZR,UAYcU,YAAI7C,GAAemC,IAZjC,WAaYuD,IAAe3L,EAb3B,iBAcY,OAdZ,UAckB8I,YAAI9C,IAAqB,IAd3C,gCAiBQ,OAjBR,oCAiBc8C,YAAI5C,GAAoB,KAAE9C,UAjBxC,sDAuBA,SAAUkG,GAAV,kFAEuC,OAFL5C,EAAlC,EAAkCA,KAAM1D,EAAxC,EAAwCA,OAAxC,kBAE6C4I,YAAKE,GAAepF,GAFjE,mBAEeqF,EAFf,EAEeA,WAAY/K,EAF3B,EAE2BA,SACf+K,IAAe1E,EAAY2E,QAHvC,iBAIY,OAJZ,UAIkBlD,YAAInC,GAAe3D,GAAQ,IAJ7C,QAKY,OALZ,UAKkB8F,YAAI6B,GAAgB,CAACvH,QAAS,gCAAiC6I,QAAS,CAAC1M,QAAS,cALpG,gCAOY,OAPZ,UAOkBuJ,YAAIoD,YAAW,WAAY,CAACC,OAAQnL,KAPtD,gCAUQ,OAVR,oCAUc8H,YAAI5C,GAAoB,KAAE9C,UAVxC,sDAgBA,SAAUmG,GAAV,4EAEqB,OAFKvJ,EAA1B,EAA0BA,GAA1B,kBAE2B4L,YAAKrF,GAAevG,GAF/C,OAGQ,OADMoI,EAFd,gBAGcU,YAAIxC,GAAU8B,IAH5B,8BAKQ,OALR,mCAKcU,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAL1E,qDAWA,SAAUiK,GAAV,4EAE6B,OAFC3I,EAA9B,EAA8BA,OAA9B,kBAEmC+K,YAAKpF,GAAe3F,GAFvD,qBAEekL,aACY1E,EAAY2E,QAHvC,iBAIY,OAJZ,SAIkBlD,YAAIxC,GAAUzF,IAJhC,OAKY,OALZ,UAKkBiI,YAAI6B,GAAgB,CAACvH,QAAS,kBAAmB6I,QAAS,CAAC1M,QAAS,cALtF,gCAQQ,OARR,oCAQcuJ,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAR1E,sDAcA,SAAUkK,GAAV,oFAE6C,OAFnB3C,EAA1B,EAA0BA,MAA1B,kBAEmD8E,YAAK/E,GAAWC,GAFnE,mBAEesB,EAFf,EAEeA,KAAM2D,EAFrB,EAEqBA,WAAY/K,EAFjC,EAEiCA,SACrB+K,IAAe1E,EAAY2E,QAHvC,iBAI0B,OAJ1B,UAIgCN,cAJhC,QAKY,OADMvL,EAJlB,iBAKkB2I,YAAI3C,GAASiC,EAAKhC,SALpC,QAMY,OANZ,UAMkB0C,YAAI,CAACnG,KAAMiD,IAAwB5F,GAAIoM,YAAiBjM,GAAQyG,uBAAuB,IANzG,gCAQY,OARZ,UAQkBkC,YAAI6B,GAAgB,CAACvH,QAASpC,EAAUiL,QAAS,CAAC1M,QAAS,YAR7E,gCAWQ,OAXR,oCAWcuJ,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAX1E,sDAkBA,SAAUmK,GAAV,4EAE2B,OAFO1J,EAAlC,EAAkCA,GAAlC,kBAEiC4L,YAAKS,GAAmBrM,GAFzD,OAGQ,OADMW,EAFd,gBAGcmI,YAAIzC,GAAiB1F,IAHnC,8BAKQ,OALR,mCAKcmI,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAL1E,sDAWA,SAAUoK,GAAV,oFAEQ,OAFqB7B,EAA7B,EAA6BA,YAAaC,EAA1C,EAA0CA,SAAUC,EAApD,EAAoDA,WAApD,kBAEcc,YAAIuC,GAAcrD,IAFhC,OAGQ,OAHR,SAGcc,YAAIsC,GAAQtD,IAH1B,OAIQ,OAJR,SAIcgB,YAAI2C,IAAgB,IAJlC,OAKoC,OALpC,UAK0CG,YAAKU,GAAcxE,EAAaC,EAAUC,GALpF,QAMQ,OANR,SAKeuE,EALf,EAKeA,MAAOC,EALtB,EAKsBA,WALtB,UAMc1D,YAAI2C,IAAgB,IANlC,QAOQ,OAPR,UAOc3C,YAAIwC,GAASiB,IAP3B,QAQQ,OARR,UAQczD,YAAIyC,GAAmBiB,IARrC,gCAUQ,OAVR,oCAUc1D,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAV1E,uDAgBA,SAAUqK,GAAV,oFAEQ,OAFqBzF,EAA7B,EAA6BA,OAAQnE,EAArC,EAAqCA,GAAIyM,EAAzC,EAAyCA,oBAAzC,kBAEc3D,YAAI0C,IAAuB,EAAMxL,IAF/C,UAGkD,WAAXmE,EAHvC,iBAG6D,OAH7D,SAGmEyH,YAAKc,GAAY1M,GAHpF,2CAG0F,OAH1F,UAGgG4L,YAAKe,GAAc3M,GAHnH,sCAGe+L,EAHf,EAGeA,WAAY/K,EAH3B,EAG2BA,SACf+K,IAAe1E,EAAY2E,QAJvC,oBAKuB,WAAX7H,EALZ,iBAKkC,OALlC,UAKwC2E,YAAImC,GAAajL,IALzD,gCAKgE,OALhE,UAKsE8I,YAAIqC,GAAenL,IALzF,YAMgByM,EANhB,iBAOgB,OAPhB,UAOsB3D,YAAI/B,GAAkB/G,IAP5C,gCAUY,OAVZ,UAUkB8I,YAAI6B,GAAgB,CAACvH,QAASpC,EAAUiL,QAAS,CAAC1M,QAAS,YAV7E,QAYQ,OAZR,UAYcuJ,YAAI0C,IAAuB,EAAOxL,IAZhD,gCAcQ,OAdR,oCAcc8I,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAd1E,uDAmBA,SAAUsK,KAAV,uEAEyB,OAFzB,kBAE+B+B,YAAKgB,IAFpC,OAGQ,OADMzE,EAFd,gBAGcW,YAAIlG,GAAWuF,IAH7B,8BAKQ,OALR,mCAKcW,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAL1E,sDAUA,SAAUuK,GAAV,8EAE6B,OAFH9G,EAA1B,EAA0BA,OAAQU,EAAlC,EAAkCA,QAAlC,kBAEmCkI,YAAKnI,GAAWT,GAFnD,kBAEe+I,aACY1E,EAAY2E,SAC3BtI,EAAQmJ,KAAR,mBAAyB7J,IAJrC,uBAOQ,OAPR,mCAOc8F,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAP1E,sDAaA,SAAUwK,GAAV,gFAEmC,OAFP/G,EAA5B,EAA4BA,OAAQI,EAApC,EAAoCA,QAApC,kBAEyCwI,YAAKjI,GAAaX,EAAQI,GAFnE,mBAEegF,EAFf,EAEeA,KAFf,EAEqB2D,aACM1E,EAAY2E,QAHvC,iBAKY,OADAc,IAAOC,KAAK,cAAe3E,EAAKhF,SAJ5C,UAKkB0F,YAAI3F,GAAWiF,EAAKhF,UALtC,QAMY,OANZ,UAMkB0F,YAAIkE,YAAM,YAN5B,gCASQ,OATR,oCASclE,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAT1E,uDAeA,SAAUyK,GAAV,4EAE6B,OAFE1G,EAA/B,EAA+BA,UAA/B,kBAEmCsI,YAAK9H,GAAeR,GAFvD,qBAEeyI,aACY1E,EAAY2E,QAHvC,gBAIY,OAJZ,SAIkBlD,YAAIzF,GAAoBC,IAJ1C,+BAOQ,OAPR,oCAOcwF,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAP1E,uDAaA,SAAU0K,GAAV,4EAE6B,OAFG3G,EAAhC,EAAgCA,UAAhC,kBAEmCsI,YAAK7H,GAAgBT,GAFxD,qBAEeyI,aACY1E,EAAY2E,QAHvC,gBAIY,OAJZ,SAIkBlD,YAAItF,GAAuBF,IAJ7C,+BAOQ,OAPR,oCAOcwF,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAP1E,uDAaA,SAAU2K,GAAV,4EAE6B,OAFA5G,EAA7B,EAA6BA,UAA7B,kBAEmCsI,YAAK5H,GAAaV,GAFrD,qBAEeyI,aACY1E,EAAY2E,QAHvC,gBAIY,OAJZ,SAIkBlD,YAAIvF,GAAiBD,IAJvC,+BAOQ,OAPR,oCAOcwF,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAP1E,uDAWA,IAAM0N,GAAgB,SAAC9M,EAAqBoM,EAAuBvJ,GAC/D,IAAMkK,EAAOd,YAAiBjM,GACVoM,EAAMnI,QAAO,SAAC+I,GAAD,OAAqBA,EAAEC,WAAaF,IAASC,EAAEE,UAC/DC,OAAS,GACtBR,IAAOC,KAAK,iBAAkB,CAACQ,QAASL,EAAMM,SAAUxK,KAMhE,SAAUmH,GAAV,oFAEQ,OAFoBnH,EAA5B,EAA4BA,OAA5B,kBAEc8F,YAAIpG,IAAmB,IAFrC,OAG+B,OAH/B,SAGqCkJ,YAAKhI,GAAaZ,GAHvD,OAIqB,OAJrB,SAGeyK,EAHf,EAGeA,MAAOlB,EAHtB,EAGsBA,MAHtB,UAI2BX,YAAKC,GAAgB7I,GAJhD,WAIcoF,EAJd,OAKaqF,EALb,iBAMY,OANZ,UAMkB3E,YAAIhG,GAAYyJ,IANlC,QAOY,OAPZ,UAOkBzD,YAAI/F,GAAgBC,IAPtC,QAQY,OARZ,UAQkB8F,YAAIjG,GAAkBuF,IARxC,QAUsB,OAVtB,UAU4BsD,cAV5B,QAYQ,OAFMvL,EAVd,OAWQ8M,GAAc9M,EAAOoM,EAAOvJ,GAXpC,UAYc8F,YAAIpG,IAAmB,IAZrC,gCAcQ,OAdR,oCAccoG,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAd1E,uDAkBA,SAAU6K,GAAV,kFAE+B,OAFApH,EAA/B,EAA+BA,OAA/B,kBAEqC4I,YAAKhI,GAAaZ,GAFvD,mBAEeyK,EAFf,EAEeA,MAAOlB,EAFtB,EAEsBA,MACTkB,EAHb,iBAIY,OAJZ,UAIkB3E,YAAIhG,GAAYyJ,IAJlC,QAK0B,OAL1B,UAKgCb,cALhC,QAOY,OAFMvL,EALlB,OAMY8M,GAAc9M,EAAOoM,EAAOvJ,GANxC,UAOkB8F,YAAI5E,MAPtB,gCAUQ,OAVR,oCAUc4E,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAV1E,uDAcA,SAAU8K,KAAV,uEAEqB,OAFrB,kBAE2BuB,YAAKlK,IAFhC,OAGQ,OADM0G,EAFd,gBAGcU,YAAI7F,GAAoBmF,IAHtC,8BAKQ,OALR,mCAKcU,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAL1E,sDAUA,SAAU+K,KAAV,+EAEmC,OAFnC,kBAEyCsB,YAAK8B,IAF9C,mBAEetF,EAFf,EAEeA,KAFf,EAEqB2D,aACM1E,EAAY2E,QAHvC,iBAKY,OADOhM,EAAoBoI,EAApBpI,GAAIsF,EAAgB8C,EAAhB9C,MAAOkD,EAASJ,EAATI,MAJ9B,UAKkBM,YAAI+B,GAAY7K,EAAIsF,EAAOkD,GAAO,IALpD,QAMY,OANZ,UAMkBM,YAAInC,GAAe3G,GAAI,IANzC,QAOY,OAPZ,UAOkB8I,YAAI5E,MAPtB,gCAUQ,OAVR,oCAUc4E,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAV1E,uDAgBA,SAAUgL,GAAV,0FAEuC,OAFjB/B,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,SAAUC,EAAvC,EAAuCA,WAAYC,EAAnD,EAAmDA,QAAnD,kBAE6CiD,YAAKtG,GAAOkD,EAAOC,EAAUC,EAAYC,GAFtF,mBAEeoD,EAFf,EAEeA,WAAY/K,EAF3B,EAE2BA,SACf+K,IAAe1E,EAAY2E,QAHvC,iBAIY,OAJZ,UAIkBlD,YAAI,CAACnG,KAAMgL,MAJ7B,mCAMgB5B,IAAezE,EAAqBsG,gBANpD,iBAO8B,OAP9B,UAOoChC,YAAKiC,IAPzC,QAQgB,OARhB,SAOuBC,EAPvB,EAOuBA,IAPvB,UAQsBhF,YAAIiC,GAAc+C,IARxC,QAUY,OAVZ,UAUkBhF,YAAIoD,YAAW,QAAS,CAACC,OAAQnL,KAVnD,gCAaQ,OAbR,oCAac8H,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAb1E,uDAmBA,SAAUiL,GAAV,4EAE6B,OAFN9G,EAAvB,EAAuBA,QAAvB,kBAEmCkI,YAAKmC,IAFxC,qBAEehC,aACY1E,EAAY2E,QAHvC,iBAIY,OAJZ,SAIkBlD,YAAI+B,GAAY,KAAM,KAAM,MAAM,IAJpD,OAKY,OALZ,UAKkB/B,YAAI7F,GAAoB,IAL1C,QAMYS,EAAQmJ,KAAK,UANzB,gCASQ,OATR,oCASc/D,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAT1E,uDAaA,SAAUkL,KAAV,iEAEQ,OAFR,kBAEc3B,YAAI,CAACnG,KAAMgL,MAFzB,OAGQ,OAHR,SAGc7E,YAAI8B,IAAWoD,kBAH7B,8BAKQ,OALR,mCAKclF,YAAI6B,GAAgB,CAACvH,QAAS,KAAEA,QAAS6I,QAAS,CAAC1M,QAAS,YAL1E,sD,SAUemO,K,8EAAf,sBAAAO,EAAA,sEACiB1F,IADjB,oF,+BAIejD,G,uFAAf,WAAqBkD,EAAeC,EAAkBC,EAAqBC,GAA3E,SAAAsF,EAAA,sEACiB1F,EAAcC,EAAOC,EAAUC,EAAYC,GAD5D,oF,+BAIeoF,K,8EAAf,sBAAAE,EAAA,sEACiB1F,IADjB,oF,+BAIesF,K,8EAAf,sBAAAI,EAAA,sEACiBrF,IADjB,oF,+BAIerC,G,iFAAf,WAA6BvG,GAA7B,SAAAiO,EAAA,sEACiBpF,EAAqB7I,GADtC,oF,+BAIe6G,G,iFAAf,WAAyBC,GAAzB,SAAAmH,EAAA,sEACiBpF,EAAqB/B,GADtC,oF,+BAIeN,G,iFAAf,WAA6B3F,GAA7B,SAAAoN,EAAA,sEACiBpF,EAAqBhI,GADtC,oF,+BAIegL,G,iFAAf,WAA8B7L,GAA9B,SAAAiO,EAAA,sEACiBpF,EAAsB7I,GADvC,oF,+BAIe8L,G,iFAAf,WAA6BpF,GAA7B,SAAAuH,EAAA,sEACiBpF,EAA6BnC,GAD9C,oF,+BAIe4F,G,qFAAf,WAA4BxE,EAAqBC,EAAkBC,GAAnE,SAAAiG,EAAA,sEACiBpG,EAAkBC,EAAaC,EAAUC,GAD1D,oF,+BAIeqE,G,iFAAf,WAAiCrM,GAAjC,SAAAiO,EAAA,sEACiBpG,EAAwB7H,GADzC,oF,+BAIe0M,G,iFAAf,WAA0B1M,GAA1B,SAAAiO,EAAA,sEACiBpG,EAAoB7H,GADrC,oF,+BAIe2M,G,iFAAf,WAA4B3M,GAA5B,SAAAiO,EAAA,sEACiBpG,EAAsB7H,GADvC,oF,+BAIe4M,K,8EAAf,sBAAAqB,EAAA,sEACiB9E,IADjB,oF,+BAIe1F,G,iFAAf,WAAyBT,GAAzB,SAAAiL,EAAA,sEACiB9E,EAAqBnG,GADtC,oF,+BAIeW,G,mFAAf,WAA2BX,EAAgBI,GAA3C,SAAA6K,EAAA,sEACiB9E,EAAuBnG,EAAQI,GADhD,oF,+BAIeQ,G,iFAAf,WAA2BZ,GAA3B,SAAAiL,EAAA,sEACiB9E,EAAuBnG,GADxC,oF,+BAIec,G,iFAAf,WAA6BR,GAA7B,SAAA2K,EAAA,sEACiB9E,EAAyB7F,GAD1C,oF,+BAIeS,G,iFAAf,WAA8BT,GAA9B,SAAA2K,EAAA,sEACiB9E,EAA0B7F,GAD3C,oF,+BAIeU,G,iFAAf,WAA2BV,GAA3B,SAAA2K,EAAA,sEACiB9E,EAAuB7F,GADxC,oF,+BAIe5B,K,8EAAf,sBAAAuM,EAAA,sEACiB9E,IADjB,oF,sBAKA,SAAUuB,KAAV,iEACI,OADJ,SACUwD,YAAUC,IAAgB1D,IADpC,OAEI,OAFJ,SAEUyD,YAAUP,IAAYrD,IAFhC,OAGI,OAHJ,SAGU4D,YAAUE,IAAa7D,IAHjC,OAII,OAJJ,SAIU2D,YAAUG,IAAc7D,IAJlC,OAKI,OALJ,UAKU0D,YAAUtI,IAAwByD,IAL5C,QAMI,OANJ,UAMU6E,YAAUpI,IAAkB2D,IANtC,QAOI,OAPJ,UAOUyE,YAAUrI,IAAuB6D,IAP3C,QAQI,OARJ,UAQUwE,YAAUI,IAAc1E,IARlC,QASI,OATJ,UASUsE,YAAUK,IAAgB3E,IATpC,QAUI,OAVJ,UAUUsE,YAAUM,IAAqB7E,IAVzC,QAWI,OAXJ,UAWUuE,YAAUzI,IAAkB8D,IAXtC,QAYI,OAZJ,UAYU2E,YAAUxI,IAAkB8D,IAZtC,QAaI,OAbJ,UAaU0E,YAAUvI,IAA2B2D,IAb/C,QAcI,OAdJ,UAcU4E,YAAUnM,IAAmB8H,IAdvC,QAeI,OAfJ,UAeUqE,YAAU/L,IAAkB2H,IAftC,QAgBI,OAhBJ,UAgBUoE,YAAUhM,IAAoB6H,IAhBxC,QAiBI,OAjBJ,UAiBUmE,YAAUlM,IAAoBmI,IAjBxC,QAkBI,OAlBJ,UAkBU+D,YAAUjM,IAAuBmI,IAlB3C,QAmBI,OAnBJ,UAmBU8D,YAAU7L,IAAsB2H,IAnB1C,QAoBI,OApBJ,UAoBUkE,YAAU5L,IAAuB2H,IApB3C,QAqBI,OArBJ,UAqBUiE,YAAU3L,IAAoB2H,IArBxC,QAsBI,OAtBJ,UAsBUgE,YAAU9L,IAA8BiI,IAtBlD,yCAyBeK,UC/dT+D,GAAcC,YAAgB,CAChCtO,mBACAW,mBACA4N,iBACAC,gBACAC,IAAKC,IACLC,KAAMC,MAKJC,GAAiBC,cAMjBC,GAAsC,qBAAXlI,QAA0BA,OAAOmI,sCAAyCC,IACrGC,GAAQC,YAAYd,GAAaU,GACnCK,YACIC,IACAR,MAIRA,GAAeS,IAAIhF,IAEJ4E,U,mECnCAK,gBAAe,CAC1BC,WAAY,CACRC,WAAY,CACR,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACFC,KAAK,KACPC,iBAAiB,EACjBzQ,MAAO,OACP0Q,GAAI,CACAC,SAAU,QAEdC,GAAI,CACAD,SAAU,UAEdE,GAAI,CACAF,SAAU,WAEdG,UAAW,CACPC,WAAY,MAIpBC,OAAQ,CACJC,QAAS,CACLC,UAAW,KAGnBlT,QAAS,CACLqF,KAAM,QACN8N,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,WAEVE,KAAMA,KACNC,QAAS,CACLH,KAAM,WAEVI,WAAY,UACZrD,MAAO,CACHiD,KAAM,WAEVK,kBAAmB,EACnBC,YAAa,GACbC,aAAc,OACdC,KAAM,CACFT,QAAS,W,mBC5CfU,GAAS,IAAIC,KAAa,CAC5BC,IAAK,aAITC,IAASC,OACL,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAqBJ,OAAQA,IACzB,kBAAC,KAAD,CAAU7B,MAAOA,IACb,kBAAC,oBAAD,CAAkBkC,SAAU,EAAGC,aAAc,CAACC,SAAU,SAAUC,WAAY,SAAWC,iBAAkB,KACvG,kBAACC,GAAA,EAAD,CAAe1U,MAAOA,IAClB,kBAAC2U,EAAA,EAAD,WAKTC,SAASC,eAAe,SLqGjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjK,MAAK,SAAAkK,GACJA,EAAaC,gBAEdC,OAAM,SAAA7E,GACL8E,QAAQ9E,MAAMA,EAAMrK,a,oDMzIfoP,EAAsB,SAACjG,EAAmBkG,EAAiBC,EAAqBC,GACzF,OAAOpG,EAAMqG,KAAI,SAAAC,GACb,OAAIA,EAAKH,KAAiBD,EACf,eAAII,EAAX,GAAoBF,GAEjBE,M,wICDR,IAAMvE,EAAe,qBACfC,EAAiB,uBACjBC,EAAsB,4BAU7BhM,EAAe,CACjB+C,MAAO,GACPwC,SAAU,GACV+K,gBAAiB,GACjBhL,YAAa,EACbiL,WAAW,EACXC,iBAAkB,GAClBC,YAAa,MAyCJ/H,EAAe,CACzBI,SAAU,SAAC/F,GAAD,MAA6B,CAAC5C,KAxDlB,kBAwDmC4C,UACzD6F,QAAS,SAAC8H,GAAD,MAAmB,CAACvQ,KAxDR,iBAwDwBuQ,SAC7C3H,mBAAoB,SAACrI,GAAD,MAAoB,CAACP,KAxDb,wBAwDoCO,UAChEuI,gBAAiB,SAACsH,GAAD,MAAyB,CAACpQ,KAxDb,0BAwDsCoQ,cACpEvH,uBAAwB,SAAC2H,EAAqBnQ,GAAtB,MAA0C,CAACL,KAxD7B,kCAwD8DwQ,aAAYnQ,WAChHqI,cAAe,SAAC+H,GAAD,MAAoB,CAACzQ,KAxDR,wBAwD+ByQ,UAC3D9G,aAAc,SAACxE,EAAqBC,EAAkBC,GAAxC,MAAgE,CAACrF,KAAM6L,EAAqB1G,cAAaC,WAAUC,eACjIqL,OAAQ,SAACrT,EAAYyM,GAAb,MAA+C,CAAC9J,KAAM2L,EAAcnK,OAAQ,SAAUnE,KAAIyM,wBAClG6G,SAAU,SAACtT,EAAYyM,GAAb,MAA+C,CAAC9J,KAAM4L,EAAgBpK,OAAQ,WAAYnE,KAAIyM,wBACxGxB,aAAc,SAACjI,GAAD,MAAqB,CAACL,KAnEV,sBAmE+BK,WACzDmI,eAAgB,SAACnI,GAAD,MAAqB,CAACL,KAnEV,wBAmEiCK,YAGjD2L,IAlDM,WAAwE,IAAvExO,EAAsE,uDAA9DqC,EAAc2B,EAAgD,uCACxF,OAAQA,EAAOxB,MACX,IAvBqB,sBAwBjB,OAAO,eACAxC,EADP,CAEIoF,MAAOiN,EAAoBrS,EAAMoF,MAAOpB,EAAOnB,OAAQ,KAAM,CAACuQ,UAAU,MAEhF,IA3BuB,wBA4BnB,OAAO,eACApT,EADP,CAEIoF,MAAOiN,EAAoBrS,EAAMoF,MAAOpB,EAAOnB,OAAQ,KAAM,CAACuQ,UAAU,MAEhF,IA/BiB,kBAgCb,OAAO,eAAIpT,EAAX,CAAkBoF,MAAOpB,EAAOoB,QACpC,IAhCgB,iBAiCZ,OAAO,eAAIpF,EAAX,CAAkB2H,YAAa3D,EAAO+O,OAC1C,IAjCuB,wBAkCnB,OAAO,eAAI/S,EAAX,CAAkB2S,gBAAiB3O,EAAOjB,QAC9C,IAlCyB,0BAmCrB,OAAO,eAAI/C,EAAX,CAAkB4S,UAAW5O,EAAO4O,YACxC,IAlCuB,wBAmCnB,OAAO,eAAI5S,EAAX,CAAkB8S,YAAa9O,EAAOiP,QAC1C,IArCiC,kCAsC7B,OAAO,eACAjT,EADP,CAEI6S,iBAAkB7O,EAAOgP,WAAP,sBACVhT,EAAM6S,kBADI,CACc7O,EAAOnB,SACnC7C,EAAM6S,iBAAiB5O,QAAO,SAAApE,GAAE,OAAIA,IAAOmE,EAAOnB,YAE9D,QACI,OAAO7C,K,oLCvDNwN,EAAa,kBACbS,EAAc,mBACdC,EAAe,oBAKtB7L,EAAe,CACjBQ,OAAQ,KACRsC,MAAO,KACPkD,MAAO,KACPtD,QAAQ,EACRsO,WAAY,KACZC,gBAAiB,MAsBR3I,EAAc,CACvBD,YAAa,SAAC7H,EAAuBsC,EAAsBkD,EAAsBtD,GAApE,MAAyF,CAClGvC,KAlCc,qBAkCOK,SAAQsC,QAAOkD,QAAOtD,WAE/C6F,cAAe,SAACyI,GAAD,MAAyB,CAAC7Q,KAnCrB,uBAmC4C6Q,eAChExI,mBAAoB,SAACyI,GAAD,MAA0C,CAAC9Q,KAnCrC,6BAmCkE8Q,oBAC5FnO,MAAO,SAACkD,EAAeC,EAAkBC,EAAqBC,GAAvD,MAAmF,CAAChG,KAAMyL,EAAa5F,QAAOC,WAAUC,aAAYC,YAC3IoF,OAAQ,SAACrK,GAAD,MAAmB,CAACf,KAAM0L,EAAc3K,aAErCkL,IA1BK,WAAuE,IAAtEzO,EAAqE,uDAA7DqC,EAAc2B,EAA+C,uCACtF,OAAQA,EAAOxB,MACX,IAjBc,qBAiBd,IACWK,EAAgCmB,EAAhCnB,OAAQsC,EAAwBnB,EAAxBmB,MAAOkD,EAAiBrE,EAAjBqE,MAAOtD,EAAUf,EAAVe,OAC7B,OAAO,eAAI/E,EAAX,CAAkB6C,SAAQsC,QAAOkD,QAAOtD,WAC5C,IAlBsB,6BAkBtB,IACWuO,EAAmBtP,EAAnBsP,gBACP,OAAO,eAAItT,EAAX,CAAkBsT,oBACtB,IAtBgB,uBAsBhB,IACWD,EAAcrP,EAAdqP,WACP,OAAO,eAAIrT,EAAX,CAAkBqT,eACtB,QACI,OAAOrT,K,gCC/BnB,0KAAO,IAAMiM,EAAmB,SAACjM,GAC7B,OAAOA,EAAMyO,YAAY5L,QAGhB0Q,EAAsB,SAACvT,GAChC,OAAOA,EAAMyO,YAAYtJ,OAGhBqO,EAAY,SAACxT,GACtB,OAAOA,EAAMyO,YAAY1J,QAGhB0O,EAAqB,SAACzT,GAC/B,OAAOA,EAAMyO,YAAY6E,iBAGhBI,EAAgB,SAAC1T,GAC1B,OAAOA,EAAMyO,YAAY4E,a,wHCjBhBrF,EAAiB,qBAUxB3L,EAAiC,CACnCsR,QAAQ,EACRC,cAAe,IAiCNnJ,EAAa,CACtBD,gBAAiB,SAACqJ,GACd,IAAMC,EAAMD,EAAa/H,SAAW+H,EAAa/H,QAAQgI,IACzD,MAAO,CACHtR,KAhDoB,uBAiDpBqR,aAAa,eAAKA,EAAN,CAAoBC,IAAKA,IAAO,IAAIC,MAAOC,UAAYC,KAAKC,aAGhFC,eAAgB,SAACL,GAAD,MAAe,CAACtR,KAnDL,sBAmD4BsR,QACvDjG,eAAgB,iBAAO,CAACrL,KAnDT,mBAoDf4R,cAAe,iBAAO,CAAC5R,KAAMwL,KAGlBW,IA3CI,WAAsE,IAArE3O,EAAoE,uDAA5DqC,EAAc2B,EAA8C,uCACpF,OAAQA,EAAOxB,MACX,IAdW,iBAeP,OAAO,eACAxC,EADP,CAEI2T,QAAQ,IAEhB,IArBwB,uBAsBpB,OAAO,eACA3T,EADP,CAEI4T,cAAc,GAAD,mBACN5T,EAAM4T,eADA,gBAGF5P,EAAO6P,kBAI1B,IA9BuB,sBA+BnB,OAAO,eACA7T,EADP,CAEI4T,cAAe5T,EAAM4T,cAAc3P,QAC/B,SAAA4P,GAAY,OAAIA,EAAaC,MAAQ9P,EAAO8P,SAGxD,QACI,OAAO9T,K,8VCxCblD,EAASC,aAAa,SAACC,GAAD,MAAmB,CAC3CqX,KAAK,aACD7W,QAAS,GACRR,EAAMsX,YAAYC,GAAG,MAAQ,CAC1BC,QAAS,OACT9W,eAAgB,WAChB+W,YAAa,KAGrBC,SAAS,aACLlX,QAAS,QACTI,MAAO,QACNZ,EAAMsX,YAAYK,KAAK,MAAQ,CAC5BC,aAAa,aAAD,OAAe5X,EAAMG,QAAQsT,KAAK,QAGtDoE,KAAK,aACD1V,MAAOnC,EAAMG,QAAQ4T,KAAKT,QAC1BwE,WAAY,SACZN,QAAS,OACT5W,MAAO,QACNZ,EAAMsX,YAAYK,KAAK,MAAQ,CAC5BnX,QAAS,QACT2B,MAAOnC,EAAMG,QAAQsT,KAAK,OAGlCsE,KAAK,aACDvX,QAASR,EAAMgY,QAAQ,GACvB7V,MAAOnC,EAAMG,QAAQC,OAAOC,MAC5B4X,WAAY,GACXjY,EAAMsX,YAAYK,KAAK,MAAQ,CAC5BxV,MAAOnC,EAAMG,QAAQsT,KAAK,KAC1BgE,YAAa,IAGrBS,KAAK,eACAlY,EAAMsX,YAAYK,KAAK,MAAQ,CAC5B7E,SAAU,WAGlBqF,WAAY,CACRC,cAAe,OACf,wBAAyB,CACrBlY,gBAAiBF,EAAMG,QAAQmT,QAAQ+E,OAE3C,mBAAmB,eACdrY,EAAMsX,YAAYK,KAAK,MAAQ,CAC5BxV,MAAOnC,EAAMG,QAAQmT,QAAQ+E,SAIzCC,QAAS,CACLpY,gBAAiBF,EAAMG,QAAQmT,QAAQ+E,WCgEhCE,ED5DA1X,YAAWf,EAAQ,CAACgB,WAAW,GC4D/ByX,EAhG4B,SAAC,GAAmE,IAAlEhU,EAAiE,EAAjEA,iBAAkBsB,EAA+C,EAA/CA,OAAQ2S,EAAuC,EAAvCA,iBAAkBzQ,EAAqB,EAArBA,OAAQzG,EAAa,EAAbA,QACvFmX,EAAQ,CACV,CACI5V,GAAI,EACJkR,KAAM,UACNpD,IAAKjJ,IAAGxE,QAAQ+E,QAAQpC,GACxBkS,KAAM,kBAAC,IAAD,OACP,CACClV,GAAI,EACJkR,KAAM,UACNpD,IAAKjJ,IAAG3D,QAAQkE,QAAQ,MACxB8P,KAAM,kBAAC,IAAD,OACP,CACClV,GAAI,EACJkR,KAAM,QACNpD,IAAKjJ,IAAGU,MAAMR,KACdmQ,KAAM,kBAAC,IAAD,QAIRW,EAAY,UACXD,EADW,CAEd,CACI5V,GAAI,EACJkR,KAAM,WACNpD,IAAKjJ,IAAGQ,SAASN,KACjBmQ,KAAM,kBAAC,IAAD,OAEV,CACIlV,GAAI,EACJkR,KAAM,SACNpD,IAAK,KACLoH,KAAM,kBAAC,IAAD,SAIVY,EAAiBpU,GAAoBA,EAAmB,EAE5D,OACI,kBAACqU,EAAA,EAAD,CAAM/W,UAAWP,EAAQ+V,MACrB,kBAACwB,EAAA,EAAD,CAAQC,QAAM,GACTL,EAAMhD,KAAI,gBAAE5S,EAAF,EAAEA,GAAIkR,EAAN,EAAMA,KAAMpD,EAAZ,EAAYA,IAAKoH,EAAjB,EAAiBA,KAAjB,OACP,kBAACgB,EAAA,EAAD,CAAUjC,IAAKjU,EAAIhB,UAAWP,EAAQoW,UAClC,kBAACsB,EAAA,EAAD,CAAMhR,UAAWiR,IAASC,GAAIvI,EAAKwI,gBAAiB7X,EAAQ6W,WAAYtW,UAAWP,EAAQuW,KACrFuB,UAAU,OAAOjX,MAAM,iBACzB,kBAACkX,EAAA,EAAD,CAAS/Y,MAAOyT,EAAMuF,aAAYvF,EAAMzS,QAAS,CAACgX,QAAShX,EAAQgX,UAC/D,kBAACiB,EAAA,EAAD,CAAYD,aAAYvF,EAAMlS,UAAWP,EAAQyW,MAC5CpH,IAAQjJ,IAAG3D,QAAQkE,QAAQ,OAAS0Q,EACjC,kBAACa,EAAA,EAAD,CAAOC,aAAclV,EAAkBmV,IAAK,GAAIvX,MAAM,aACjD4V,GACMA,UASvC,kBAACc,EAAA,EAAD,CAAQc,MAAI,GACPjB,EAAajD,KAAI,YAA4B,IAA1B5S,EAAyB,EAAzBA,GAAIkR,EAAqB,EAArBA,KAAMpD,EAAe,EAAfA,IAAKoH,EAAU,EAAVA,KAC3B,OAAW,IAAPlV,GAAakF,EAEb,kBAACgR,EAAA,EAAD,CAAUjC,IAAKjU,EAAIhB,UAAWP,EAAQoW,UAClC,kBAACsB,EAAA,EAAD,eAAMhR,UAAW2I,EAAMsI,IAAU,QACvBtI,EAAM,CACNuI,GAAIvI,EACJwI,gBAAiB7X,EAAQ6W,YACzB,GACO,IAAPtV,EAAW,CAACX,QAAS,kBAAMsW,GAAiB,KAAS,GAL/D,CAMM3W,UAAWP,EAAQuW,KACnBuB,UAAU,OACVjX,MAAM,kBAER,kBAACyX,EAAA,EAAD,CAAYxX,QAAQ,QAAQ4F,UAAU,OAC1BnG,UAAWgY,IAAW,uBAAwBvY,EAAQyW,OAC7DpH,IAAQjJ,IAAG3D,QAAQkE,QAAQ,OAAS0Q,EACjC,kBAACa,EAAA,EAAD,CAAOrX,MAAM,YAAYC,QAAQ,OAC5B2V,GACMA,GAGnB,kBAAC6B,EAAA,EAAD,CAAYxX,QAAQ,QAAQ4F,UAAU,OAAOnG,UAAWP,EAAQ4W,MAC3DnE,KAtBe,a,wECjFlDjU,EAASC,aAAa,SAACC,GAAD,MAAmB,CAC3CC,MAAO,CACH6Z,oBAAqB,EACrBC,qBAAsB,GAE1B1C,KAAM,CACF7W,QAAS,EACTN,gBAAiBF,EAAMG,QAAQC,OAAOC,OAE1C2Z,YAAa,CACT/B,WAAY,GAEhBgC,SAAU,CACN,UAAW,CACP/Z,gBAAiBF,EAAMG,QAAQmT,QAAQ+E,MACvClW,MAAQnC,EAAMG,QAAQC,OAAOC,MAE7B,2CAA4C,CACxC8B,MAAQnC,EAAMG,QAAQC,OAAOC,MAC7B6Z,eAAgB,UAI5BC,SAAU,CACRC,SAAU,IAEZvC,KAAM,CACF,UAAW,CACP3X,gBAAiBF,EAAMG,QAAQmT,QAAQ+E,MACvClW,MAAQnC,EAAMG,QAAQC,OAAOC,MAE7B,2CAA4C,CACxC8B,MAAQnC,EAAMG,QAAQC,OAAOC,MAC7B6Z,eAAgB,cCmCjBG,ED5BAxZ,YAAWf,EAAQ,CAACgB,WAAW,GC4B/BuZ,EA/C6B,SAAC,GAAgE,IAA/DxU,EAA8D,EAA9DA,OAAQjD,EAAsD,EAAtDA,YAAa0X,EAAyC,EAAzCA,SAAUhZ,EAA+B,EAA/BA,QAASkX,EAAsB,EAAtBA,iBAClF,OACI,kBAAC+B,EAAA,EAAD,CACI1X,GAAG,kBACHyX,SAAUA,EACVtZ,KAAM6I,QAAQyQ,GACd7Y,QAASmB,EACT4X,UAAW,GACXC,mBAAoB,KACpBnZ,QAAS,CACLrB,MAAOqB,EAAQrB,MACfoX,KAAM/V,EAAQ+V,MAElB/C,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBkG,gBAAiB,CACbnG,SAAU,MACVC,WAAY,WAGhB,kBAACmG,EAAA,EAAD,CAAU3S,UAAWiR,IAASC,GAAIxR,IAAGxE,QAAQ+E,QAAQpC,GAAShE,UAAWP,EAAQ2Y,SAAU/X,QAAS,kBAAMU,MAClG,0BAAMf,UAAWgY,IAAW,uBAAwBvY,EAAQ6Y,WACxD,kBAAC,IAAD,CAAmBrH,SAAS,WAEpC,kBAAC8G,EAAA,EAAD,CAAYxX,QAAQ,QAAQ4F,UAAU,OAAOnG,UAAWP,EAAQ0Y,aAAhE,YAEJ,kBAACY,EAAA,EAAD,CAASC,YAAY,aAAaxC,OAAO,IACzC,kBAACsC,EAAA,EAAD,CAAU3S,UAAWiR,IAASC,GAAIxR,IAAGQ,SAASN,KAAM/F,UAAWP,EAAQ2Y,SAAU/X,QAAS,kBAAMU,MACvF,0BAAMf,UAAWgY,IAAW,uBAAwBvY,EAAQ6Y,WACzD,kBAAC,IAAD,CAAiBrH,SAAS,WAElC,kBAAC8G,EAAA,EAAD,CAAYxX,QAAQ,QAAQ4F,UAAU,OAAOnG,UAAWP,EAAQ0Y,aAAhE,iBAEJ,kBAACY,EAAA,EAAD,CAASC,YAAY,aAAaxC,OAAO,IAEzC,kBAACsC,EAAA,EAAD,CAAU9Y,UAAWP,EAAQ2Y,SAAU/X,QAAS,WAAOsW,GAAiB,GAAO5V,MAC3E,kBAACkY,EAAA,EAAD,CAAcjZ,UAAWP,EAAQ6Y,UAC7B,kBAAC,IAAD,CAAerH,SAAS,WAE5B,kBAACiI,EAAA,EAAD,CAAczZ,QAAS,CAACgS,QAAShS,EAAQ0Y,aAAc1G,QAAQ,gBC9DzExT,EAASC,aAAa,SAACC,GAAD,MAAmB,CAC3Cgb,OAAQ,CACJxD,QAAS,OACTM,WAAY,SACZmD,YAAa,GACbC,aAAc,GACdC,cAAe,QAEnBC,WAAY,CACR3D,YAAa,IAEjB4D,UAAW,CACPJ,YAAa,GACbC,aAAc,GACd/Y,MAAOnC,EAAMG,QAAQC,OAAOC,OAGhCib,WAAY,CACR9a,QAAS,SAGb+a,WAAY,CACR,WAAY,CACRC,UAAW,iBACXC,WAAY,oBCuCTC,EDlCA7a,YAAWf,EAAQ,CAACgB,WAAW,GCkC/B4a,EA/C6B,SAAC,GAAyE,IAAxE3T,EAAuE,EAAvEA,OAAQI,EAA+D,EAA/DA,MAAOmO,EAAwD,EAAxDA,gBAAiBzQ,EAAuC,EAAvCA,OAAQ2S,EAA+B,EAA/BA,iBAAkBlX,EAAa,EAAbA,QAAa,EACjFkG,IAAMmU,SAA6B,MAD8C,mBAC1GrB,EAD0G,KAChGsB,EADgG,KAE3GZ,EAAS1E,GAAoBA,EAAgBrN,OAAO4S,MAAQvF,EAAgBrN,OAAO4S,MAAQC,IAUjG,OACI,oCAEQ/T,GACA,oCACI,kBAAC9F,EAAA,EAAD,CACIJ,UAAWP,EAAQ0Z,OACnB7Y,MAAM,UACND,QAhBA,SAAC6Z,GACjBH,EAAYG,EAAMC,gBAgBFC,gBAAc,kBACdC,gBAAc,QAEd,kBAACC,EAAA,EAAD,CAAQC,IAAKpB,EAAQqB,IAAKlU,GAAgB,SAAUmU,MAAM,KAAKhb,QAAS,CAACib,KAAMjb,EAAQ8Z,cACvF,kBAACvC,EAAA,EAAD,CAAQ2D,QAAM,GACV,kBAAC5C,EAAA,EAAD,CAAYxX,QAAQ,QAAQP,UAAWP,EAAQga,YAC1ChF,GAAmBA,EAAgBmG,SAAWnG,EAAgBmG,SAAWtU,IAGlF,kBAAC,IAAD,CAAuB2K,SAAS,QAAQjR,UAAS,UAAKP,EAAQia,WAAb,YAA2BjB,EAAW,SAAU,OAErG,kBAAC,EAAD,CAAS9B,iBAAkBA,EAAkB3S,OAAQA,EAAQjD,YAxBzD,WAChBgZ,EAAY,OAuBuFtB,SAAUA,MAKpGvS,GACD,kBAACiR,EAAA,EAAD,CAAMhR,UAAWiR,IAASC,GAAIxR,IAAGS,MAAMP,KAAM/F,UAAWP,EAAQ+Z,WAAhE,a,UCtDVvb,GAASC,aAAa,SAACC,GAAD,MAAmB,CAC3CqX,KAAM,CACFzW,MAAO,KAEX8b,WAAY,CACRjF,YAAa,EACbjX,QAASR,EAAMgY,QAAQ,IAE3B/X,MAAO,CACHC,gBAAiBF,EAAMG,QAAQC,OAAOC,OAE1Csc,KAAM,CACFnF,QAAS,OACTM,WAAY,SACZpX,eAAgB,SAChBuX,WAAY,EACZ/X,gBAAiBF,EAAMG,QAAQmT,QAAQC,KACvCqJ,OAAQ,IAEZC,QAAS,CACLD,OAAQ,QCiCDE,GD7BAjc,YAAWf,GAAQ,CAACgB,WAAW,GC6B/Bgc,EA/CmB,SAAC,GAAyB,IAAxB7b,EAAuB,EAAvBA,SAAUK,EAAa,EAAbA,QAAa,EAC/BkG,IAAMmU,UAAS,GADgB,mBAChD3a,EADgD,KAC1C+b,EAD0C,KAGjDC,EAAe,SAAChc,GAAD,OAAmB,SAAC+a,KACjCA,GAAwB,YAAfA,EAAMvW,MAA8D,QAAtCuW,EAA8BjF,KAAwD,UAAtCiF,EAA8BjF,MAGzHiG,EAAQ/b,KAGZ,OACI,oCACI,kBAACuY,EAAA,EAAD,CACIpX,MAAM,UACNmX,aAAW,cACXpX,QAAS8a,GAAa,GACtBC,KAAK,MACLpb,UAAWP,EAAQob,YAElB1b,EAAO,kBAAC,IAAD,CAAkB8R,SAAS,UAAY,kBAAC,IAAD,CAAUA,SAAS,WAGtE,kBAACoK,GAAA,EAAD,CACIlc,KAAMA,EACNS,QAASub,GAAa,GACtBG,OAAQH,GAAa,GACrBI,OAAO,OACP9b,QAAS,CACLrB,MAAOqB,EAAQrB,QAGnB,yBACI4B,UAAWP,EAAQ+V,KACnBgG,KAAK,eACLnb,QAAS8a,GAAa,GACtBM,UAAWN,GAAa,IAExB,kBAAC,IAAD,CAAS9D,GAAIxR,IAAGC,KAAKC,KAAM/F,UAAWP,EAAQqb,MAC1C,yBAAKP,IAAKmB,IAASlB,IAAI,GAAGxa,UAAWP,EAAQub,WAEhD5b,QC9CfnB,GAASC,aAAa,SAACC,GAAD,MAAmB,CAC3Cwd,KAAM,CACFhG,QAAS,QAEbiG,OAAQ,CACJC,OAAQ1d,EAAM0d,OAAOC,OAAS,EAC9Bxb,MAAOnC,EAAMG,QAAQC,OAAOC,OAEhCud,QAAS,CACLC,SAAU,EACVrd,QAASR,EAAMgY,QAAQ,IAE3B8F,KAAM,CACFtG,QAAS,OACTM,WAAY,SACZ8E,OAAQ,OACR3E,WAAY,GAEhBsF,QAAQ,aACJX,OAAQ,IACP5c,EAAMsX,YAAYC,GAAG,MAAQ,CAC1BqF,OAAQ,KAGhBmB,UAAW,CACPvd,QAASR,EAAMgY,QAAQ,IAE3BgG,QAAS,CACLxd,QAASR,EAAMgY,QAAQ,GACvB7V,MAAOnC,EAAMG,QAAQC,OAAOC,MAC5B6S,WAAY,KAEhB+K,YAAa,CACTzG,QAAS,OACTM,WAAY,SACZpX,eAAgB,WAChBkc,OAAQ,QAEZ5B,OAAQ,CACJxD,QAAS,OACTM,WAAY,SACZmD,YAAa,GACbC,aAAc,GACdC,cAAe,QAEnBG,WAAY,CACR9a,QAAS,aC4BF0d,GDxBArd,YAAWf,GAAQ,CAACgB,WAAW,GCwB/Bod,EAlD4B,SAAC,GAA2F,IAA1FrY,EAAyF,EAAzFA,OAAQsC,EAAiF,EAAjFA,MAAOJ,EAA0E,EAA1EA,OAAQxD,EAAkE,EAAlEA,iBAAkB+R,EAAgD,EAAhDA,gBAAiBkC,EAA+B,EAA/BA,iBAAkBlX,EAAa,EAAbA,QACrH,OACI,kBAAC6c,EAAA,EAAD,CAAQC,SAAS,QAAQpW,UAAU,SAASnG,UAAWP,EAAQmc,QAC3D,kBAACY,EAAA,EAAD,CAAW1c,SAAS,MAChB,kBAAC2c,EAAA,EAAD,CAASlc,QAAQ,QAAQmc,gBAAc,GACnC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC5c,UAAWP,EAAQkc,KAAMxF,QAAS,GAC9C,kBAACwG,EAAA,EAAD,CAAM9I,MAAI,EAACgJ,GAAI,EAAGC,GAAI,GAClB,yBAAK9c,UAAWP,EAAQwc,MACpB,kBAAC,IAAD,CAAS5E,GAAIxR,IAAGC,KAAKC,MACb,yBAAKwU,IAAKmB,IAASlB,IAAI,GAAGxa,UAAWP,EAAQic,aAI7D,kBAACiB,EAAA,EAAD,CAAM9I,MAAI,EAACgJ,GAAI,EAAGC,GAAI,GAClB,yBAAK9c,UAAWP,EAAQ2c,aACpB,kBAACpF,EAAA,EAAD,CAAQC,QAAM,GACV,kBAAC,EAAD,CACI/Q,OAAQA,EACRxD,iBAAkBA,EAClBsB,OAAQyQ,EAAkBA,EAAgBzQ,OAAS,KACnD2S,iBAAkBA,IAEtB,kBAACoC,EAAA,EAAD,CACIC,YAAY,WACZ+D,UAAQ,EACRvG,OAAO,IACX,kBAAC,EAAD,CAASlQ,MAAOA,EAAOqQ,iBAAkBA,EAAkBzQ,OAAQA,EAC1DuO,gBAAiBA,EAAiBzQ,OAAQA,IACnD,kBAAC+U,EAAA,EAAD,CAASC,YAAY,WAAW+D,UAAQ,EAACvG,OAAO,KAGpD,kBAACQ,EAAA,EAAD,CAAQc,MAAI,GACR,kBAAC,GAAD,KACI,kBAAC,EAAD,CACI5R,OAAQA,EACRyQ,iBAAkBA,EAClBjU,iBAAkBA,EAClBsB,OAAQyQ,EAAkBA,EAAgBzQ,OAAS,kB,wDCqBxF+K,GAAUjD,KAAViD,OACA7J,GAA2BzB,KAA3ByB,wBAEQmL,eACX2M,aAdoB,SAAC7b,GACrB,MAAO,CACH6C,OAAQoJ,aAAiBjM,GACzBmF,MAAOoO,aAAoBvT,GAC3B+E,OAAQyO,aAAUxT,GAClBuB,iBAAkBD,aAAoBtB,GACtCsT,gBAAiBG,aAAmBzT,MAQ6D,CAAC4N,UAAQ7J,6BAC9G+X,gBACAC,IAHW7M,EApDwB,SAAC,GAA0E,IAAzE1E,EAAwE,EAAxEA,gBAAiBzG,EAAuD,EAAvDA,wBAAyB6J,EAA8B,EAA9BA,OAAQ/K,EAAsB,EAAtBA,OAAWmZ,EAAW,iFACzDrD,oBAAS,GADgD,mBACtGsD,EADsG,KAClFC,EADkF,KAEzG3Y,EAAU4Y,cAEdC,qBAAU,WACNzP,GAAO0P,GAAG,eAAe,SAACC,GACnBA,EAAIC,cAAgB1Z,IACnBkB,IACAyG,EAAgB,oBAAD,OAAqB8R,EAAIE,WAAzB,aAAgD,CAACpd,QAAS,gBAGjFuN,GAAO0P,GAAG,kBAAkB,SAACI,GACtBA,EAAarP,UAAYvK,GACxBkB,SAGT,CAAClB,IAEJ,IAAM2S,EAAmB,SAACxX,GACtBke,EAAsBle,IAO1B,OACI,oCACI,kBAAC,GAAD,iBAAYge,EAAZ,CAAmBnZ,OAAQA,EAAQ2S,iBAAkBA,KACrD,kBAACjW,GAAA,EAAD,CACIC,OAAQyc,EACRxc,WAAY+V,EACZ9V,cAVU,WAClBkO,EAAOrK,MAUE,OCvDFmZ,GAVM,SAACC,GAClB,OAAO,SAACX,GACJ,OACI,kBAAC,WAAD,CAAUY,SAAU,kBAACC,EAAA,EAAD,CAAWC,eAAe,KAC3C,kBAACH,EAAqBX,MCLxBe,GAAe,SAAC/c,GACzB,OAAOA,EAAM0O,IAAIiF,Q,4BCEjBqJ,GAAY,GAkDDC,GAhDE,WACb,IAAMC,EAAWC,cACXvJ,EAAgBwJ,aAAY,SAAAjO,GAAK,OAAIA,EAAMT,IAAIkF,eAAiB,MAFnD,EAGsByJ,yBAAlC7S,EAHY,EAGZA,gBAAiB8S,EAHL,EAGKA,cA0CxB,OAhCA9Y,IAAM4X,WAAU,WACZxI,EAAc2J,SAAQ,YAAsD,IATxD1d,EASIiU,EAAmD,EAAnDA,IAAK7Q,EAA8C,EAA9CA,QAA8C,IAArC6I,eAAqC,MAA3B,GAA2B,MAAvB0R,eAAuB,SAGnEF,EAAcxJ,GAKdkJ,GAAUS,SAAS3J,KAGvBtJ,EAAgBvH,EAAD,cACX6Q,OACGhI,EAFQ,CAGXrN,QAAS,SAACsa,EAAO2E,EAAQC,GACjB7R,EAAQrN,SACRqN,EAAQrN,QAAQsa,EAAO2E,EAAQC,IAGvCC,SAAU,SAAC7E,EAAO4E,GAxBN,IAAC9d,EA0BTqd,EAASzS,IAAW0J,eAAewJ,IA1B1B9d,EA2BO8d,EA1B5BX,GAAS,aAAOA,GAAU/Y,QAAO,SAAA6P,GAAG,OAAIjU,IAAOiU,UAL3BjU,EAoCDiU,EAnCnBkJ,GAAS,uBAAOA,IAAP,CAAkBnd,UAqC5B,CAAC+T,EAAe0J,EAAe9S,EAAiB0S,IAE5C,MCvCIW,GAVA,WACb,OAAO,4BAAQhf,UAAU,SAASif,MAAO,CAACnN,WAAY,YACpD,kBAAC0K,EAAA,EAAD,CAAW1c,SAAS,MAClB,yBAAKmf,MAAO,CAAC3e,MAAO,OAAQ3B,QAAS,QAASsS,SAAU,KAAxD,yCCJAhT,GAASC,aAAa,SAACC,GAAD,MAAmB,CAC3Cuc,KAAM,CACF/E,QAAS,QAEboG,QAAS,CACLC,SAAU,EACVrG,QAAS,OACTuJ,cAAe,UAGnB3N,QAASpT,EAAMmT,OAAOC,YAGXvS,eAAWf,GAAQ,CAACgB,WAAW,I,wDCIvC,IAAM6O,GAASqR,OAahBrM,G,2MAMFsM,YAAc,SAACC,GACX,EAAKlC,MAAMxR,gBAAX,UAA8B0T,EAAER,QAAU,CAACte,QAAS,W,mFALpD+e,KAAKnC,MAAM5H,gBACXtN,OAAOsX,iBAAiB,qBAAsBD,KAAKF,e,6CAQnDnX,OAAOuX,oBAAoB,qBAAsBF,KAAKF,e,+BAGhD,IAAD,SACqBE,KAAKnC,MAAxB1d,EADF,EACEA,QACP,OAFK,EACWqV,OAKZ,oCACI,kBAAC,GAAD,MACA,kBAAC2K,GAAA,EAAD,MACA,kBAAC,GAAD,MACA,kBAACjD,EAAA,EAAD,CAAW1c,SAAS,KAAKqG,UAAU,OAAOnG,UAAWP,EAAQsc,SACzD,yBAAK/b,UAAWP,EAAQ8R,UACxB,kBAAC,IAAD,KACKmO,OAAOC,QAAQ9Z,KAAI+N,KAAI,YAAmB,IAAD,mBAAhBqB,EAAgB,KAAX2K,EAAW,KAC/B7Z,EAAoD6Z,EAApD7Z,KAD+B,EACqB6Z,EAA9C5Z,aADyB,WACqB4Z,EAAjC3Z,gBADY,MACH,KADG,EACc4Z,EAAOD,EAAlBzZ,UACnC2Z,EAAe7Z,EAAWA,EAAS,EAAKkX,MAAMjX,QAAU,GACxD6Z,EAAiB9Z,EAAW,kBAAC,IAAD,CAAUoR,GAAIyI,IAAkBjC,GAAagC,GAC/E,OACI,kBAAC,IAAD,CACI5K,IAAKA,EACLlP,KAAMA,EACNC,MAAOA,GAEN+Z,QAMrB,kBAAC,GAAD,OA1BG,kBAAC/B,EAAA,EAAD,CAAWC,eAAe,Q,GAjB3B+B,aAwDH3P,gBACX4P,GACAhD,gBACAD,aAVoB,SAAC7b,GACrB,MAAO,CACH2T,OAAQoJ,GAAa/c,GACrB+E,OAAQyO,aAAUxT,MAO6E,CAACoU,cAAe3J,IAAW2J,gBAC9H2H,IAJW7M,CAKbyC,K,8EC3FI7U,EAASC,aAAa,SAACC,GAAD,MAAmB,CAC3C+hB,UAAW,CACP3D,SAAU,WACV4D,IAAK,EACLC,KAAM,EACNC,MAAO,EACP1K,QAAS,OACTM,WAAY,SACZpX,eAAgB,SAChBiT,WAAY,yBACZ+J,OAAQ,EACRyE,OAAQ,OAIDthB,cAAWf,EAAQ,CAACgB,WAAW,ICK/BshB,OAb+B,SAAC,GAA8B,IAA7BtC,EAA4B,EAA5BA,cAAexe,EAAa,EAAbA,QAC3D,OAAKwe,EAID,yBAAKje,UAAWP,EAAQygB,WACnBjC,GACG,kBAACuC,EAAA,EAAD,CAAkBlgB,MAAM,eALzB,U","file":"static/js/main.b62e80a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0a470749.png\";","module.exports = __webpack_public_path__ + \"static/media/user-placeholder.f4e91123.png\";","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    paper: {\n        backgroundColor: theme.palette.common.white,\n    },\n    title: {\n        textAlign: 'center',\n        padding: '16px 24px 8px'\n    },\n    buttons: {\n        justifyContent: 'space-between',\n        padding: '8px 24px 16px'\n    },\n    btn: {\n        width: '48%'\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {\n    DialogTitle,\n    Dialog,\n    DialogContent,\n    DialogActions,\n    DialogProps,\n    Button, WithStyles,\n} from '@material-ui/core';\nimport withSimpleDialogStyles from \"./simpleDialogStyles\";\nimport {CheckCircleOutlineOutlinedIcon, CancelOutlinedIcon} from \"../../Icons/MeterialIcons\";\n\ntype PropsType = {\n    open: boolean,\n    title: string,\n    resetAction: () => void,\n    submitAction: any,\n    submitName?: string,\n    submitDisabled?: boolean,\n    rest?: any\n}\n\nconst SimpleDialogTemplate: FC<DialogProps & PropsType & WithStyles> = ({open, title, children, submitAction, resetAction, submitName, submitDisabled, classes, ...rest}) => {\n    return (\n        <Dialog\n            open={open}\n            onClose={resetAction}\n            fullWidth\n            maxWidth=\"xs\"\n            {...rest}\n            classes={{\n                paper: classes.paper\n            }}>\n            <DialogTitle className={classes.title}>{title}</DialogTitle>\n            <DialogContent>\n                {children}\n            </DialogContent>\n            <DialogActions className={classes.buttons} disableSpacing>\n                <Button\n                    onClick={submitAction}\n                    className={classes.btn}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    startIcon={<CheckCircleOutlineOutlinedIcon/>}\n                    {...(submitDisabled ? {disabled:submitDisabled} : {})}\n                >\n                   {submitName ? submitName : 'Confirm'}\n                </Button>\n                <Button\n                    onClick={resetAction}\n                    className={classes.btn}\n                    color=\"secondary\"\n                    variant=\"contained\"\n                    startIcon={<CancelOutlinedIcon/>}\n                >\n                    Cancel\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default withSimpleDialogStyles(SimpleDialogTemplate);","import React, {FC} from 'react';\nimport {Typography} from '@material-ui/core';\nimport {PostsData_posts} from \"../../../server/types/PostsData\";\nimport {OpenPostDialogType} from \"../../../redux/reducers/types\";\nimport SimpleDialogTemplate from './SimpleDialogTemplate';\n\ntype PropsType = {\n    isOpen: boolean,\n    openDialog: (isOpen: boolean,  type: OpenPostDialogType, selectedItem: PostsData_posts | null) => void,\n    itemToConfirm?: PostsData_posts,\n    confirmAction: any,\n}\n\nconst ConfirmDialog: FC<PropsType> = ({isOpen, openDialog, confirmAction, itemToConfirm, children}) => {\n    const handleClose = () => {\n        openDialog(false, 'confirm', null);\n    };\n\n    const confirmActionSubmit = () => {\n        itemToConfirm ? confirmAction(itemToConfirm.id) : confirmAction();\n        handleClose();\n    };\n    return (\n        <SimpleDialogTemplate\n            open={isOpen}\n            resetAction={handleClose}\n            submitAction={confirmActionSubmit}\n            aria-labelledby=\"delete-post-dialog\"\n            title=\"Are you sure?\"\n        >\n            {children ? children :\n                <Typography variant=\"body2\">\n                    {children ? children : 'If you click \\'CONFIRM\\' the element will be removed from database.'}\n                </Typography>\n            }\n\n        </SimpleDialogTemplate>\n    );\n};\n\nexport default ConfirmDialog;","import {AppStateType} from \"../redux-store\";\n\nexport const getProfile = (state: AppStateType) => {\n    return state.profileReducer.profile\n};\n\nexport const getProfileError = (state: AppStateType) => {\n    return state.profileReducer.profileError\n};\n\nexport const getProfileIsLoading = (state: AppStateType) => {\n    return state.profileReducer.profileIsLoading\n};\n\nexport const getIsFollowed = (state: AppStateType) => {\n    return state.profileReducer.isFollowed\n};\n\nexport const getStatus = (state: AppStateType) => {\n    return state.profileReducer.status\n};\n","import {AppStateType} from \"../redux-store\";\n\nexport const getMessagesList = (state: AppStateType) => {\n    return state.dialogsReducer.messages\n};\n\nexport const getDialogsList = (state: AppStateType) => {\n    return state.dialogsReducer.dialogs\n};\n\nexport const getLastUserActivityDate = (state: AppStateType) => {\n    return state.dialogsReducer.lastUserActivityDate\n};\n\nexport const getDeletedMessages = (state: AppStateType) => {\n    return state.dialogsReducer.deletedMessages\n};\n\nexport const getSpamedMessages = (state: AppStateType) => {\n    return state.dialogsReducer.spamedMessages\n};\n\nexport const getNewMessagesCount = (state: AppStateType) => {\n    return state.dialogsReducer.newMessagesCount\n};\n\nexport const getSelectedFriend = (state: AppStateType) => {\n    return state.dialogsReducer.selectedFriend\n};\n\nexport const getMessagesLoading = (state: AppStateType) => {\n    return state.dialogsReducer.messagesLoading\n};\n","import {DialogsType, MessagesType, ProfileType} from \"./types\";\nimport {InferActionsTypes} from \"../redux-store\";\n\nexport const GET_DIALOGS_ASYNC = 'dialogs/GET_DIALOGS_ASYNC';\nexport const GET_MESSAGES_ASYNC = 'dialogs/GET_MESSAGES_ASYNC';\nexport const UPDATE_MESSAGES_ASYNC = 'dialogs/UPDATE_MESSAGES_ASYNC';\nexport const SEND_MESSAGE_ASYNC = 'dialogs/SEND_MESSAGE_ASYNC';\nexport const START_CHAT_ASYNC = 'dialogs/START_CHAT_ASYNC';\nexport const GET_NEW_MESSAGES_COUNT_ASYNC = 'dialogs/GET_NEW_MESSAGES_COUNT_ASYNC';\nexport const DELETE_MESSAGE_ASYNC = 'dialogs/DELETE_MESSAGE_ASYNC';\nexport const RESTORE_MESSAGE_ASYNC = 'dialogs/RESTORE_MESSAGE_ASYNC';\nexport const SPAM_MESSAGE_ASYNC = 'dialogs/SPAM_MESSAGE_ASYNC';\n\nexport const SET_DIALOGS = 'dialogs/SET_DIALOGS';\nexport const SET_MESSAGES = 'dialogs/SET_MESSAGES';\nexport const SET_NEW_MESSAGES_COUNT = 'dialogs/SET_NEW_MESSAGES_COUNT';\nexport const SET_ACTIVITY_DATE = 'dialogs/SET_ACTIVITY_DATE';\nexport const ADD_MESSAGE = 'dialogs/ADD_MESSAGE';\nexport const ADD_MESSAGE_TO_DELETED = 'dialogs/ADD_MESSAGE_TO_DELETED';\nexport const RESTORE_FROM_SPAM_DELETED = 'dialogs/RESTORE_FROM_SPAM_DELETED';\nexport const ADD_MESSAGE_TO_SPAM = 'dialogs/ADD_MESSAGE_TO_SPAM';\nexport const SET_SELECTED_FRIEND = 'dialogs/SET_SELECTED_FRIEND';\nexport const SET_MESSAGES_LOADING = 'dialogs/SET_MESSAGES_LOADING';\n\nconst initialState = {\n    dialogs: [] as Array<DialogsType>,\n    messages: [] as Array<MessagesType>,\n    newMessagesCount: null as number | null,\n    lastUserActivityDate: null as string | null,\n    deletedMessages: [] as Array<string>,\n    spamedMessages: [] as Array<string>,\n    selectedFriend: null as ProfileType | null,\n    messagesLoading: false\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst dialogsReducer = (\n    state = initialState,\n    action: DialogsActionsTypes\n): InitialStateType => {\n\n    switch (action.type) {\n        case SET_DIALOGS:\n            return {...state, dialogs: action.dialogs};\n        case SET_MESSAGES:\n            return {...state, messages: action.messages};\n        case SET_MESSAGES_LOADING:\n            return {...state, messagesLoading: action.messagesLoading};\n        case SET_SELECTED_FRIEND:\n            return {...state, selectedFriend: action.selectedFriend};\n        case ADD_MESSAGE:\n            return {...state, messages: [...state.messages, action.message]};\n        case ADD_MESSAGE_TO_DELETED:\n            return {...state, deletedMessages: [...state.deletedMessages, action.messageId]};\n        case ADD_MESSAGE_TO_SPAM:\n            return {...state, spamedMessages: [...state.spamedMessages, action.messageId]};\n        case RESTORE_FROM_SPAM_DELETED:\n            return {\n                ...state,\n                deletedMessages: [...state.deletedMessages].filter(id => id !== action.messageId),\n                spamedMessages: [...state.spamedMessages].filter(id => id !== action.messageId)\n            };\n        case SET_NEW_MESSAGES_COUNT:\n            return {...state, newMessagesCount: action.count};\n        case SET_ACTIVITY_DATE:\n            let selectedUser = [...state.dialogs].find(dialog => dialog.id === Number(action.userId));\n            if (selectedUser !== undefined) {\n                return {...state, lastUserActivityDate: selectedUser.lastUserActivityDate};\n            } else {\n                return state;\n            }\n        default:\n            return state;\n    }\n};\n\nexport type DialogsActionsTypes = InferActionsTypes<typeof dialogActions>;\nexport const dialogActions = {\n    setMessagesLoading: (messagesLoading: boolean) => ({type: SET_MESSAGES_LOADING, messagesLoading} as const),\n    setDialogs: (dialogs: Array<DialogsType>) => ({type: SET_DIALOGS, dialogs} as const),\n    setSelectedFriend: (selectedFriend: ProfileType) => ({type: SET_SELECTED_FRIEND, selectedFriend} as const),\n    setMessages: (messages: Array<MessagesType>) => ({type: SET_MESSAGES, messages} as const),\n    setActivityDate: (userId: number) => ({type: SET_ACTIVITY_DATE, userId} as const),\n    setNewMessagesCount: (count: number) => ({type: SET_NEW_MESSAGES_COUNT, count} as const),\n    addMessage: (message: MessagesType) => ({type: ADD_MESSAGE, message} as const),\n    addMessageToDeleted: (messageId: string) => ({type: ADD_MESSAGE_TO_DELETED, messageId} as const),\n    addMessageToSpam: (messageId: string) => ({type: ADD_MESSAGE_TO_SPAM, messageId} as const),\n    restoreFromSpamDeleted: (messageId: string) => ({type: RESTORE_FROM_SPAM_DELETED, messageId} as const),\n    startChat: (userId: number, history: any) => ({type: START_CHAT_ASYNC, userId, history} as const),\n    sendMessage: (userId: number, message: string) => ({type: SEND_MESSAGE_ASYNC, userId, message} as const),\n    getMessages: (userId: number) => ({type: GET_MESSAGES_ASYNC, userId} as const),\n    updateMessages: (userId: number) => ({type: UPDATE_MESSAGES_ASYNC, userId} as const),\n    deleteMessage: (messageId: string) => ({type: DELETE_MESSAGE_ASYNC, messageId} as const),\n    restoreMessage: (messageId: string) => ({type: RESTORE_MESSAGE_ASYNC, messageId} as const),\n    spamMessage: (messageId: string) => ({type: SPAM_MESSAGE_ASYNC, messageId} as const),\n    getDialogs: () => ({type: GET_DIALOGS_ASYNC} as const),\n    requestNewMessagesCount: () => ({type: GET_NEW_MESSAGES_COUNT_ASYNC} as const),\n};\n\nexport default dialogsReducer;","export {default as MailIcon} from '@material-ui/icons/Mail';\nexport {default as PeopleAltIcon} from '@material-ui/icons/PeopleAlt';\nexport {default as HomeIcon} from '@material-ui/icons/Home';\nexport {default as SettingsIcon} from '@material-ui/icons/Settings';\nexport {default as ExitToAppIcon} from '@material-ui/icons/ExitToApp';\nexport {default as PersonRoundedIcon} from '@material-ui/icons/PersonRounded';\nexport {default as EditRoundedIcon} from '@material-ui/icons/EditRounded';\nexport {default as DeleteIcon} from '@material-ui/icons/Delete';\nexport {default as EditIcon} from '@material-ui/icons/Edit';\nexport {default as FacebookIcon} from '@material-ui/icons/Facebook';\nexport {default as LanguageIcon} from '@material-ui/icons/Language';\nexport {default as TwitterIcon} from '@material-ui/icons/Twitter';\nexport {default as InstagramIcon} from '@material-ui/icons/Instagram';\nexport {default as YouTubeIcon} from '@material-ui/icons/YouTube';\nexport {default as GitHubIcon} from '@material-ui/icons/GitHub';\nexport {default as AddAPhotoIcon} from '@material-ui/icons/AddAPhoto';\nexport {default as CheckCircleOutlineOutlinedIcon} from '@material-ui/icons/CheckCircleOutlineOutlined';\nexport {default as CancelOutlinedIcon} from '@material-ui/icons/CancelOutlined';\nexport {default as MoreVertIcon} from '@material-ui/icons/MoreVert';\nexport {default as FavoriteIcon} from '@material-ui/icons/Favorite';\nexport {default as PersonAddDisabledRoundedIcon} from '@material-ui/icons/PersonAddDisabledRounded';\nexport {default as PersonAddRoundedIcon} from '@material-ui/icons/PersonAddRounded';\nexport {default as EmailRoundedIcon} from '@material-ui/icons/EmailRounded';\nexport {default as SendIcon} from '@material-ui/icons/Send';\nexport {default as NotInterestedIcon} from '@material-ui/icons/NotInterested';\nexport {default as DoneOutlineIcon} from '@material-ui/icons/DoneOutline';\nexport {default as KeyboardBackspaceIcon} from '@material-ui/icons/KeyboardBackspace';\nexport {default as InputIcon} from '@material-ui/icons/Input';\nexport {default as ExpandMoreRoundedIcon} from '@material-ui/icons/ExpandMoreRounded';\nexport {default as AccountCircleIcon} from '@material-ui/icons/AccountCircle';\nexport {default as SearchIcon} from '@material-ui/icons/Search';\nexport {default as ListAltOutlinedIcon} from '@material-ui/icons/ListAltOutlined';\nexport {default as AssignmentOutlinedIcon} from '@material-ui/icons/AssignmentOutlined';\nexport {default as MenuIcon} from '@material-ui/icons/Menu';\nexport {default as CloseRoundedIcon} from '@material-ui/icons/CloseRounded';\nexport {default as CreateOutlinedIcon} from '@material-ui/icons/CreateOutlined';","import React, {ComponentType} from \"react\";\nconst ProfileContainer = React.lazy(() => import(/* webpackChunkName: \"ProfileContainer\" */\"./components/Profile/ProfileContainer\"));\nconst MessagesContainer = React.lazy(() => import(/* webpackChunkName: \"MessagesContainer\" */\"./components/Messages/MessagesContainer\"));\nconst LoginContainer = React.lazy(() => import(/* webpackChunkName: \"LoginContainer\" */\"./components/Login/LoginContainer\"));\nconst UsersContainer = React.lazy(() => import(/* webpackChunkName: \"UsersContainer\" */\"./components/Users/UsersContainer\"));\nconst NotFound = React.lazy(() => import(/* webpackChunkName: \"Music\" */\"./components/NotFound/NotFound\"));\n\ntype RouteValueType = {\n    path: string,\n    redirect?:  (isAuth?: boolean) => string,\n    component?: ComponentType,\n    getPath?: any\n    exact?: boolean\n}\n\ntype RouteType = {\n    [key: string]: RouteValueType\n};\n\nconst RM:RouteType = {\n    home: {\n        path: '/',\n        exact: true,\n        redirect: (isAuth?: boolean) => {\n            return isAuth ? `/profile` : '/login'\n        },\n    },\n    profile: {\n        path: '/profile/:id?',\n        component: ProfileContainer,\n        exact: false,\n        getPath: (id: number | null) => {\n            return id ? `/profile/${id}` : '/profile'\n        },\n    },\n    settings: {\n        path: '/settings',\n        exact: true,\n        component: ProfileContainer,\n    },\n    dialogs: {\n        path: '/dialogs/:id?',\n        component: MessagesContainer,\n        getPath: (id: number | null) => {\n            return id ? `/dialogs/${id}` : '/dialogs'\n        }\n    },\n    login: {\n        path: '/login',\n        exact: true,\n        component: LoginContainer,\n    },\n    users: {\n        path: '/users',\n        exact: true,\n        component: UsersContainer,\n    },\n    notFound: {\n        path: '*',\n        exact: false,\n        component: NotFound,\n    },\n};\n\nexport default RM;","import {PhotosType, ProfileType} from \"./types\";\nimport {InferActionsTypes} from \"../redux-store\";\n\nexport const GET_STATUS_ASYNC = 'profile/GET_STATUS_ASYNC';\nexport const SET_STATUS_ASYNC = 'profile/SET_STATUS_ASYNC';\nexport const UPDATE_USER_PROFILE_ASYNC = 'profile/UPDATE_USER_PROFILE_ASYNC';\nexport const GET_USER_PROFILE_ASYNC = 'profile/GET_USER_PROFILE_ASYNC';\nexport const GET_IS_FOLLOWED_ASYNC = 'profile/GET_IS_FOLLOWED_ASYNC';\nexport const UPDATE_STATUS = 'profile/UPDATE_STATUS';\nexport const SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\nexport const SET_USER_PROFILE_FAILED = 'profile/SET_USER_PROFILE_FAILED';\nexport const LOAD_PHOTO_ASYNC = 'profile/LOAD_PHOTO_ASYNC';\nexport const SET_PHOTO = 'profile/SET_PHOTO';\nexport const TOGGLE_PROFILE_LOADING = 'profile/TOGGLE_PROFILE_LOADING';\nexport const SET_IS_FOLLOWED = 'profile/SET_IS_FOLLOWED';\n\nconst initialState = {\n    profile: null as ProfileType | null,\n    profileError: null as string | null,\n    status: '',\n    profileIsLoading: false,\n    isFollowed: false\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst profileReducer = (state = initialState, action: ProfileActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_PROFILE:\n            return {...state, profile: action.profile, profileError: null};\n        case TOGGLE_PROFILE_LOADING:\n            return {...state, profileIsLoading: action.profileIsLoading};\n        case SET_USER_PROFILE_FAILED:\n            return {...state, profile: null, profileError: action.profileError};\n        case UPDATE_STATUS:\n            return {...state, status: action.status};\n        case SET_PHOTO:\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType};\n        case SET_IS_FOLLOWED:\n            return {...state, isFollowed: action.isFollowed};\n        default:\n            return state;\n    }\n};\n\nexport type ProfileActionsTypes = InferActionsTypes<typeof profileActions>;\n\nexport const profileActions = {\n    toggleProfileLoading: (profileIsLoading: boolean) => ({type: TOGGLE_PROFILE_LOADING, profileIsLoading} as const),\n    setUserProfile: (profile: ProfileType) => ({type: SET_USER_PROFILE, profile} as const),\n    setUserProfileError: (profileError: string) => ({type: SET_USER_PROFILE_FAILED, profileError} as const),\n    setPhoto: (photos: PhotosType) => ({type: SET_PHOTO, photos} as const),\n    updateIsFollowed: (isFollowed: boolean) => ({type: SET_IS_FOLLOWED, isFollowed} as const),\n    setStatus: (status: string) => ({type: UPDATE_STATUS, status} as const),\n    getUserStatus: (id: number) => ({type: GET_STATUS_ASYNC, id} as const),\n    setUserStatus: (status: string) => ({type: SET_STATUS_ASYNC, status} as const),\n    updateProfileInfo: (info: ProfileType, userId: number) => ({type: UPDATE_USER_PROFILE_ASYNC, info, userId} as const),\n    getUserProfile: (id: number, updateCurrentUserInfo: boolean = false) => ({type: GET_USER_PROFILE_ASYNC, id, updateCurrentUserInfo} as const),\n    loadPhoto: (photo: any) => ({type: LOAD_PHOTO_ASYNC, photo} as const),\n    getIsUserFollowed: (id: number) => ({type: GET_IS_FOLLOWED_ASYNC, id} as const),\n};\n\nexport default profileReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\nimport {DialogsType, MessagesType, PhotosType, ProfileType} from \"../redux/reducers/types\";\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"0cd66f02-e607-46e0-aed7-5f9c57c49533\",\n        // \"API-KEY\": \"307f2912-e9c0-4353-94d4-d2c9532f00e0\"\n    }\n});\n\n\nexport enum ResultCodes {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCaptcha {\n    CaptchaRequired = 10\n}\n\ntype AuthResponseType = {\n    resultCode: ResultCodes\n    messages: Array<string>,\n    data: {\n        id: number,\n        email: string,\n        login: string\n    }\n}\ntype LoginResponseType = {\n    resultCode: ResultCodes | ResultCodeForCaptcha\n    messages: Array<string>,\n    data: {\n        userId: number,\n    }\n}\n\ntype WithoutDataResponseType = {\n    resultCode: ResultCodes\n    messages: Array<string>,\n    data: {}\n}\n\nexport const usersAPI = {\n    getUsers: (currentPage: number, pageSize: number, searchText: string) => {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}&term=${searchText}`)\n            .then(response => response.data);\n    },\n\n    isUserFollowed: (id: number) => {\n        return instance.get<string>(`follow/${id}`)\n            .then(response => response.data)\n    },\n\n    followUser: (id: number) => {\n        return instance.post<WithoutDataResponseType>(`follow/${id}`)\n            .then(response => response.data)\n    },\n\n    unfollowUser: (id: number) => {\n        return instance.delete<WithoutDataResponseType>(`follow/${id}`)\n            .then(response => response.data)\n    },\n\n};\n\n\nexport const authAPI = {\n    auth: () => {\n        return instance.get<AuthResponseType>('auth/me')\n            .then(response => response.data)\n    },\n\n    login: (email: string, password: string, rememberMe: boolean, captcha: null | string = null) => {\n        return instance.post<LoginResponseType>('/auth/login', {email, password, rememberMe, captcha})\n            .then(response => response.data)\n    },\n\n    logout: () => {\n        return instance.delete<WithoutDataResponseType>('/auth/login')\n            .then(response => response.data)\n    }\n};\n\ntype CaptchaResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptcha: () => {\n        return instance.get<CaptchaResponseType>('security/get-captcha-url')\n            .then(response => response.data)\n    }\n};\n\ntype LoadPhotoResponseType = {\n    data: {\n        photos: PhotosType,\n    }\n    resultCode: ResultCodes\n    messages: Array<string>,\n}\n\nexport const profileAPI = {\n    getProfile: (id: number) => {\n        return instance.get<ProfileType>(`profile/${id}`)\n            .then(response => response.data);\n    },\n\n    getStatus: (id: number) => {\n        return instance.get<string>(`profile/status/${id}`)\n            .then(response => response.data);\n    },\n\n    setStatus: (status: string) => {\n        return instance.put<WithoutDataResponseType>(`profile/status`, {status})\n            .then(response => response.data);\n    },\n\n    loadPhoto: (photoFile: any) => {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n        return instance.put<LoadPhotoResponseType>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n            .then(response => response.data);\n    },\n\n    updateProfileInfo: (info: ProfileType) => {\n        return instance.put<WithoutDataResponseType>(`profile`, info)\n            .then(response => response.data);\n    }\n};\n\ntype SendMessageResponseType = {\n    data: {\n        message: MessagesType\n    }\n    messages: Array<string>\n    resultCode: ResultCodes\n}\n\ntype GetMessagesResponseType = {\n    items: Array<MessagesType>\n    totalCount: number\n    error: null | string\n}\n\nexport const dialogsAPI = {\n    getDialogs: () => {\n        return instance.get<Array<DialogsType>>('dialogs')\n            .then(response => response.data)\n    },\n\n    startChat: (userId: number) => {\n        return instance.put<WithoutDataResponseType>(`dialogs/${userId}`)\n            .then(response => response.data)\n    },\n\n    sendMessage: (userId: number, message: string) => {\n        return instance.post<SendMessageResponseType>(`dialogs/${userId}/messages`, {body: message})\n            .then(response => response.data)\n    },\n\n    getMessages: (userId: number) => {\n        return instance.get<GetMessagesResponseType>(`dialogs/${userId}/messages`)\n            .then(response => response.data)\n    },\n\n    spamMessage: (messageId: string) => {\n        return instance.post<WithoutDataResponseType>(`dialogs/messages/${messageId}/spam`)\n            .then(response => response.data)\n    },\n\n    deleteMessage: (messageId: string) => {\n        return instance.delete<WithoutDataResponseType>(`dialogs/messages/${messageId}`)\n            .then(response => response.data)\n    },\n\n    //from deleted and spam\n    restoreMessage: (messageId: string) => {\n        return instance.put<WithoutDataResponseType>(`dialogs/messages/${messageId}/restore`)\n            .then(response => response.data)\n    },\n\n    newMessagesCount: () => {\n        return instance.get<number>('dialogs/messages/new/count')\n            .then(response => response.data)\n    }\n};","import {takeEvery, put, call, select} from 'redux-saga/effects';\nimport {authAPI, dialogsAPI, profileAPI, ResultCodeForCaptcha, ResultCodes, securityAPI, usersAPI} from \"../../api/api\";\nimport {\n    GET_USER_PROFILE_ASYNC,\n    LOAD_PHOTO_ASYNC,\n    GET_IS_FOLLOWED_ASYNC,\n    GET_STATUS_ASYNC,\n    SET_STATUS_ASYNC,\n    UPDATE_USER_PROFILE_ASYNC,\n    profileActions\n} from \"../reducers/profile-reducer\";\nimport {AUTH_ASYNC, authActions, LOGIN_ASYNC, LOGOUT_ASYNC,} from \"../reducers/auth-reducer\";\nimport {appActions, INIT_APP_ASYNC,} from \"../reducers/app-reducer\";\nimport {getCurrentUserId} from \"../reducers/auth-selectors\";\nimport {getProfile} from \"../reducers/profile-selectors\";\nimport {\n    FOLLOW_ASYNC,\n    REQUEST_USERS_ASYNC,\n    UNFOLLOW_ASYNC,\n    usersActions,\n} from \"../reducers/users-reducer\";\nimport {MessagesType, ProfileType} from \"../reducers/types\";\nimport {reset, stopSubmit} from \"redux-form\";\nimport {\n    DELETE_MESSAGE_ASYNC,\n    GET_DIALOGS_ASYNC,\n    GET_MESSAGES_ASYNC,\n    GET_NEW_MESSAGES_COUNT_ASYNC,\n    RESTORE_MESSAGE_ASYNC,\n    SEND_MESSAGE_ASYNC,\n    SPAM_MESSAGE_ASYNC,\n    START_CHAT_ASYNC,\n    dialogActions, UPDATE_MESSAGES_ASYNC\n} from \"../reducers/dialogs-reducer\";\nimport {socket} from \"../../App\";\nimport {AppStateType} from \"../redux-store\";\n\nconst {enqueueSnackbar} = appActions;\nconst {setUserData, setCaptchaUrl, setCurrentUserInfo} = authActions;\nconst {setUserProfile, setUserProfileError, toggleProfileLoading, setPhoto, getIsUserFollowed, updateIsFollowed, getUserProfile, setStatus} = profileActions;\nconst {\n    acceptFollow,\n    acceptUnfollow,\n    setPage,\n    setSearchText,\n    setUsers,\n    setUsersTotalCount,\n    toggleFollowInProgress,\n    toggleIsLoading\n} = usersActions;\nconst {\n    requestNewMessagesCount,\n    addMessage,\n    addMessageToDeleted,\n    addMessageToSpam,\n    restoreFromSpamDeleted,\n    setActivityDate,\n    setDialogs,\n    setMessages,\n    setMessagesLoading,\n    setNewMessagesCount,\n    setSelectedFriend\n} = dialogActions;\n\n//PROFILE\ntype GetUserProfileType = ReturnType<typeof profileActions.getUserProfile>;\n\nfunction* getUserProfileAsync({id, updateCurrentUserInfo}: GetUserProfileType) {\n    try {\n        const state = yield select();\n        const previousId = getProfile(state)?.userId;\n\n        if (previousId !== id) {\n            yield put(toggleProfileLoading(true));\n        }\n        const data = yield call(getProfileById, id);\n        if (updateCurrentUserInfo) {\n            yield put(setCurrentUserInfo(data));\n        }\n        yield put(setUserProfile(data));\n        if (previousId !== id) {\n            yield put(toggleProfileLoading(false));\n        }\n    } catch (e) {\n        yield put(setUserProfileError(e.message));\n    }\n}\n\ntype UpdateProfileInfoType = ReturnType<typeof profileActions.updateProfileInfo>;\n\nfunction* updateProfileInfoAsync({info, userId}: UpdateProfileInfoType) {\n    try {\n        const {resultCode, messages} = yield call(updateProfile, info);\n        if (resultCode === ResultCodes.Success) {\n            yield put(getUserProfile(userId, true));\n            yield put(enqueueSnackbar({message: 'Profile successfully updated!', options: {variant: 'success'}}))\n        } else {\n            yield put(stopSubmit(\"settings\", {_error: messages}));\n        }\n    } catch (e) {\n        yield put(setUserProfileError(e.message));\n    }\n}\n\ntype GetStatusType = ReturnType<typeof profileActions.getUserStatus>;\n\nfunction* getStatusAsync({id}: GetStatusType) {\n    try {\n        const data = yield call(getUserStatus, id);\n        yield put(setStatus(data));\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype SetUserStatusType = ReturnType<typeof profileActions.setUserStatus>;\n\nfunction* setUserStatusAsync({status}: SetUserStatusType) {\n    try {\n        const {resultCode} = yield call(setUserStatus, status);\n        if (resultCode === ResultCodes.Success) {\n            yield put(setStatus(status));\n            yield put(enqueueSnackbar({message: 'Status updated!', options: {variant: 'success'}}))\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype loadPhotoType = ReturnType<typeof profileActions.loadPhoto>;\n\nfunction* loadPhotoAsync({photo}: loadPhotoType) {\n    try {\n        const {data, resultCode, messages} = yield call(loadPhoto, photo);\n        if (resultCode === ResultCodes.Success) {\n            const state = yield select();\n            yield put(setPhoto(data.photos));\n            yield put({type: GET_USER_PROFILE_ASYNC, id: getCurrentUserId(state), updateCurrentUserInfo: true});\n        } else {\n            yield put(enqueueSnackbar({message: messages, options: {variant: 'error'}}))\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\n//USERS\ntype setUserIsFollowedType = ReturnType<typeof profileActions.getIsUserFollowed>;\n\nfunction* setUserIsFollowedAsync({id}: setUserIsFollowedType) {\n    try {\n        const isFollowed = yield call(getUserIsFollowed, id);\n        yield put(updateIsFollowed(isFollowed));\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype RequestUsersType = ReturnType<typeof usersActions.requestUsers>;\n\nfunction* requestUsersAsync({currentPage, pageSize, searchText}: RequestUsersType) {\n    try {\n        yield put(setSearchText(searchText));\n        yield put(setPage(currentPage));\n        yield put(toggleIsLoading(true));\n        const {items, totalCount} = yield call(requestUsers, currentPage, pageSize, searchText);\n        yield put(toggleIsLoading(false));\n        yield put(setUsers(items));\n        yield put(setUsersTotalCount(totalCount));\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype FollowActionType = ReturnType<typeof usersActions.follow | typeof usersActions.unfollow>;\n\nfunction* toggleFollowAsync({action, id, updateProfileFollow}: FollowActionType) {\n    try {\n        yield put(toggleFollowInProgress(true, id));\n        const {resultCode, messages} = action === 'follow' ? yield call(followUser, id) : yield call(unfollowUser, id);\n        if (resultCode === ResultCodes.Success) {\n            action === 'follow' ? yield put(acceptFollow(id)) : yield put(acceptUnfollow(id));\n            if (updateProfileFollow) {\n                yield put(getIsUserFollowed(id));\n            }\n        } else {\n            yield put(enqueueSnackbar({message: messages, options: {variant: 'error'}}))\n        }\n        yield put(toggleFollowInProgress(false, id));\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\n//DIALOGS\nfunction* getDialogsAsync() {\n    try {\n        const response = yield call(requestDialogs);\n        yield put(setDialogs(response));\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype StartChatAsyncType = ReturnType<typeof dialogActions.startChat>;\nfunction* startChatAsync({userId, history}: StartChatAsyncType) {\n    try {\n        const {resultCode} = yield call(startChat, userId);\n        if (resultCode === ResultCodes.Success) {\n            history.push(`/dialogs/${userId}`)\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype SendMessageType = ReturnType<typeof dialogActions.sendMessage>;\n\nfunction* sendMessageAsync({userId, message}: SendMessageType) {\n    try {\n        const {data, resultCode} = yield call(sendMessage, userId, message);\n        if (resultCode === ResultCodes.Success) {\n            socket.emit('new_message', data.message);\n            yield put(addMessage(data.message));\n            yield put(reset('message'));\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype DeleteMessagesType = ReturnType<typeof dialogActions.deleteMessage>;\n\nfunction* deleteMessagesAsync({messageId}: DeleteMessagesType) {\n    try {\n        const {resultCode} = yield call(deleteMessage, messageId);\n        if (resultCode === ResultCodes.Success) {\n            yield put(addMessageToDeleted(messageId));\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype RestoreMessagesType = ReturnType<typeof dialogActions.restoreMessage>;\n\nfunction* restoreMessagesAsync({messageId}: RestoreMessagesType) {\n    try {\n        const {resultCode} = yield call(restoreMessage, messageId);\n        if (resultCode === ResultCodes.Success) {\n            yield put(restoreFromSpamDeleted(messageId));\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype SpamMessagesType = ReturnType<typeof dialogActions.spamMessage>;\n\nfunction* spamMessagesAsync({messageId}: SpamMessagesType) {\n    try {\n        const {resultCode} = yield call(spamMessage, messageId);\n        if (resultCode === ResultCodes.Success) {\n            yield put(addMessageToSpam(messageId));\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\nconst watchMessages = (state: AppStateType, items: MessagesType[], userId: number) => {\n    const myId = getCurrentUserId(state);\n    let notViewedMess = items.filter((i: MessagesType) => i.senderId !== myId && !i.viewed);\n    if(notViewedMess.length > 0) {\n        socket.emit('watch_messages', {watcher: myId, reciever: userId});\n    }\n};\n\ntype GetMessagesType = ReturnType<typeof dialogActions.getMessages>;\n\nfunction* getMessagesAsync({userId}: GetMessagesType) {\n    try {\n        yield put(setMessagesLoading(true));\n        const {error, items} = yield call(getMessages, userId);\n        const data = yield call(getProfileById, userId);\n        if (!error) {\n            yield put(setMessages(items));\n            yield put(setActivityDate(userId));\n            yield put(setSelectedFriend(data));\n        }\n        const state = yield select();\n        watchMessages(state, items, userId);\n        yield put(setMessagesLoading(false));\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\ntype UpdateMessagesType = ReturnType<typeof dialogActions.updateMessages>;\nfunction* updateMessagesAsync({userId}: UpdateMessagesType) {\n    try {\n        const {error, items} = yield call(getMessages, userId);\n        if (!error) {\n            yield put(setMessages(items));\n            const state = yield select();\n            watchMessages(state, items, userId);\n            yield put(requestNewMessagesCount());\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\nfunction* getNewMessagesCountAsync() {\n    try {\n        const data = yield call(newMessagesCount);\n        yield put(setNewMessagesCount(data));\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\n//AUTH\nfunction* authenticateAsync() {\n    try {\n        const {data, resultCode} = yield call(authenticate);\n        if (resultCode === ResultCodes.Success) {\n            const {id, login, email} = data;\n            yield put(setUserData(id, login, email, true));\n            yield put(getUserProfile(id, true));\n            yield put(requestNewMessagesCount());\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype LoginType = ReturnType<typeof authActions.login>;\n\nfunction* loginAsync({email, password, rememberMe, captcha}: LoginType) {\n    try {\n        const {resultCode, messages} = yield call(login, email, password, rememberMe, captcha);\n        if (resultCode === ResultCodes.Success) {\n            yield put({type: AUTH_ASYNC});\n        } else {\n            if (resultCode === ResultCodeForCaptcha.CaptchaRequired) {\n                const {url} = yield call(getCaptcha);\n                yield put(setCaptchaUrl(url));\n            }\n            yield put(stopSubmit(\"login\", {_error: messages}));\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\ntype LogoutType = ReturnType<typeof authActions.logout>;\n\nfunction* logoutAsync({history}: LogoutType) {\n    try {\n        const {resultCode} = yield call(logout);\n        if (resultCode === ResultCodes.Success) {\n            yield put(setUserData(null, null, null, false));\n            yield put(setNewMessagesCount(0));\n            history.push('/login')\n        }\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\nfunction* appInitAsync() {\n    try {\n        yield put({type: AUTH_ASYNC});\n        yield put(appActions.setAppIsInited());\n    } catch (e) {\n        yield put(enqueueSnackbar({message: e.message, options: {variant: 'error'}}))\n    }\n}\n\n// API REQUESTS\nasync function authenticate() {\n    return await authAPI.auth();\n}\n\nasync function login(email: string, password: string, rememberMe: boolean, captcha: string | null) {\n    return await authAPI.login(email, password, rememberMe, captcha)\n}\n\nasync function logout() {\n    return await authAPI.logout();\n}\n\nasync function getCaptcha() {\n    return await securityAPI.getCaptcha();\n}\n\nasync function getUserStatus(id: number) {\n    return await profileAPI.getStatus(id);\n}\n\nasync function loadPhoto(photo: any) {\n    return await profileAPI.loadPhoto(photo);\n}\n\nasync function setUserStatus(status: string) {\n    return await profileAPI.setStatus(status)\n}\n\nasync function getProfileById(id: number) {\n    return await profileAPI.getProfile(id);\n}\n\nasync function updateProfile(info: ProfileType) {\n    return await profileAPI.updateProfileInfo(info);\n}\n\nasync function requestUsers(currentPage: number, pageSize: number, searchText: string) {\n    return await usersAPI.getUsers(currentPage, pageSize, searchText)\n}\n\nasync function getUserIsFollowed(id: number) {\n    return await usersAPI.isUserFollowed(id);\n}\n\nasync function followUser(id: number) {\n    return await usersAPI.followUser(id)\n}\n\nasync function unfollowUser(id: number) {\n    return await usersAPI.unfollowUser(id)\n}\n\nasync function requestDialogs() {\n    return await dialogsAPI.getDialogs();\n}\n\nasync function startChat(userId: number) {\n    return await dialogsAPI.startChat(userId);\n}\n\nasync function sendMessage(userId: number, message: string) {\n    return await dialogsAPI.sendMessage(userId, message);\n}\n\nasync function getMessages(userId: number) {\n    return await dialogsAPI.getMessages(userId);\n}\n\nasync function deleteMessage(messageId: string) {\n    return await dialogsAPI.deleteMessage(messageId)\n}\n\nasync function restoreMessage(messageId: string) {\n    return await dialogsAPI.restoreMessage(messageId)\n}\n\nasync function spamMessage(messageId: string) {\n    return await dialogsAPI.spamMessage(messageId);\n}\n\nasync function newMessagesCount() {\n    return await dialogsAPI.newMessagesCount()\n}\n\n//SAGA\nfunction* mySaga() {\n    yield takeEvery(INIT_APP_ASYNC, appInitAsync);\n    yield takeEvery(AUTH_ASYNC, authenticateAsync);\n    yield takeEvery(LOGIN_ASYNC, loginAsync);\n    yield takeEvery(LOGOUT_ASYNC, logoutAsync);\n    yield takeEvery(GET_USER_PROFILE_ASYNC, getUserProfileAsync);\n    yield takeEvery(LOAD_PHOTO_ASYNC, loadPhotoAsync);\n    yield takeEvery(GET_IS_FOLLOWED_ASYNC, setUserIsFollowedAsync);\n    yield takeEvery(FOLLOW_ASYNC, toggleFollowAsync);\n    yield takeEvery(UNFOLLOW_ASYNC, toggleFollowAsync);\n    yield takeEvery(REQUEST_USERS_ASYNC, requestUsersAsync);\n    yield takeEvery(GET_STATUS_ASYNC, getStatusAsync);\n    yield takeEvery(SET_STATUS_ASYNC, setUserStatusAsync);\n    yield takeEvery(UPDATE_USER_PROFILE_ASYNC, updateProfileInfoAsync);\n    yield takeEvery(GET_DIALOGS_ASYNC, getDialogsAsync);\n    yield takeEvery(START_CHAT_ASYNC, startChatAsync);\n    yield takeEvery(SEND_MESSAGE_ASYNC, sendMessageAsync);\n    yield takeEvery(GET_MESSAGES_ASYNC, getMessagesAsync);\n    yield takeEvery(UPDATE_MESSAGES_ASYNC, updateMessagesAsync);\n    yield takeEvery(DELETE_MESSAGE_ASYNC, deleteMessagesAsync);\n    yield takeEvery(RESTORE_MESSAGE_ASYNC, restoreMessagesAsync);\n    yield takeEvery(SPAM_MESSAGE_ASYNC, spamMessagesAsync);\n    yield takeEvery(GET_NEW_MESSAGES_COUNT_ASYNC, getNewMessagesCountAsync);\n}\n\nexport default mySaga;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./reducers/profile-reducer\";\nimport dialogsReducer from \"./reducers/dialogs-reducer\";\nimport authReducer from \"./reducers/auth-reducer\";\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./reducers/app-reducer\";\nimport usersReducer from \"./reducers/users-reducer\";\nimport createSagaMiddleware from 'redux-saga'\nimport mySaga from \"./sagas/saga\";\n\nconst rootReducer = combineReducers({\n    profileReducer,\n    dialogsReducer,\n    usersReducer,\n    authReducer,\n    app: appReducer,\n    form: formReducer\n});\n\ntype RootReducerType = typeof rootReducer;\nexport type AppStateType =  ReturnType<RootReducerType>;\nconst sagaMiddleware = createSagaMiddleware();\n\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never;\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>;\n\n// @ts-ignore\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(\n        thunkMiddleware,\n        sagaMiddleware\n    )\n));\n\nsagaMiddleware.run(mySaga);\n\nexport default store;","import {createMuiTheme} from '@material-ui/core/styles';\nimport {grey} from '@material-ui/core/colors';\n\nexport default createMuiTheme({\n    typography: {\n        fontFamily: [\n            '-apple-system',\n            'BlinkMacSystemFont',\n            '\"Segoe UI\"',\n            'Roboto',\n            '\"Helvetica Neue\"',\n            'Arial',\n            'sans-serif',\n            '\"Apple Color Emoji\"',\n            '\"Segoe UI Emoji\"',\n            '\"Segoe UI Symbol\"',\n        ].join(','),\n        useNextVariants: true,\n        color: '#333',\n        h2: {\n            fontSize: '3rem'\n        },\n        h3: {\n            fontSize: '2.5rem'\n        },\n        h4: {\n            fontSize: '1.75rem'\n        },\n        subtitle1: {\n            fontWeight: 500\n        }\n\n    },\n    mixins: {\n        toolbar: {\n            minHeight: 48\n        }\n    },\n    palette: {\n        type: 'light',\n        primary: {\n            main: '#3d4977'\n        },\n        secondary: {\n            main: '#ab003c',\n        },\n        grey: grey,\n        success: {\n            main: '#00B294',\n        },\n        background: '#f5f5f5',\n        error: {\n            main: '#E81123'\n        },\n        contrastThreshold: 3,\n        tonalOffset: 0.2,\n        contrastText: '#fff',\n        text: {\n            primary: '#333',\n        },\n\n    },\n});","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport {Provider} from 'react-redux';\nimport './index.scss';\nimport App from './App';\nimport ApolloClient from 'apollo-boost';\nimport {ThemeProvider} from '@material-ui/styles';\nimport theme from './theme'\nimport {ApolloProvider as ApolloHooksProvider} from \"@apollo/react-hooks\";\nimport {SnackbarProvider} from 'notistack';\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n});\n\n\nReactDOM.render(\n    <Router>\n        <ApolloHooksProvider client={client}>\n            <Provider store={store}>\n                <SnackbarProvider maxSnack={3} anchorOrigin={{vertical: 'bottom', horizontal: 'right',}} autoHideDuration={2000}>\n                    <ThemeProvider theme={theme}>\n                        <App/>\n                    </ThemeProvider>\n                </SnackbarProvider>\n            </Provider>\n        </ApolloHooksProvider>\n    </Router>, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","export const updateObjectInArray = (items: Array<any>, itemId: number,  objPropName: string, objNewProps: any ) => {\n    return items.map(item => {\n        if (item[objPropName] === itemId) {\n            return {...item, ...objNewProps}\n        }\n        return item;\n    })\n};","import {updateObjectInArray} from \"../../utils/helpers\";\nimport {UserType} from \"./types\";\nimport {InferActionsTypes} from \"../redux-store\";\n\nexport const FOLLOW_ASYNC = 'users/FOLLOW_ASYNC';\nexport const UNFOLLOW_ASYNC = 'users/UNFOLLOW_ASYNC';\nexport const REQUEST_USERS_ASYNC = 'users/REQUEST_USERS_ASYNC';\nexport const FOLLOW_ACCEPT = 'users/FOLLOW_ACCEPT';\nexport const UNFOLLOW_ACCEPT = 'users/UNFOLLOW_ACCEPT';\nexport const SET_USERS = 'users/SET_USERS';\nexport const SET_PAGE = 'users/SET_PAGE';\nexport const SET_TOTAL_COUNT = 'users/SET_TOTAL_COUNT';\nexport const TOGGLE_IS_LOADING = 'users/TOGGLE_IS_LOADING';\nexport const TOGGLE_FOLLOW_IN_PROGRESS = 'users/TOGGLE_FOLLOW_IN_PROGRESS';\nexport const SET_SEARCH_TEXT = 'users/SET_SEARCH_TEXT';\n\nconst initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 12 as number,\n    totalUsersCount: 20 as number,\n    currentPage: 1 as number,\n    isLoading: true,\n    followInProgress: [] as Array<number>,\n    searchQuery: null as string | null,\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst usersReducer = (state = initialState, action: UsersActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case FOLLOW_ACCEPT:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\n            };\n        case UNFOLLOW_ACCEPT:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\n            };\n        case SET_USERS:\n            return {...state, users: action.users};\n        case SET_PAGE:\n            return {...state, currentPage: action.page};\n        case SET_TOTAL_COUNT:\n            return {...state, totalUsersCount: action.count};\n        case TOGGLE_IS_LOADING:\n            return {...state, isLoading: action.isLoading};\n        case SET_SEARCH_TEXT:\n            return {...state, searchQuery: action.query};\n        case TOGGLE_FOLLOW_IN_PROGRESS:\n            return {\n                ...state,\n                followInProgress: action.inProgress ?\n                    [...state.followInProgress, action.userId] :\n                    state.followInProgress.filter(id => id !== action.userId)\n            };\n        default:\n            return state;\n    }\n};\n\nexport type UsersActionsTypes = InferActionsTypes<typeof usersActions>;\n\nexport const usersActions = {\n   setUsers: (users: Array<UserType>) => ({type: SET_USERS, users} as const),\n   setPage: (page: number) => ({type: SET_PAGE, page} as const),\n   setUsersTotalCount: (count: number) => ({type: SET_TOTAL_COUNT, count} as const),\n   toggleIsLoading: (isLoading: boolean) => ({type: TOGGLE_IS_LOADING, isLoading} as const),\n   toggleFollowInProgress: (inProgress: boolean, userId: number) => ({type: TOGGLE_FOLLOW_IN_PROGRESS, inProgress, userId} as const),\n   setSearchText: (query: string) => ({type: SET_SEARCH_TEXT, query} as const),\n   requestUsers: (currentPage: number, pageSize: number, searchText: string) => ({type: REQUEST_USERS_ASYNC, currentPage, pageSize, searchText} as const),\n   follow: (id: number, updateProfileFollow: boolean) => ({type: FOLLOW_ASYNC, action: 'follow', id, updateProfileFollow} as const),\n   unfollow: (id: number, updateProfileFollow: boolean) => ({type: UNFOLLOW_ASYNC, action: 'unfollow', id, updateProfileFollow} as const),\n   acceptFollow: (userId: number) => ({type: FOLLOW_ACCEPT, userId} as const),\n   acceptUnfollow: (userId: number) => ({type: UNFOLLOW_ACCEPT, userId} as const),\n};\n\nexport default usersReducer;","import {ProfileType} from \"./types\";\nimport {InferActionsTypes} from \"../redux-store\";\n\nexport const AUTH_ASYNC = 'auth/AUTH_ASYNC';\nexport const LOGIN_ASYNC = 'auth/LOGIN_ASYNC';\nexport const LOGOUT_ASYNC = 'auth/LOGOUT_ASYNC';\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\nconst SET_CAPTCHA_URL = 'auth/SET_CAPTCHA_URL';\nconst SET_CURRENT_USER_INFO = 'auth/SET_CURRENT_USER_INFO';\n\nconst initialState = {\n    userId: null as number | null,\n    login: null as string | null,\n    email: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null,\n    currentUserInfo: null as ProfileType | null\n};\n\ntype InitialStateType = typeof initialState;\n\nconst authReducer = (state = initialState, action: AuthActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            const {userId, login, email, isAuth} = action;\n            return {...state, userId, login, email, isAuth};\n        case SET_CURRENT_USER_INFO:\n            const {currentUserInfo} = action;\n            return {...state, currentUserInfo};\n        case SET_CAPTCHA_URL:\n            const {captchaUrl} = action;\n            return {...state, captchaUrl};\n        default:\n            return state;\n    }\n};\n\nexport type AuthActionsTypes = InferActionsTypes<typeof authActions>;\nexport const authActions = {\n    setUserData: (userId: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\n        type: SET_USER_DATA, userId, login, email, isAuth\n    } as const),\n    setCaptchaUrl: (captchaUrl: string) => ({type: SET_CAPTCHA_URL, captchaUrl} as const),\n    setCurrentUserInfo: (currentUserInfo: ProfileType | null) => ({type: SET_CURRENT_USER_INFO, currentUserInfo} as const),\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => ({type: LOGIN_ASYNC, email, password, rememberMe, captcha} as const),\n    logout: (history: any) => ({type: LOGOUT_ASYNC, history}  as const),\n};\nexport default authReducer;","import {AppStateType} from \"../redux-store\";\n\nexport const getCurrentUserId = (state: AppStateType) => {\n    return state.authReducer.userId\n};\n\nexport const getCurrentUserLogin = (state: AppStateType) => {\n    return state.authReducer.login\n};\n\nexport const getIsAuth = (state: AppStateType) => {\n    return state.authReducer.isAuth\n};\n\nexport const getCurrentUserInfo = (state: AppStateType) => {\n    return state.authReducer.currentUserInfo\n};\n\nexport const getCaptchaUrl = (state: AppStateType) => {\n    return state.authReducer.captchaUrl\n};","import {InferActionsTypes} from \"../redux-store\";\n\nexport const INIT_APP_ASYNC = 'app/INIT_APP_ASYNC';\nexport const ENQUEUE_SNACKBAR = 'app/ENQUEUE_SNACKBAR';\nexport const REMOVE_SNACKBAR = 'app/REMOVE_SNACKBAR';\nconst SET_INITED = 'app/SET_INITED';\n\ntype InitialStateType = {\n    inited: boolean,\n    notifications: any[],\n};\n\nconst initialState: InitialStateType = {\n    inited: false,\n    notifications: [],\n};\n\nconst appReducer = (state = initialState, action: AppActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_INITED:\n            return {\n                ...state,\n                inited: true\n            };\n        case ENQUEUE_SNACKBAR:\n            return {\n                ...state,\n                notifications: [\n                    ...state.notifications,\n                    {\n                        ...action.notification,\n                    },\n                ],\n            };\n        case REMOVE_SNACKBAR:\n            return {\n                ...state,\n                notifications: state.notifications.filter(\n                    notification => notification.key !== action.key,\n                ),\n            };\n        default:\n            return state;\n    }\n};\n\nexport type AppActionsTypes = InferActionsTypes<typeof appActions>;\nexport const appActions = {\n    enqueueSnackbar: (notification: any) => {\n        const key = notification.options && notification.options.key;\n        return {\n            type: ENQUEUE_SNACKBAR,\n            notification: {...notification, key: key || new Date().getTime() + Math.random()}\n        } as const;\n    },\n    removeSnackbar: (key: any) => ({type: REMOVE_SNACKBAR, key} as const),\n    setAppIsInited: () => ({type: SET_INITED} as const),\n    appInitialize: () => ({type: INIT_APP_ASYNC} as const),\n};\n\nexport default appReducer;","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    list: {\n        padding: 0,\n        [theme.breakpoints.up('sm')]: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n            marginRight: 20,\n        },\n    },\n    listItem: {\n        padding: '0 8px',\n        width: 'auto',\n        [theme.breakpoints.down('xs')]: {\n            borderBottom: `1px solid ${theme.palette.grey[200]}`,\n        },\n    },\n    link: {\n        color: theme.palette.text.primary,\n        alignItems: 'center',\n        display: 'flex',\n        width: '100%',\n        [theme.breakpoints.down('xs')]: {\n            padding: '8px 0',\n            color: theme.palette.grey[600]\n        },\n    },\n    icon: {\n        padding: theme.spacing(1),\n        color: theme.palette.common.white,\n        lineHeight: 0,\n        [theme.breakpoints.down('xs')]: {\n            color: theme.palette.grey[500],\n            marginRight: 5\n        },\n    },\n    name: {\n        [theme.breakpoints.down('xs')]: {\n            fontSize: '1.2rem'\n        },\n    },\n    activeLink: {\n        pointerEvents: 'none',\n        \"& .MuiIconButton-root\": {\n            backgroundColor: theme.palette.primary.light\n        },\n        '& $icon, & $name': {\n            [theme.breakpoints.down('xs')]: {\n                color: theme.palette.primary.light,\n            },\n        }\n    },\n    tooltip: {\n        backgroundColor: theme.palette.primary.light,\n    },\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport RM from \"../../RouterManager\";\nimport classNames from \"classnames\";\nimport {MailIcon, PeopleAltIcon, HomeIcon, SettingsIcon, ExitToAppIcon} from \"../Icons/MeterialIcons\";\nimport {\n    List,\n    ListItem,\n    Link,\n    IconButton,\n    Tooltip,\n    Badge, Hidden, Typography, WithStyles,\n} from \"@material-ui/core\";\nimport withNavbarStyles from \"./navbarStyles\";\n\ntype PropsType = {\n    newMessagesCount: null | number,\n    userId: number | null,\n    openLogoutDialog: (open: boolean) => void,\n    isAuth: boolean\n};\n\nconst Navbar: FC<PropsType & WithStyles> = ({newMessagesCount, userId, openLogoutDialog, isAuth, classes}) => {\n    const LINKS = [\n        {\n            id: 1,\n            text: 'Profile',\n            url: RM.profile.getPath(userId),\n            icon: <HomeIcon/>\n        }, {\n            id: 2,\n            text: 'Dialogs',\n            url: RM.dialogs.getPath(null),\n            icon: <MailIcon/>\n        }, {\n            id: 3,\n            text: 'Users',\n            url: RM.users.path,\n            icon: <PeopleAltIcon/>\n        }\n    ];\n\n    const MOBILE_LINKS = [\n        ...LINKS,\n        {\n            id: 4,\n            text: 'Settings',\n            url: RM.settings.path,\n            icon: <SettingsIcon/>\n        },\n        {\n            id: 5,\n            text: 'Logout',\n            url: null,\n            icon: <ExitToAppIcon/>\n        }\n    ];\n\n    let areNewMessages = newMessagesCount && newMessagesCount > 0;\n\n    return (\n        <List className={classes.list}>\n            <Hidden xsDown>\n                {LINKS.map(({id, text, url, icon}) => (\n                    <ListItem key={id} className={classes.listItem}>\n                        <Link component={NavLink} to={url} activeClassName={classes.activeLink} className={classes.link}\n                              underline=\"none\" color=\"textSecondary\">\n                            <Tooltip title={text} aria-label={text} classes={{tooltip: classes.tooltip}}>\n                                <IconButton aria-label={text} className={classes.icon}>\n                                    {url === RM.dialogs.getPath(null) && areNewMessages ?\n                                        <Badge badgeContent={newMessagesCount} max={99} color=\"secondary\">\n                                            {icon}\n                                        </Badge> : icon\n                                    }\n                                </IconButton>\n                            </Tooltip>\n                        </Link>\n                    </ListItem>\n                ))}\n            </Hidden>\n\n            <Hidden smUp>\n                {MOBILE_LINKS.map(({id, text, url, icon}) => {\n                        if (id === 5 && !isAuth) return null;\n                        return (\n                            <ListItem key={id} className={classes.listItem}>\n                                <Link component={url ? NavLink : 'span'}\n                                      {...url ? {\n                                          to: url,\n                                          activeClassName: classes.activeLink\n                                      } : ''}\n                                      {...id === 5 ? {onClick: () => openLogoutDialog(true)} : ''}\n                                      className={classes.link}\n                                      underline=\"none\"\n                                      color=\"textSecondary\"\n                                >\n                                    <Typography variant=\"body1\" component=\"span\"\n                                                className={classNames('MuiListItemIcon-root', classes.icon)}>\n                                        {url === RM.dialogs.getPath(null) && areNewMessages ?\n                                            <Badge color=\"secondary\" variant=\"dot\">\n                                                {icon}\n                                            </Badge> : icon\n                                        }\n                                    </Typography>\n                                    <Typography variant=\"body1\" component=\"span\" className={classes.name}>\n                                        {text}\n                                    </Typography>\n                                </Link>\n                            </ListItem>\n                        )\n                    }\n                )}\n            </Hidden>\n        </List>\n    )\n};\n\n\nexport default withNavbarStyles(Navbar);","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    paper: {\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n    },\n    list: {\n        padding: 0,\n        backgroundColor: theme.palette.common.white\n    },\n    menuItemTxt: {\n        lineHeight: 1\n    },\n    menuItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.primary.light,\n            color:  theme.palette.common.white,\n\n            '& .MuiLink-root, & .MuiListItemIcon-root': {\n                color:  theme.palette.common.white,\n                textDecoration: 'none'\n            }\n        }\n    },\n    menuIcon: {\n      minWidth: 35\n    },\n    link: {\n        '&:hover': {\n            backgroundColor: theme.palette.primary.light,\n            color:  theme.palette.common.white,\n\n            '& .MuiLink-root, & .MuiListItemIcon-root': {\n                color:  theme.palette.common.white,\n                textDecoration: 'none'\n            }\n        }\n    }\n}));\n\n\nexport default withStyles(styles, {withTheme: true})","import React, {FC} from 'react';\nimport {\n    Divider,\n    ListItemIcon,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Typography,\n    WithStyles\n} from '@material-ui/core';\nimport {NavLink} from \"react-router-dom\";\nimport withSubmenuStyles from './submenuStyles'\nimport RM from \"../../RouterManager\";\nimport classNames from \"classnames\";\nimport {EditRoundedIcon, PersonRoundedIcon, ExitToAppIcon} from \"../Icons/MeterialIcons\";\n\ntype PropsType = {\n    userId: number | null,\n    handleClose: () => void\n    anchorEl: null | HTMLElement,\n    openLogoutDialog: (open: boolean) => void\n}\n\nconst Submenu: FC<PropsType & WithStyles> = ({userId, handleClose, anchorEl, classes, openLogoutDialog}) => {\n    return (\n        <Menu\n            id=\"customized-menu\"\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n            elevation={10}\n            getContentAnchorEl={null}\n            classes={{\n                paper: classes.paper,\n                list: classes.list\n            }}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <MenuItem component={NavLink} to={RM.profile.getPath(userId)} className={classes.menuItem} onClick={() => handleClose()}>\n                    <span className={classNames('MuiListItemIcon-root', classes.menuIcon)}>\n                        <PersonRoundedIcon fontSize=\"small\"/>\n                    </span>\n                <Typography variant=\"body1\" component=\"span\" className={classes.menuItemTxt}>Profile</Typography>\n            </MenuItem>\n            <Divider orientation=\"horizontal\" light={true}/>\n            <MenuItem component={NavLink} to={RM.settings.path} className={classes.menuItem} onClick={() => handleClose()}>\n                     <span className={classNames('MuiListItemIcon-root', classes.menuIcon)}>\n                        <EditRoundedIcon fontSize=\"small\"/>\n                    </span>\n                <Typography variant=\"body1\" component=\"span\" className={classes.menuItemTxt}>Edit Profile</Typography>\n            </MenuItem>\n            <Divider orientation=\"horizontal\" light={true}/>\n\n            <MenuItem className={classes.menuItem} onClick={() => {openLogoutDialog(true); handleClose()}}>\n                <ListItemIcon className={classes.menuIcon}>\n                    <ExitToAppIcon fontSize=\"small\"/>\n                </ListItemIcon>\n                <ListItemText classes={{primary: classes.menuItemTxt}} primary=\"Logout\"/>\n            </MenuItem>\n        </Menu>\n    )\n};\n\nexport default withSubmenuStyles(Submenu);","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    avatar: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: 20,\n        paddingRight: 20,\n        textTransform: 'none',\n    },\n    avatarRoot: {\n        marginRight: 10\n    },\n    loginLink: {\n        paddingLeft: 20,\n        paddingRight: 20,\n        color: theme.palette.common.white\n    },\n\n    avatarText: {\n        padding: '0 5px'\n    },\n\n    avatarIcon: {\n        '&.active': {\n            transform: 'rotate(180deg)',\n            transition: '0.1s linear'\n        }\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {Avatar, Button, Hidden, Link, Typography, WithStyles} from \"@material-ui/core\";\nimport {NavLink} from \"react-router-dom\";\nimport userPlaceholder from \"../../assets/images/user-placeholder.png\";\nimport {ProfileType} from \"../../redux/reducers/types\";\nimport Submenu from \"./Submenu\";\nimport RM from \"../../RouterManager\";\nimport withAuthBtnStyles from \"./authBtnStyles\";\nimport {ExpandMoreRoundedIcon} from \"../Icons/MeterialIcons\";\n\ntype PropsType = {\n    login: string | null,\n    isAuth: boolean,\n    currentUserInfo: ProfileType | null\n    userId: number | null,\n    openLogoutDialog: (open: boolean) => void\n}\n\nconst AuthBtn: FC<PropsType & WithStyles> = ({isAuth, login, currentUserInfo, userId, openLogoutDialog, classes}) => {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const avatar = currentUserInfo  && currentUserInfo.photos.small ? currentUserInfo.photos.small : userPlaceholder;\n\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <>\n            {\n                isAuth &&\n                <>\n                    <Button\n                        className={classes.avatar}\n                        color=\"inherit\"\n                        onClick={handleClick}\n                        aria-controls=\"customized-menu\"\n                        aria-haspopup=\"true\"\n                    >\n                        <Avatar src={avatar} alt={login ? login : 'avatar'} sizes=\"40\" classes={{root: classes.avatarRoot}}/>\n                        <Hidden smDown>\n                            <Typography variant=\"body2\" className={classes.avatarText}>\n                                {currentUserInfo && currentUserInfo.fullName ? currentUserInfo.fullName : login}\n                            </Typography>\n                        </Hidden>\n                        <ExpandMoreRoundedIcon fontSize=\"small\" className={`${classes.avatarIcon} ${anchorEl ? 'active': ''}`}/>\n                    </Button>\n                    <Submenu openLogoutDialog={openLogoutDialog} userId={userId} handleClose={handleClose} anchorEl={anchorEl}/>\n                </>\n            }\n\n            {\n                !isAuth &&\n                <Link component={NavLink} to={RM.login.path} className={classes.loginLink}>\n                    Login\n                </Link>\n            }\n\n        </>\n    )\n};\n\nexport default withAuthBtnStyles(AuthBtn);","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    list: {\n        width: 250,\n    },\n    menuButton: {\n        marginRight: 0,\n        padding: theme.spacing(1)\n    },\n    paper: {\n        backgroundColor: theme.palette.common.white\n    },\n    head: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        lineHeight: 1,\n        backgroundColor: theme.palette.primary.main,\n        height: 49,\n    },\n    headImg: {\n        height: 30\n    },\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {SwipeableDrawer, IconButton, WithStyles} from '@material-ui/core';\nimport {NavLink} from \"react-router-dom\";\nimport RM from \"../../RouterManager\";\nimport logoImg from \"../../assets/images/logo.png\";\nimport withMobileMenuStyles from \"./mobileMenuStyles\";\nimport {CloseRoundedIcon, MenuIcon} from \"../Icons/MeterialIcons\";\n\nconst MobileMenu:FC<WithStyles> = ({children, classes}) => {\n    const [open, setOpen] = React.useState(false);\n\n    const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent,) => {\n        if (event && event.type === 'keydown' && ((event as React.KeyboardEvent).key === 'Tab' || (event as React.KeyboardEvent).key === 'Shift')) {\n            return;\n        }\n        setOpen(open)\n    };\n\n    return (\n        <>\n            <IconButton\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                onClick={toggleDrawer(true)}\n                edge=\"end\"\n                className={classes.menuButton}\n            >\n                {open ? <CloseRoundedIcon fontSize=\"large\"/> : <MenuIcon fontSize=\"large\"/>}\n            </IconButton>\n\n            <SwipeableDrawer\n                open={open}\n                onClose={toggleDrawer(false)}\n                onOpen={toggleDrawer(true)}\n                anchor=\"left\"\n                classes={{\n                    paper: classes.paper\n                }}\n            >\n                <div\n                    className={classes.list}\n                    role=\"presentation\"\n                    onClick={toggleDrawer(false)}\n                    onKeyDown={toggleDrawer(false)}\n                >\n                    <NavLink to={RM.home.path} className={classes.head}>\n                        <img src={logoImg} alt=\"\" className={classes.headImg}/>\n                    </NavLink>\n                    {children}\n                </div>\n            </SwipeableDrawer>\n        </>\n    )\n};\n\nexport default withMobileMenuStyles(MobileMenu);","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    grid: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: theme.palette.common.white,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    logo: {\n        display: 'flex',\n        alignItems: 'center',\n        height: '100%',\n        lineHeight: 1\n    },\n    logoImg: {\n        height: 30,\n        [theme.breakpoints.up('sm')]: {\n            height: 35,\n        },\n    },\n    logoutBtn: {\n        padding: theme.spacing(1),\n    },\n    logoTxt: {\n        padding: theme.spacing(1),\n        color: theme.palette.common.white,\n        fontWeight: 300\n    },\n    rightColumn: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        height: '100%'\n    },\n    avatar: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: 20,\n        paddingRight: 20,\n        textTransform: 'none'\n    },\n    avatarText: {\n        padding: '0 5px'\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport logoImg from '../../assets/images/logo.png';\nimport {\n    AppBar,\n    Toolbar,\n    Grid,\n    Container,\n    Divider, Hidden, WithStyles\n} from '@material-ui/core';\nimport Navbar from \"./Navbar\";\nimport {ProfileType} from \"../../redux/reducers/types\";\nimport AuthBtn from \"./AuthBtn\";\nimport RM from \"../../RouterManager\";\nimport MobileMenu from \"./MobileMenu\";\nimport withHeaderStyles from \"./headerStyles\";\n\ntype PropsType = {\n    userId: number | null,\n    login: string | null,\n    isAuth: boolean,\n    newMessagesCount: number | null\n    currentUserInfo: ProfileType | null,\n    openLogoutDialog: (open: boolean) => void\n}\n\nconst Header: FC<PropsType & WithStyles> = ({userId, login, isAuth, newMessagesCount, currentUserInfo, openLogoutDialog, classes}) => {\n    return (\n        <AppBar position=\"fixed\" component=\"header\" className={classes.appBar}>\n            <Container maxWidth=\"lg\">\n                <Toolbar variant=\"dense\" disableGutters>\n                    <Grid container className={classes.grid} spacing={0}>\n                        <Grid item xs={6} sm={4}>\n                            <div className={classes.logo}>\n                                <NavLink to={RM.home.path} >\n                                        <img src={logoImg} alt=\"\" className={classes.logoImg}/>\n                                </NavLink>\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} sm={8}>\n                            <div className={classes.rightColumn}>\n                                <Hidden xsDown>\n                                    <Navbar\n                                        isAuth={isAuth}\n                                        newMessagesCount={newMessagesCount}\n                                        userId={currentUserInfo ? currentUserInfo.userId : null}\n                                        openLogoutDialog={openLogoutDialog}\n                                      />\n                                    <Divider\n                                        orientation=\"vertical\"\n                                        flexItem\n                                        light={true}/>\n                                    <AuthBtn login={login} openLogoutDialog={openLogoutDialog} isAuth={isAuth}\n                                             currentUserInfo={currentUserInfo} userId={userId}/>\n                                    <Divider orientation=\"vertical\" flexItem light={true}/>\n                                </Hidden>\n\n                                <Hidden smUp>\n                                    <MobileMenu>\n                                        <Navbar\n                                            isAuth={isAuth}\n                                            openLogoutDialog={openLogoutDialog}\n                                            newMessagesCount={newMessagesCount}\n                                            userId={currentUserInfo ? currentUserInfo.userId : null}\n                                        />\n                                    </MobileMenu>\n                                </Hidden>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n            </Container>\n        </AppBar>\n    )\n};\n\nexport default withHeaderStyles(Header);","import React, {FC, useEffect, useState} from 'react';\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {authActions} from \"../../redux/reducers/auth-reducer\";\nimport {compose} from \"redux\";\nimport {withRouter, RouteComponentProps, useHistory} from \"react-router-dom\";\nimport {\n    getCurrentUserInfo,\n    getCurrentUserId,\n    getCurrentUserLogin,\n    getIsAuth\n} from \"../../redux/reducers/auth-selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getNewMessagesCount} from \"../../redux/reducers/dialogs-selectors\";\nimport {ChatParticipantsType, MessagesType, ProfileType} from \"../../redux/reducers/types\";\nimport ConfirmDialog from \"../Profile/Dialogs/ConfirmDialog\";\nimport {withSnackbar, WithSnackbarProps} from 'notistack';\nimport {dialogActions} from \"../../redux/reducers/dialogs-reducer\";\nimport {socket} from \"../../App\";\n\ntype MapStatePropsType = {\n    userId: number | null,\n    login: string | null,\n    isAuth: boolean,\n    newMessagesCount: number | null,\n    currentUserInfo: ProfileType | null\n}\n\ntype MapDispatchPropsType = {\n    logout: (history: any) => void,\n    requestNewMessagesCount: () => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps & WithSnackbarProps\n\nconst HeaderContainer: FC<PropsType> = ({enqueueSnackbar, requestNewMessagesCount, logout, userId, ...props}) => {\n    const [logoutDialogIsOpen, setLogoutDialogIsOpen] = useState(false);\n    let history = useHistory();\n\n    useEffect(() => {\n        socket.on('new_message', (msg: MessagesType) => {\n            if(msg.recipientId === userId) {\n                requestNewMessagesCount();\n                enqueueSnackbar(`New message from ${msg.senderName} for you!`, {variant: 'default'});\n            }\n        });\n        socket.on('watch_messages', (participants: ChatParticipantsType) => {\n            if(participants.watcher === userId) {\n                requestNewMessagesCount();\n            }\n        });\n    }, [userId]);\n\n    const openLogoutDialog = (open: boolean) => {\n        setLogoutDialogIsOpen(open);\n    };\n\n     const logoutAction = () => {\n        logout(history);\n    };\n\n    return (\n        <>\n            <Header {...props} userId={userId} openLogoutDialog={openLogoutDialog}/>\n            <ConfirmDialog\n                isOpen={logoutDialogIsOpen}\n                openDialog={openLogoutDialog}\n                confirmAction={logoutAction}>\n                {true}\n            </ConfirmDialog>\n        </>\n    )\n};\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        userId: getCurrentUserId(state),\n        login: getCurrentUserLogin(state),\n        isAuth: getIsAuth(state),\n        newMessagesCount: getNewMessagesCount(state),\n        currentUserInfo: getCurrentUserInfo(state)\n    }\n};\n\nconst {logout} = authActions;\nconst {requestNewMessagesCount} = dialogActions;\n\nexport default compose(\n    connect<MapStatePropsType, MapDispatchPropsType, RouteComponentProps, AppStateType>(mapStateToProps, {logout, requestNewMessagesCount}),\n    withSnackbar,\n    withRouter\n)(HeaderContainer) as FC;\n","import React, {Suspense} from \"react\";\nimport Preloader from \"../Preloader/Preloader\";\n\nconst withSuspense = (WrappedComponent) => {\n    return (props) => {\n        return (\n            <Suspense fallback={<Preloader showPreloader={true}/>}>\n               <WrappedComponent {...props}/>\n           </Suspense>\n        )\n    }\n};\n\nexport default withSuspense;","import {AppStateType} from \"../redux-store\";\n\nexport const getAppInited = (state: AppStateType) => {\n    return state.app.inited\n};","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useSnackbar} from 'notistack';\nimport {appActions} from \"../../redux/reducers/app-reducer\";\n\nlet displayed = [];\n\nconst Notifier = () => {\n    const dispatch = useDispatch();\n    const notifications = useSelector(store => store.app.notifications || []);\n    const {enqueueSnackbar, closeSnackbar} = useSnackbar();\n\n    const storeDisplayed = (id) => {\n        displayed = [...displayed, id];\n    };\n\n    const removeDisplayed = (id) => {\n        displayed = [...displayed.filter(key => id !== key)];\n    };\n\n    React.useEffect(() => {\n        notifications.forEach(({key, message, options = {}, dismissed = false}) => {\n            if (dismissed) {\n                // dismiss snackbar using notistack\n                closeSnackbar(key);\n                return;\n            }\n\n            // do nothing if snackbar is already displayed\n            if (displayed.includes(key)) return;\n\n            // display snackbar using notistack\n            enqueueSnackbar(message, {\n                key,\n                ...options,\n                onClose: (event, reason, myKey) => {\n                    if (options.onClose) {\n                        options.onClose(event, reason, myKey);\n                    }\n                },\n                onExited: (event, myKey) => {\n                    // removen this snackbar from redux store\n                    dispatch(appActions.removeSnackbar(myKey));\n                    removeDisplayed(myKey);\n                },\n            });\n\n            // keep track of snackbars that we've displayed\n            storeDisplayed(key);\n        });\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\n\n    return null;\n};\n\nexport default Notifier;\n","import React from 'react';\nimport {Container} from \"@material-ui/core\";\n\nconst Footer = () => {\n  return <footer className=\"footer\" style={{background: '#3d4977'}}>\n    <Container maxWidth=\"lg\">\n      <div style={{color: '#fff', padding: '5px 0', fontSize: 12}}>\n            Copyright © 2020 Andreeva Alina\n      </div>\n    </Container>\n  </footer>\n};\n\nexport default Footer;\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n    },\n    content: {\n        flexGrow: 1,\n        display: 'flex',\n        flexDirection: 'column'\n    },\n\n    toolbar: theme.mixins.toolbar,\n}));\n\nexport default withStyles(styles, {withTheme: true})","import React, {Component} from 'react';\nimport {Switch, Route, withRouter, Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {appActions} from \"./redux/reducers/app-reducer\";\nimport Preloader from \"./components/Preloader/Preloader\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport withSuspense from \"./components/HOC/Suspense\";\nimport {getAppInited} from \"./redux/reducers/app-selectors\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport {WithStyles, CssBaseline, Container} from \"@material-ui/core\";\nimport Notifier from \"./components/Notifier/Notifier\";\nimport {withSnackbar, WithSnackbarProps} from 'notistack';\nimport RM from \"./RouterManager\";\nimport Footer from \"./components/Footer/Footer\";\nimport {getIsAuth} from \"./redux/reducers/auth-selectors\";\nimport withAppStyles from './appStyles';\nimport io from 'socket.io-client';\n\nexport const socket = io();\n\ntype MapStatePropsType = {\n    inited: boolean,\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    appInitialize: () => void\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & WithStyles & WithSnackbarProps;\n\nclass App extends Component<PropsType> {\n    componentDidMount() {\n        this.props.appInitialize();\n        window.addEventListener(\"unhandledrejection\", this.globalError);\n    }\n\n    globalError = (e: any) => {\n        this.props.enqueueSnackbar(`${e.reason}`, {variant: 'error'});\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.globalError);\n    }\n\n    render() {\n        const {classes, inited} = this.props;\n        if (!inited) {\n            return <Preloader showPreloader={true}/>\n        }\n        return (\n            <>\n                <Notifier/>\n                <CssBaseline/>\n                <HeaderContainer/>\n                <Container maxWidth=\"lg\" component=\"main\" className={classes.content}>\n                    <div className={classes.toolbar}/>\n                    <Switch>\n                        {Object.entries(RM).map(([key, route]) => {\n                            const {path, exact=false, redirect=null, component: Cmp} = route;\n                            const redirectPath = redirect ? redirect(this.props.isAuth) : '';\n                            const RouteComponent = redirect ? <Redirect to={redirectPath}/> : withSuspense(Cmp);\n                            return (\n                                <Route\n                                    key={key}\n                                    path={path}\n                                    exact={exact}\n                                >\n                                    {RouteComponent}\n                                </Route>\n                            )\n                        })}\n                    </Switch>\n                </Container>\n                <Footer/>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        inited: getAppInited(state),\n        isAuth: getIsAuth(state)\n    }\n};\n\nexport default compose(\n    withAppStyles,\n    withSnackbar,\n    connect<MapStatePropsType, MapDispatchPropsType, WithSnackbarProps, AppStateType>(mapStateToProps, {appInitialize: appActions.appInitialize}),\n    withRouter\n)(App) as React.ComponentType<any>;\n\n\n\n","import {withStyles, createStyles, Theme} from '@material-ui/core/styles';\n\nconst styles = createStyles((theme: Theme) => ({\n    preloader: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"rgba(255,255,255, 0.7)\",\n        zIndex: 2,\n        bottom: 0\n    }\n}));\n\nexport default withStyles(styles, {withTheme: true})\n","import React, {FC, ReactNode} from 'react';\nimport {CircularProgress, WithStyles} from \"@material-ui/core\";\nimport withPreloaderStyles from \"./preloaderStyles\";\n\ntype PropsType = {\n    showPreloader: boolean,\n    children?: ReactNode\n}\n\nconst Preloader: FC<PropsType & WithStyles> = ({showPreloader, classes}) => {\n    if (!showPreloader) {\n        return null\n    }\n    return (\n        <div className={classes.preloader}>\n            {showPreloader &&\n                <CircularProgress color=\"secondary\"/>\n            }\n        </div>\n    )\n};\n\nexport default withPreloaderStyles(Preloader);"],"sourceRoot":""}